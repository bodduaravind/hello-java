(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn-bd": "./node_modules/moment/locale/bn-bd.js",
	"./bn-bd.js": "./node_modules/moment/locale/bn-bd.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-in": "./node_modules/moment/locale/en-in.js",
	"./en-in.js": "./node_modules/moment/locale/en-in.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./en-sg": "./node_modules/moment/locale/en-sg.js",
	"./en-sg.js": "./node_modules/moment/locale/en-sg.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-mx": "./node_modules/moment/locale/es-mx.js",
	"./es-mx.js": "./node_modules/moment/locale/es-mx.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fil": "./node_modules/moment/locale/fil.js",
	"./fil.js": "./node_modules/moment/locale/fil.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-deva": "./node_modules/moment/locale/gom-deva.js",
	"./gom-deva.js": "./node_modules/moment/locale/gom-deva.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./oc-lnc": "./node_modules/moment/locale/oc-lnc.js",
	"./oc-lnc.js": "./node_modules/moment/locale/oc-lnc.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tk": "./node_modules/moment/locale/tk.js",
	"./tk.js": "./node_modules/moment/locale/tk.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-mo": "./node_modules/moment/locale/zh-mo.js",
	"./zh-mo.js": "./node_modules/moment/locale/zh-mo.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) { // check for number or string
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return id;
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./src/$$_lazy_route_resource lazy recursive":
/*!**********************************************************!*\
  !*** ./src/$$_lazy_route_resource lazy namespace object ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "./src/$$_lazy_route_resource lazy recursive";

/***/ }),

/***/ "./src/app/app-routing.module.ts":
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/*! exports provided: AppRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppRoutingModule", function() { return AppRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _dependends_dependends_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dependends/dependends.component */ "./src/app/dependends/dependends.component.ts");
/* harmony import */ var _city_city_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./city/city.component */ "./src/app/city/city.component.ts");
/* harmony import */ var _edit_travel_edit_travel_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./edit-travel/edit-travel.component */ "./src/app/edit-travel/edit-travel.component.ts");
/* harmony import */ var _feedback_restriction_feedback_restriction_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./feedback-restriction/feedback-restriction.component */ "./src/app/feedback-restriction/feedback-restriction.component.ts");
/* harmony import */ var _myapproval_myapproval_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./myapproval/myapproval.component */ "./src/app/myapproval/myapproval.component.ts");
/* harmony import */ var _myprofile_myprofile_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./myprofile/myprofile.component */ "./src/app/myprofile/myprofile.component.ts");
/* harmony import */ var _newtravel_request_newtravel_request_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./newtravel-request/newtravel-request.component */ "./src/app/newtravel-request/newtravel-request.component.ts");
/* harmony import */ var _proxyuser_proxyuser_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./proxyuser/proxyuser.component */ "./src/app/proxyuser/proxyuser.component.ts");
/* harmony import */ var _reports_reports_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./reports/reports.component */ "./src/app/reports/reports.component.ts");
/* harmony import */ var _travel_request_travel_request_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./travel-request/travel-request.component */ "./src/app/travel-request/travel-request.component.ts");
/* harmony import */ var _update_update_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./update/update.component */ "./src/app/update/update.component.ts");
/* harmony import */ var _view_ticket_details_view_ticket_details_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./view-ticket-details/view-ticket-details.component */ "./src/app/view-ticket-details/view-ticket-details.component.ts");
/* harmony import */ var _view_ticket_view_ticket_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./view-ticket/view-ticket.component */ "./src/app/view-ticket/view-ticket.component.ts");
/* harmony import */ var _view_travel_request_view_travel_request_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./view-travel-request/view-travel-request.component */ "./src/app/view-travel-request/view-travel-request.component.ts");
/* harmony import */ var _visa_officer_location_visa_officer_location_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./visa-officer-location/visa-officer-location.component */ "./src/app/visa-officer-location/visa-officer-location.component.ts");
/* harmony import */ var _visa_process_visa_process_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./visa-process/visa-process.component */ "./src/app/visa-process/visa-process.component.ts");
/* harmony import */ var _visa_validities_visa_validities_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./visa-validities/visa-validities.component */ "./src/app/visa-validities/visa-validities.component.ts");
/* harmony import */ var _manage_country_manage_country_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./manage-country/manage-country.component */ "./src/app/manage-country/manage-country.component.ts");
/* harmony import */ var _shared_guard_auth_guard__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./shared/guard/auth.guard */ "./src/app/shared/guard/auth.guard.ts");






















var routes = [
    {
        path: '',
        component: _travel_request_travel_request_component__WEBPACK_IMPORTED_MODULE_12__["TravelRequestComponent"]
    },
    {
        path: 'MyApproval',
        component: _myapproval_myapproval_component__WEBPACK_IMPORTED_MODULE_7__["MyapprovalComponent"]
    },
    {
        path: 'NewTravelRequest',
        component: _newtravel_request_newtravel_request_component__WEBPACK_IMPORTED_MODULE_9__["NewtravelRequestComponent"]
    },
    {
        path: 'EditTravelRequest/:key/:id',
        component: _edit_travel_edit_travel_component__WEBPACK_IMPORTED_MODULE_5__["EditTravelComponent"]
    },
    {
        path: 'NewTravelRequest/:key/:id',
        component: _newtravel_request_newtravel_request_component__WEBPACK_IMPORTED_MODULE_9__["NewtravelRequestComponent"]
    },
    {
        path: 'NewTravelRequest/:key',
        component: _newtravel_request_newtravel_request_component__WEBPACK_IMPORTED_MODULE_9__["NewtravelRequestComponent"]
    },
    {
        path: 'MyProfile',
        component: _myprofile_myprofile_component__WEBPACK_IMPORTED_MODULE_8__["MyprofileComponent"]
    },
    {
        path: 'Dependends',
        component: _dependends_dependends_component__WEBPACK_IMPORTED_MODULE_3__["DependendsComponent"]
    },
    {
        path: 'ViewTravelRequest',
        component: _view_travel_request_view_travel_request_component__WEBPACK_IMPORTED_MODULE_16__["ViewTravelRequestComponent"]
    },
    {
        path: 'ViewTravelRequest/:id',
        component: _view_travel_request_view_travel_request_component__WEBPACK_IMPORTED_MODULE_16__["ViewTravelRequestComponent"]
    },
    {
        path: 'UpdateTicket',
        component: _update_update_component__WEBPACK_IMPORTED_MODULE_13__["UpdateComponent"]
    },
    {
        path: 'UpdateTicket/:id',
        component: _update_update_component__WEBPACK_IMPORTED_MODULE_13__["UpdateComponent"]
    },
    {
        path: 'ProxyUser',
        component: _proxyuser_proxyuser_component__WEBPACK_IMPORTED_MODULE_10__["ProxyuserComponent"],
        canActivate: [_shared_guard_auth_guard__WEBPACK_IMPORTED_MODULE_21__["AuthGuard"]]
    },
    {
        path: 'AllReport',
        component: _reports_reports_component__WEBPACK_IMPORTED_MODULE_11__["ReportsComponent"]
    },
    {
        path: 'VisaValidities',
        component: _visa_validities_visa_validities_component__WEBPACK_IMPORTED_MODULE_19__["VisaValiditiesComponent"]
    },
    {
        path: 'viewticket',
        component: _view_ticket_view_ticket_component__WEBPACK_IMPORTED_MODULE_15__["ViewTicketComponent"]
    },
    {
        path: 'viewticketdetails/:id',
        component: _view_ticket_details_view_ticket_details_component__WEBPACK_IMPORTED_MODULE_14__["ViewTicketDetailsComponent"]
    },
    {
        path: 'feedbackrestriction',
        component: _feedback_restriction_feedback_restriction_component__WEBPACK_IMPORTED_MODULE_6__["FeedbackRestrictionComponent"]
    },
    {
        path: 'officerlocation',
        component: _visa_officer_location_visa_officer_location_component__WEBPACK_IMPORTED_MODULE_17__["VisaOfficerLocationComponent"]
    },
    {
        path: 'visaprocess',
        component: _visa_process_visa_process_component__WEBPACK_IMPORTED_MODULE_18__["VisaProcessComponent"]
    },
    {
        path: 'city',
        component: _city_city_component__WEBPACK_IMPORTED_MODULE_4__["CityComponent"]
    },
    {
        path: 'country',
        component: _manage_country_manage_country_component__WEBPACK_IMPORTED_MODULE_20__["ManageCountryComponent"]
    },
];
var AppRoutingModule = /** @class */ (function () {
    function AppRoutingModule() {
    }
    AppRoutingModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forRoot(routes)],
            exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
        })
    ], AppRoutingModule);
    return AppRoutingModule;
}());



/***/ }),

/***/ "./src/app/app.component.css":
/*!***********************************!*\
  !*** ./src/app/app.component.css ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "sup {\r\n    color: red;\r\n    font-size: 100%;\r\n}\r\n\r\n.scrollmenu {\r\n    overflow: auto;\r\n    white-space: nowrap;\r\n    max-height: 80px;\r\n}\r\n\r\n.arrow {\r\n    background: #ced4da;\r\n    color: #027bff;\r\n    border-radius: 50%;\r\n    padding: 3px 12px 6px 10px;\r\n    font-size: 22px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxVQUFVO0lBQ1YsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGNBQWM7SUFDZCxtQkFBbUI7SUFDbkIsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsMEJBQTBCO0lBQzFCLGVBQWU7QUFDbkIiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInN1cCB7XHJcbiAgICBjb2xvcjogcmVkO1xyXG4gICAgZm9udC1zaXplOiAxMDAlO1xyXG59XHJcblxyXG4uc2Nyb2xsbWVudSB7XHJcbiAgICBvdmVyZmxvdzogYXV0bztcclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICBtYXgtaGVpZ2h0OiA4MHB4O1xyXG59XHJcblxyXG4uYXJyb3cge1xyXG4gICAgYmFja2dyb3VuZDogI2NlZDRkYTtcclxuICAgIGNvbG9yOiAjMDI3YmZmO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgcGFkZGluZzogM3B4IDEycHggNnB4IDEwcHg7XHJcbiAgICBmb250LXNpemU6IDIycHg7XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/app.component.html":
/*!************************************!*\
  !*** ./src/app/app.component.html ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nav class=\"navbar navbar-expand-md\" style=\"display: inline;\">\r\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n  <div class=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\r\n    <ul class=\"navbar-nav scrollmenu\" #sm>\r\n      <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\">\r\n        <a class=\"nav-link\" [routerLink]=\"['/']\">MY TRAVEL REQUEST</a>\r\n      </li>\r\n      <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\">\r\n        <a class=\"nav-link\" [routerLink]=\"['/MyApproval']\">MY APPROVAL REQUEST</a>\r\n      </li>\r\n      <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\">\r\n        <a class=\"nav-link\" [routerLink]=\"['/NewTravelRequest']\">NEW TRAVEL REQUEST</a>\r\n      </li>\r\n\r\n      <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\">\r\n        <a class=\"nav-link\" [routerLink]=\"['/MyProfile']\">MY PROFILE</a>\r\n      </li>\r\n      <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\">\r\n        <a class=\"nav-link\" [routerLink]=\"['/Dependends']\">DEPENDENTS</a>\r\n      </li>\r\n      <!-- {{inform.UserType}} -->\r\n      <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\"\r\n        *ngIf=\"inform.UserType === 'Admin' || inform.UserType === 'Travel Desk'\">\r\n        <a class=\"nav-link\" [routerLink]=\"['/UpdateTicket']\">UPDATE TICKET</a>\r\n      </li>\r\n\r\n      <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\"\r\n      *ngIf=\"inform.UserType === 'Finance Team' || inform.isFinanceUserType\">\r\n      <a class=\"nav-link\" [routerLink]=\"['/viewticket']\">VIEW TICKET</a>\r\n    </li>\r\n\r\n    \r\n    <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\">\r\n      <a class=\"nav-link\" [routerLink]=\"['/visaprocess']\">VISA PROCESS</a>\r\n  </li>\r\n\r\n  <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\"\r\n  *ngIf=\"inform.UserType === 'Super Admin' || inform.IsSuperAdminUserType\">\r\n    <a class=\"nav-link\" [routerLink]=\"['/officerlocation']\">VISA OFFICER MAPPING</a>\r\n  </li>\r\n\r\n      <!-- <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\"\r\n        *ngIf=\"inform.UserType === 'Admin' || inform.isFinanceUserType\">\r\n        <a class=\"nav-link\" [routerLink]=\"['/feedbackrestriction']\">FEEDBACK RESTRICTION</a>\r\n      </li> -->\r\n\r\n      <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\"\r\n      *ngIf=\"inform.UserType === 'Super Admin' || inform.IsSuperAdminUserType\">\r\n        <a class=\"nav-link\" [routerLink]=\"['/city']\">CITY</a>\r\n      </li>\r\n\r\n      <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\"\r\n      *ngIf=\"inform.isAdmin\">\r\n        <a class=\"nav-link\" [routerLink]=\"['/ProxyUser']\">PROXY USER</a>\r\n      </li>\r\n      <!-- <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\">\r\n        <a class=\"nav-link\" [routerLink]=\"['/AllReport']\">REPORT</a>\r\n      </li> -->\r\n      <li class=\"nav-item\" [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{ exact: true }\">\r\n        <a class=\"nav-link\" target=\"new\"\r\n          href=\"https://mavericsystems.sharepoint.com/:w:/r/sites/app_data_center/_layouts/15/Doc.aspx?sourcedoc=%7BCFE59705-7924-4EFF-8149-CCB211B6CBA9%7D&file=TravelModule_Help_Document_v3.docx&action=default&mobileredirect=true\">HELP</a>\r\n      </li>\r\n    </ul>\r\n    <span class=\"arrow\"  *ngIf=\"checkOverflow(sm)\">&nbsp;></span>\r\n  </div>\r\n</nav>\r\n<router-outlet></router-outlet>"

/***/ }),

/***/ "./src/app/app.component.ts":
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/*! exports provided: AppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function() { return AppComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");






var AppComponent = /** @class */ (function () {
    function AppComponent(formBuilder, inform, router, toaster) {
        this.formBuilder = formBuilder;
        this.inform = inform;
        this.router = router;
        this.toaster = toaster;
        this.submitted = false;
        this.Current = {};
        this.GetTravelProfile = [];
    }
    AppComponent.prototype.ngOnInit = function () {
        this.Current = this.inform.Current;
    };
    AppComponent.prototype.checkOverflow = function (element) {
        if (element.offsetHeight < element.scrollHeight ||
            element.offsetWidth < element.scrollWidth) {
            return true;
        }
        else {
            return false;
        }
    };
    AppComponent.prototype.onReset = function () {
        this.submitted = false;
        this.registerForm.reset();
    };
    AppComponent.prototype.goToCreate = function () {
        this.router.navigate(['/NewTravelRequest', "ThirdParty"]);
    };
    AppComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-root',
            template: __webpack_require__(/*! ./app.component.html */ "./src/app/app.component.html"),
            styles: [__webpack_require__(/*! ./app.component.css */ "./src/app/app.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"],
            _shared_info_service__WEBPACK_IMPORTED_MODULE_3__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_5__["ToastrManager"]])
    ], AppComponent);
    return AppComponent;
}());



/***/ }),

/***/ "./src/app/app.module.ts":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! exports provided: AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./app-routing.module */ "./src/app/app-routing.module.ts");
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./app.component */ "./src/app/app.component.ts");
/* harmony import */ var ngx_bootstrap_accordion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-bootstrap/accordion */ "./node_modules/ngx-bootstrap/accordion/fesm5/ngx-bootstrap-accordion.js");
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm5/animations.js");
/* harmony import */ var ngx_bootstrap_typeahead__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ngx-bootstrap/typeahead */ "./node_modules/ngx-bootstrap/typeahead/fesm5/ngx-bootstrap-typeahead.js");
/* harmony import */ var ngx_bootstrap_datepicker__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ngx-bootstrap/datepicker */ "./node_modules/ngx-bootstrap/datepicker/fesm5/ngx-bootstrap-datepicker.js");
/* harmony import */ var _shared_shared_module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./shared/shared.module */ "./src/app/shared/shared.module.ts");
/* harmony import */ var _dependends_dependends_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dependends/dependends.component */ "./src/app/dependends/dependends.component.ts");
/* harmony import */ var angular_datatables__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! angular-datatables */ "./node_modules/angular-datatables/index.js");
/* harmony import */ var ngx_bootstrap_tooltip__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ngx-bootstrap/tooltip */ "./node_modules/ngx-bootstrap/tooltip/fesm5/ngx-bootstrap-tooltip.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm5/ngx-bootstrap-modal.js");
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");
/* harmony import */ var _status_pipe__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./status.pipe */ "./src/app/status.pipe.ts");
/* harmony import */ var ngx_chips__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ngx-chips */ "./node_modules/ngx-chips/fesm5/ngx-chips.js");
/* harmony import */ var _city_city_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./city/city.component */ "./src/app/city/city.component.ts");
/* harmony import */ var _newtravel_request_newtravel_request_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./newtravel-request/newtravel-request.component */ "./src/app/newtravel-request/newtravel-request.component.ts");
/* harmony import */ var _edit_travel_edit_travel_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./edit-travel/edit-travel.component */ "./src/app/edit-travel/edit-travel.component.ts");
/* harmony import */ var _feedback_restriction_feedback_restriction_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./feedback-restriction/feedback-restriction.component */ "./src/app/feedback-restriction/feedback-restriction.component.ts");
/* harmony import */ var _myapproval_myapproval_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./myapproval/myapproval.component */ "./src/app/myapproval/myapproval.component.ts");
/* harmony import */ var _myprofile_myprofile_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./myprofile/myprofile.component */ "./src/app/myprofile/myprofile.component.ts");
/* harmony import */ var _proxyuser_proxyuser_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./proxyuser/proxyuser.component */ "./src/app/proxyuser/proxyuser.component.ts");
/* harmony import */ var _reports_reports_component__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./reports/reports.component */ "./src/app/reports/reports.component.ts");
/* harmony import */ var _travel_request_travel_request_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./travel-request/travel-request.component */ "./src/app/travel-request/travel-request.component.ts");
/* harmony import */ var _update_update_component__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./update/update.component */ "./src/app/update/update.component.ts");
/* harmony import */ var _view_ticket_details_view_ticket_details_component__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./view-ticket-details/view-ticket-details.component */ "./src/app/view-ticket-details/view-ticket-details.component.ts");
/* harmony import */ var _view_ticket_view_ticket_component__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./view-ticket/view-ticket.component */ "./src/app/view-ticket/view-ticket.component.ts");
/* harmony import */ var _view_travel_request_view_travel_request_component__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./view-travel-request/view-travel-request.component */ "./src/app/view-travel-request/view-travel-request.component.ts");
/* harmony import */ var _visa_officer_location_visa_officer_location_component__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./visa-officer-location/visa-officer-location.component */ "./src/app/visa-officer-location/visa-officer-location.component.ts");
/* harmony import */ var _visa_process_visa_process_component__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./visa-process/visa-process.component */ "./src/app/visa-process/visa-process.component.ts");
/* harmony import */ var _visa_validities_visa_validities_component__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./visa-validities/visa-validities.component */ "./src/app/visa-validities/visa-validities.component.ts");
/* harmony import */ var _manage_country_manage_country_component__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./manage-country/manage-country.component */ "./src/app/manage-country/manage-country.component.ts");
/* harmony import */ var _shared_guard_auth_guard__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./shared/guard/auth.guard */ "./src/app/shared/guard/auth.guard.ts");




































var AppModule = /** @class */ (function () {
    function AppModule() {
    }
    AppModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
            declarations: [
                _app_component__WEBPACK_IMPORTED_MODULE_5__["AppComponent"],
                _newtravel_request_newtravel_request_component__WEBPACK_IMPORTED_MODULE_19__["NewtravelRequestComponent"],
                _travel_request_travel_request_component__WEBPACK_IMPORTED_MODULE_26__["TravelRequestComponent"],
                _myprofile_myprofile_component__WEBPACK_IMPORTED_MODULE_23__["MyprofileComponent"],
                _dependends_dependends_component__WEBPACK_IMPORTED_MODULE_11__["DependendsComponent"],
                _view_travel_request_view_travel_request_component__WEBPACK_IMPORTED_MODULE_30__["ViewTravelRequestComponent"],
                _update_update_component__WEBPACK_IMPORTED_MODULE_27__["UpdateComponent"],
                _status_pipe__WEBPACK_IMPORTED_MODULE_16__["StatusPipe"],
                _edit_travel_edit_travel_component__WEBPACK_IMPORTED_MODULE_20__["EditTravelComponent"],
                _proxyuser_proxyuser_component__WEBPACK_IMPORTED_MODULE_24__["ProxyuserComponent"],
                _myapproval_myapproval_component__WEBPACK_IMPORTED_MODULE_22__["MyapprovalComponent"],
                _reports_reports_component__WEBPACK_IMPORTED_MODULE_25__["ReportsComponent"],
                _visa_validities_visa_validities_component__WEBPACK_IMPORTED_MODULE_33__["VisaValiditiesComponent"],
                _view_ticket_view_ticket_component__WEBPACK_IMPORTED_MODULE_29__["ViewTicketComponent"],
                _view_ticket_details_view_ticket_details_component__WEBPACK_IMPORTED_MODULE_28__["ViewTicketDetailsComponent"],
                _feedback_restriction_feedback_restriction_component__WEBPACK_IMPORTED_MODULE_21__["FeedbackRestrictionComponent"],
                _visa_officer_location_visa_officer_location_component__WEBPACK_IMPORTED_MODULE_31__["VisaOfficerLocationComponent"],
                _visa_process_visa_process_component__WEBPACK_IMPORTED_MODULE_32__["VisaProcessComponent"],
                _city_city_component__WEBPACK_IMPORTED_MODULE_18__["CityComponent"],
                _manage_country_manage_country_component__WEBPACK_IMPORTED_MODULE_34__["ManageCountryComponent"]
            ],
            imports: [
                _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"],
                _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_7__["BrowserAnimationsModule"],
                _app_routing_module__WEBPACK_IMPORTED_MODULE_4__["AppRoutingModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                ngx_bootstrap_accordion__WEBPACK_IMPORTED_MODULE_6__["AccordionModule"].forRoot(),
                ngx_bootstrap_typeahead__WEBPACK_IMPORTED_MODULE_8__["TypeaheadModule"].forRoot(),
                ngx_bootstrap_datepicker__WEBPACK_IMPORTED_MODULE_9__["BsDatepickerModule"].forRoot(),
                ngx_bootstrap_tooltip__WEBPACK_IMPORTED_MODULE_13__["TooltipModule"].forRoot(),
                _shared_shared_module__WEBPACK_IMPORTED_MODULE_10__["SharedModule"],
                angular_datatables__WEBPACK_IMPORTED_MODULE_12__["DataTablesModule"],
                ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_14__["ModalModule"].forRoot(),
                ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_15__["ToastrModule"].forRoot(),
                ngx_chips__WEBPACK_IMPORTED_MODULE_17__["TagInputModule"]
            ],
            providers: [_shared_guard_auth_guard__WEBPACK_IMPORTED_MODULE_35__["AuthGuard"]],
            bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_5__["AppComponent"]]
        })
    ], AppModule);
    return AppModule;
}());



/***/ }),

/***/ "./src/app/city/city.component.css":
/*!*****************************************!*\
  !*** ./src/app/city/city.component.css ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".red {\n    background-color: red;\n}\n\n.green {\n    background-color: green;\n}\n\n.white-text {\n    color: white;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY2l0eS9jaXR5LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSx1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvY2l0eS9jaXR5LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucmVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XG59XG5cbi5ncmVlbiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XG59XG5cbi53aGl0ZS10ZXh0IHtcbiAgICBjb2xvcjogd2hpdGU7XG59Il19 */"

/***/ }),

/***/ "./src/app/city/city.component.html":
/*!******************************************!*\
  !*** ./src/app/city/city.component.html ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\n  <h4 class=\"card-header\">City</h4>\n  <div class=\"row\">\n    <div class=\"col-md-5 mt-3 mb-3\"></div>\n    <div class=\"col-md-2 mt-3 mb-3\">\n      <button class=\"btn btn-primary px-4\" type=\"button\" (click)=\"openPopUp(cityPopup)\">Add City</button>\n    </div>\n    <div class=\"col-md-2 mt-3 mb-3\">\n      <button class=\"btn btn-primary px-4\" type=\"button\" [routerLink]=\"['/country']\">Manage Country</button>\n    </div>\n    <div class=\"col-md-2 mt-3 mb-3 ml-5\">\n      <input type=\"text\" autocomplete=\"off\" class=\"form-control\" name=\"searchKey\" [(ngModel)]=\"searchKey\"\n        placeholder=\"Search\" (ngModelChange)=\"searchKeyChanged()\" />\n    </div>\n  </div>\n  <div class=\"card-body\">\n    <div class=\"mt-5\" *ngIf=\"sourceData.length == 0\">\n      <h5 class=\"text-center mt-5\">No data available</h5>\n    </div>\n    <div class=\"\" *ngIf=\"sourceData.length > 0\">\n      <table id=\"table1\" datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\n        <thead>\n          <tr>\n            <th> S.No. </th>\n            <!-- <th> City code </th> -->\n            <th> City </th>\n            <th> Country </th>\n            <th> Region </th>\n            <th class=\"text-center\"> Action </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let x of filteredData;let i=index\">\n            <td>{{i+1}}</td>\n            <!-- <td>{{x.city_code}}</td> -->\n            <td>{{x.location}}</td>\n            <td>{{x.country}}</td>\n            <td>{{x.region}}</td>\n            <td class=\"text-center\">\n              <span class=\"pl-2\" *ngIf=\"x.is_active\">\n                <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\n                  (click)=\"edit(x,cityPopup)\">Edit</button>\n              </span>\n              <span class=\"pl-2\">\n                <button id=\"btnCancel\" type=\"button\" [innerText]=\"x.is_active?'Deactivate':'Activate'\"\n                  [ngClass]=\"x.is_active?'red':'green'\" class=\"btn px-4 white-text\"\n                  (click)=\"removeConfirmation(x, confirmationPopup)\"></button>\n              </span>\n            </td>\n\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n\n<ng-template #cityPopup>\n  <div class=\"modal-header popup\">\n    <h5 class=\"modal-title text-center\">Add/Edit City</h5>\n  </div>\n  <div class=\"modal-body\">\n    <form #a=\"ngForm\">\n      <!-- <div class=\"col-md-12 form-group\">\n        <label>City code</label>\n        <sup>\n          <span>*</span>\n        </sup>\n      </div> -->\n      <!-- <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\n            style=\"text-transform: capitalize\" name=\"cityCode\" [(ngModel)]=\"city.cityCode\" placeholder=\"City code\"\n            #cityCode=\"ngModel\" [ngClass]=\"{ 'is-invalid': (a.submitted || cityCode.touched) && cityCode.invalid }\"\n            required />\n          <div *ngIf=\"(a.submitted || cityCode.touched) && cityCode.invalid\" class=\"invalid-feedback\">\n            <div *ngIf=\"cityCode.errors['required']\">City code is required</div>\n          </div>\n        </div>\n      </div> -->\n      <div class=\"col-md-12 form-group\">\n        <label>City Name</label>\n        <sup>\n          <span>*</span>\n        </sup>\n      </div>\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\n            style=\"text-transform: capitalize\" name=\"cityName\" [(ngModel)]=\"city.cityName\" placeholder=\"City name\"\n            #cityName=\"ngModel\" [ngClass]=\"{ 'is-invalid': (a.submitted || cityName.touched) && cityName.invalid }\"\n            required />\n          <div *ngIf=\"(a.submitted || cityName.touched) && cityName.invalid\" class=\"invalid-feedback\">\n            <div *ngIf=\"cityName.errors['required']\">City name is required</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-12 form-group\">\n        <label for=\"officer\">Country</label>\n        <sup>\n          <span>*</span>\n        </sup>\n      </div>\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <input autocomple=\"off\" [(ngModel)]=\"city.country\" autocomplete=\"off\" name=\"country\" [typeahead]=\"countryList\"\n          #officer=\"ngModel\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"Country\"\n          placeholder=\"Choose country\" class=\"form-control\"\n          [ngClass]=\"{ 'is-invalid': (a.submitted || country.touched) && country.invalid }\" required>\n          <div *ngIf=\"(a.submitted || country.touched) && country.invalid\" class=\"invalid-feedback\">\n            <div *ngIf=\"country.errors['required']\">Country is required</div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row text-center request\">\n        <button id=\"btnsub\" type=\"submit\" class=\"btn btn-primary px-3\" \n          (click)=\"submit(a)\" [innerText]=\"city.ID ? 'Update':'Submit'\" [disabled]=\"a.invalid\" ></button>\n        <button id=\"btnClear\" type=\"submit\" class=\"btn btn-danger px-4\" (click)=\"cancel()\">Cancel</button>\n      </div>\n    </form>\n  </div>\n</ng-template>\n\n<ng-template #confirmationPopup>\n  <div class=\"modal-body confirm\">\n    <h5 class=\"modal-title text-center\">Are you sure you want to <span\n        [innerText]=\"deletingItem.is_active ? 'deactivate':'activate'\"></span>?</h5>\n    <div class=\"row pt-3\">\n      <div class=\"col-md-5\"> </div>\n      <div class=\"col-md-1\">\n        <button type=\"submit\" class=\"btn btn-primary px-4\" (click)=\"remove()\">Yes</button>\n      </div>\n      <div class=\"col-md-1\">\n        <button type=\"button\" class=\"btn btn-danger px-4\" (click)=\"denyRemoval()\">No</button>\n      </div>\n    </div>\n  </div>\n</ng-template>"

/***/ }),

/***/ "./src/app/city/city.component.ts":
/*!****************************************!*\
  !*** ./src/app/city/city.component.ts ***!
  \****************************************/
/*! exports provided: CityComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CityComponent", function() { return CityComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm5/ngx-bootstrap-modal.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");







var CityComponent = /** @class */ (function () {
    function CityComponent(infoService, router, toaster, modalService) {
        this.infoService = infoService;
        this.router = router;
        this.toaster = toaster;
        this.modalService = modalService;
        this.dtOptions = {};
        this.sourceData = [];
        this.filteredData = [];
        this.searchKey = '';
        this.config = {
            backdrop: true,
            class: "modal-xl",
            ignoreBackdropClick: true,
        };
        this.mappingData = {};
        this.city = {};
        this.country = {};
    }
    CityComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dtOptions = {
            pagingType: 'full_numbers',
            pageLength: 10,
            paging: false,
            searching: false,
            info: false,
            ordering: false
        };
        this.infoService.GetCurrentUser(function () {
            _this.infoService.GetTravelProfileDetails().then(function (response) {
                if (!(response && response.length > 0)) {
                    _this.router.navigate(['/MyProfile']);
                    _this.toaster.successToastr('Please update your profile');
                }
            });
            _this.getCountries();
            _this.getData();
        });
    };
    CityComponent.prototype.getCountries = function () {
        var _this = this;
        this.infoService.getCountry().then(function (res) {
            _this.countryList = res;
        });
    };
    CityComponent.prototype.getData = function () {
        var _this = this;
        this.infoService.GetAllLocations().then(function (result) {
            if (result && result.length > 0) {
                _this.sourceData = result;
                _this.filteredData = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["cloneDeep"])(_this.sourceData);
            }
        });
    };
    CityComponent.prototype.filterKeyChanged = function () {
        this.searchKey = '';
    };
    CityComponent.prototype.searchKeyChanged = function () {
        var _this = this;
        if (this.searchKey && this.searchKey.trim().length > 0) {
            this.filteredData = this.filteredData.filter(function (s) {
                return (s.city_code && (s.city_code.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.location && (s.location.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.country && (s.country.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.region && (s.region.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0));
            });
        }
        else {
            this.filteredData = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["cloneDeep"])(this.sourceData);
        }
    };
    CityComponent.prototype.openPopUp = function (templatePopup) {
        this.bsModalRef = this.modalService.show(templatePopup, this.config);
    };
    CityComponent.prototype.submit = function (form) {
        var _this = this;
        var isExist = this.sourceData.find(function (item) { return item.location == _this.city.cityName && item.ID == _this.city.ID && item.city_code == _this.city.cityCode && item.country == _this.city.country; });
        if (isExist) {
            this.toaster.errorToastr("Already exist");
            return;
        }
        if (form.valid) {
            if (this.city.ID) {
                var payload = {
                    city_code: this.city.cityCode,
                    location: this.city.cityName,
                    country_id: this.countryList.find(function (item) { return item.Country === _this.city.country; }).ID,
                    country: this.city.country,
                    region: this.countryList.find(function (item) { return item.Country === _this.city.country; }).Region,
                    region_id: this.countryList.find(function (item) { return item.Country === _this.city.country; }).RegionId,
                };
                this.infoService
                    .updateCity(payload, this.city.ID)
                    .then(function () {
                    _this.getData();
                    _this.cancel();
                    _this.toaster.successToastr('Updated successfully');
                });
            }
            else {
                var payload = {
                    city_code: this.city.cityCode,
                    location: this.city.cityName,
                    country_id: this.countryList.find(function (item) { return item.Country === _this.city.country; }).ID,
                    country: this.city.country,
                    region: this.countryList.find(function (item) { return item.Country === _this.city.country; }).Region,
                    region_id: this.countryList.find(function (item) { return item.Country === _this.city.country; }).RegionId,
                    is_active: true,
                };
                this.infoService
                    .InsertLocation(payload)
                    .then(function (res) {
                    _this.getData();
                    _this.cancel();
                    _this.toaster.successToastr('Added successfully');
                });
            }
        }
    };
    ;
    CityComponent.prototype.cancel = function () {
        this.city = {};
        this.country = {};
        this.bsModalRef.hide();
    };
    CityComponent.prototype.edit = function (item, MapOfficerPopup) {
        this.city.ID = item.ID;
        this.city.cityName = item.location,
            this.city.cityCode = item.city_code,
            this.city.country_id = item.country_id,
            this.city.country = item.country,
            this.city.region = item.region,
            this.city.is_active = item.is_active,
            this.bsModalRef = this.modalService.show(MapOfficerPopup, this.config);
    };
    CityComponent.prototype.removeConfirmation = function (item, confirmTemplate) {
        var _this = this;
        if (!item.is_active) {
            this.infoService.GetCountryById(item.country_id).then(function (result) {
                if (!result.IsActive) {
                    _this.toaster.errorToastr("Please activate it's country (" + item.country + ")");
                }
                else {
                    _this.bsModalRef = _this.modalService.show(confirmTemplate, _this.config);
                    _this.deletingItem = item;
                }
            });
        }
        else {
            this.bsModalRef = this.modalService.show(confirmTemplate, this.config);
            this.deletingItem = item;
        }
    };
    CityComponent.prototype.remove = function () {
        var _this = this;
        var payload = {
            is_active: !this.deletingItem.is_active
        };
        this.infoService.updateCity(payload, this.deletingItem.ID).then(function () {
            _this.getData();
            _this.denyRemoval();
            _this.deletingItem.is_active ? _this.toaster.successToastr('Deactivated successfully') : _this.toaster.successToastr('Activated successfully');
        });
    };
    CityComponent.prototype.denyRemoval = function () {
        this.bsModalRef.hide();
        this.id = null;
    };
    CityComponent.prototype.submitCountry = function (form) {
        var _this = this;
        var isExist = this.countryList.find(function (item) { return item.Country == _this.country.countryName; });
        if (isExist) {
            this.toaster.errorToastr("Already exist");
            return;
        }
        if (form.valid) {
            var payload = {
                Country: this.country.countryName,
                Region: this.country.region,
            };
            this.infoService
                .InsertCountry(payload)
                .then(function (res) {
                _this.getCountries();
                _this.cancel();
                _this.toaster.successToastr('Added successfully');
            });
        }
    };
    ;
    CityComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-city',
            template: __webpack_require__(/*! ./city.component.html */ "./src/app/city/city.component.html"),
            styles: [__webpack_require__(/*! ./city.component.css */ "./src/app/city/city.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_6__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__["ToastrManager"],
            ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_5__["BsModalService"]])
    ], CityComponent);
    return CityComponent;
}());



/***/ }),

/***/ "./src/app/dependends/dependends.component.css":
/*!*****************************************************!*\
  !*** ./src/app/dependends/dependends.component.css ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "sup {\r\n    color: red;\r\n    font-size: 100%;\r\n}\r\n/* input::-webkit-input-placeholder {\r\n    text-transform: capitalize;\r\n } */\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVwZW5kZW5kcy9kZXBlbmRlbmRzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxVQUFVO0lBQ1YsZUFBZTtBQUNuQjtBQUNBOztJQUVJIiwiZmlsZSI6InNyYy9hcHAvZGVwZW5kZW5kcy9kZXBlbmRlbmRzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJzdXAge1xyXG4gICAgY29sb3I6IHJlZDtcclxuICAgIGZvbnQtc2l6ZTogMTAwJTtcclxufVxyXG4vKiBpbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcclxuIH0gKi8iXX0= */"

/***/ }),

/***/ "./src/app/dependends/dependends.component.html":
/*!******************************************************!*\
  !*** ./src/app/dependends/dependends.component.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n  <h4 class=\"card-header\">Dependents </h4>\r\n  <div class=\"text-center mt-3\">\r\n    <button class=\"btn btn-primary px-4\" type=\"button\" (click)=\"AddDependends(templateDependend)\">Add</button>\r\n  </div>\r\n  <div class=\"card-body\">\r\n    <div class=\"mt-5\" *ngIf=\"datatable == true && dependentsArray && dependentsArray.length == 0\">\r\n      <h5 class=\"text-center mt-5\">No data available</h5>\r\n    </div>\r\n    <div class=\"\" *ngIf=\"datatable == false && dependentsArray && dependentsArray.length > 0\">\r\n      <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th> Given Name</th>\r\n            <th> Surname </th>\r\n            <th> Passport No </th>\r\n            <th> DOB (as in passport) </th>\r\n            <th> Passport Expiry Date</th>\r\n            <th> Relationship </th>\r\n            <th> Gender </th>\r\n            <th class=\"text-center\"> Action </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let i = index ; let x of dependentsArray\">\r\n            <td>{{x.GivenName}}</td>\r\n            <td>{{x.SurName}}</td>\r\n            <td>{{x.PassportNo}}</td>\r\n            <td>{{x.DOBPassport | date: 'dd-MMM-yyyy'}}</td>\r\n            <td>{{x.PassportExpiryDate | date: 'dd-MMM-yyyy'}}</td>\r\n            <td>{{x.Relationship }}</td>\r\n            <td>{{x.Gender}}</td>\r\n            <td class=\"text-center\">\r\n              <span>\r\n                <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                  (click)=\"Edit(x,templateDependend)\">Edit</button>\r\n              </span>\r\n              <span>\r\n                <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                  (click)=\"Delete(x,confirmTemplate)\">Delete</button>\r\n              </span>\r\n              <!-- <i class=\"fa fa-pencil font-2xl mr-2\" (click)=\"Edit(x,templateDependend)\"></i>\r\n              <i class=\"fa fa-trash font-2xl ml-2\" (click)=\"Delete(x,confirmTemplate)\"></i> -->\r\n            </td>\r\n\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #templateDependend>\r\n  <!-- <div class=\"modal-header\"> -->\r\n  <div class=\"row\">\r\n    <div class=\"col-md-4\"></div>\r\n    <div class=\"col-md-6 ml-3\" *ngIf=\"!isEdit\">\r\n      <h5 class=\"modal-title\">Dependent</h5>\r\n    </div>\r\n    <div class=\"col-md-1 ml-5\">\r\n      <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"hide()\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n      </button>\r\n    </div>\r\n    <!-- <h5 class=\"modal-title text-center\">Add Dependent</h5> -->\r\n  </div>\r\n  <!-- <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"hide()\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button> -->\r\n  <!-- </div> -->\r\n  <div class=\"modal-body\">\r\n    <form name=\"form\" #f=\"ngForm\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"GivenName\">Given Name</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" pattern=\"[a-zA-Z\\s?]*\" autocomplete=\"off\" class=\"form-control\" name=\"GivenName\"\r\n              [(ngModel)]=\"Dependents.GivenName\" placeholder=\"Given Name\" #GivenName=\"ngModel\"\r\n              [ngClass]=\"{ 'is-invalid': (f.submitted || GivenName.touched) && GivenName.invalid }\" required />\r\n            <div *ngIf=\"(f.submitted || GivenName.touched) && GivenName.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"GivenName.errors['required']\">Given Name is required</div>\r\n              <div *ngIf=\"GivenName.errors['pattern']\">Enter a valid given name</div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"SurName\">Surname</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus pattern=\"[a-zA-Z\\s?]*\" autocomplete=\"off\" class=\"form-control\" name=\"SurName\"\r\n              [(ngModel)]=\"Dependents.SurName\" placeholder=\"Surname\" #SurName=\"ngModel\"\r\n              [ngClass]=\"{ 'is-invalid': (f.submitted || SurName.touched) && SurName.invalid }\" required />\r\n            <div *ngIf=\"(f.submitted || SurName.touched) && SurName.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"SurName.errors['required']\">Surname is required</div>\r\n              <div *ngIf=\"SurName.errors['pattern']\">Enter a valid surname</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"passportNo\">Passport No</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <!-- ^[a-zA-Z0-9]+$ -->\r\n            <!-- ^[A-PR-WY][0-9]{2}\\s?[0-9]{5}[1-9]$ -->\r\n            <input type=\"text\" autocomplete=\"off\" class=\"form-control\" pattern=\"^[a-zA-Z0-9]+$\" maxlength=\"75\"\r\n              name=\"passportNo\" [(ngModel)]=\"Dependents.passportNo\" placeholder=\"Passport No\" #passportNo=\"ngModel\"\r\n              [ngClass]=\"{ 'is-invalid': (f.submitted || passportNo.touched) && passportNo.invalid }\" required />\r\n            <div *ngIf=\"(f.submitted || passportNo.touched) && passportNo.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"passportNo.errors['required']\">Passport No is required</div>\r\n              <div *ngIf=\"passportNo.errors['pattern']\">Enter a valid passport number</div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"expiry\">Passport Expiry Date</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input class=\"form-control\" autocomplete=\"off\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n              bsDatepicker name=\"expiry\" [(ngModel)]=\"Dependents.expiry\" [bsConfig]=\"bsConfig\" #expiry=\"ngModel\"\r\n              [minDate]=\"minDate\" placeholder=\"Passport Expiry Date\"\r\n              [ngClass]=\"{ 'is-invalid': (f.submitted || expiry.touched) && expiry.invalid }\" required>\r\n            <div *ngIf=\"(f.submitted || expiry.touched) && expiry.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"expiry.errors['required']\">Passport Expiry is required</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"dob\">DOB(as in passport)</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" autocomplete=\"off\"\r\n              bsDatepicker name=\"dob\" [(ngModel)]=\"Dependents.dob\" [bsConfig]=\"bsConfig\" #dob=\"ngModel\"\r\n              placeholder=\"Date Of Birth\" [ngClass]=\"{ 'is-invalid': (f.submitted || dob.touched) && dob.invalid }\" required\r\n              [maxDate]=\"minDate\" />\r\n            <div *ngIf=\"(f.submitted || dob.touched) && dob.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"dob.errors['required']\">DOB is required</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"relationship\">Relationship</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <select name=\"relationship\" [(ngModel)]=\"Dependents.relationship\" class=\"form-control\" #relationship=\"ngModel\"\r\n            placeholder=\"Relationship\" [ngClass]=\"{ 'is-invalid': (f.submitted || relationship.touched) && relationship.invalid }\" required>\r\n            <option value=\"Spouse\">Spouse</option>\r\n            <option value=\"Son\">Son</option>\r\n            <option value=\"Daughter\">Daughter</option>\r\n          </select>\r\n          <div *ngIf=\"(f.submitted || relationship.touched) && relationship.invalid\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"relationship.errors['required']\">Relationship is required</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"gender\">Gender</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <select name=\"gender\" [(ngModel)]=\"Dependents.gender\" class=\"form-control\" #gender=\"ngModel\"\r\n            placeholder=\"Gender\" [ngClass]=\"{ 'is-invalid': (f.submitted || gender.touched) && gender.invalid }\" required>\r\n            <option value=\"Male\">Male</option>\r\n            <option value=\"Female\">Female</option>\r\n          </select>\r\n          <div *ngIf=\"(f.submitted || gender.touched) && gender.invalid\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"gender.errors['required']\">Gender is required</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row height pt-3\">\r\n        <div class=\"col-md-4\"> </div>\r\n        <div class=\"col-md-2\">\r\n          <button *ngIf=\"!isEdit\" type=\"submit\" class=\"btn btn-primary px-4\" (click)=\"add(f)\">Submit</button>\r\n          <button *ngIf=\"isEdit\" type=\"submit\" class=\"btn btn-primary px-4\" (click)=\"update(f)\">Update</button>\r\n        </div>\r\n        <div class=\"col-md-2\">\r\n          <button type=\"button\" class=\"btn btn-danger px-4\" (click)=\"canceldepend()\">Cancel</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</ng-template>\r\n<ng-template #confirmTemplate>\r\n  <div class=\"modal-body confirm\">\r\n    <h5 class=\"modal-title text-center\">Delete Dependent?</h5>\r\n    <div class=\"row pt-3\">\r\n      <div class=\"col-md-3\"> </div>\r\n      <div class=\"col-md-3\">\r\n        <button type=\"submit\" class=\"btn btn-primary px-4\" (click)=\"deleteConfirm()\">Yes</button>\r\n      </div>\r\n      <div class=\"col-md-4 pl-2\">\r\n        <button type=\"button\" class=\"btn btn-danger px-4\" (click)=\"canceldepend()\">No</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>"

/***/ }),

/***/ "./src/app/dependends/dependends.component.ts":
/*!****************************************************!*\
  !*** ./src/app/dependends/dependends.component.ts ***!
  \****************************************************/
/*! exports provided: DependendsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DependendsComponent", function() { return DependendsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm5/ngx-bootstrap-modal.js");
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");






var DependendsComponent = /** @class */ (function () {
    function DependendsComponent(infoService, router, modalService, toaster) {
        this.infoService = infoService;
        this.router = router;
        this.modalService = modalService;
        this.toaster = toaster;
        this.Dependents = {};
        this.dtOptions = {};
        this.config = {
            backdrop: true,
            class: "modal-lg",
            ignoreBackdropClick: true,
        };
        this.configs = {
            backdrop: true,
            class: "modal-md",
            ignoreBackdropClick: true,
        };
        this.dependentsArray = [];
        this.GetByIdArray = {};
        this.bsConfig = {
            dateInputFormat: this.infoService.DateFormate,
            adaptivePosition: true,
            showWeekNumbers: false,
        };
        this.isEdit = false;
        this.minDate = new Date();
        this.datatable = false;
        this.ProxyEmail = this.infoService.getLocalStorage("ProxyEmail");
        if (this.ProxyEmail != null || this.ProxyEmail != undefined) {
            this.ProxyName = this.ProxyEmail;
        }
    }
    DependendsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dtOptions = {
            pagingType: "full_numbers",
            pageLength: 10,
            paging: true,
            searching: true,
            info: false,
            ordering: false,
        };
        this.infoService.GetCurrentUser(function () {
            if (_this.ProxyName != null || _this.ProxyName != undefined) {
                _this.infoService
                    .GetDependentsProxy(_this.ProxyName)
                    .then(function (resp) {
                    _this.dependentsArray = resp;
                    if (_this.dependentsArray && _this.dependentsArray.length > 0) {
                        _this.datatable = false;
                        _this.dependentsArray.forEach(function (item) {
                            item.DOBPassport = new Date(item.DOBPassport);
                            item.PassportExpiryDate = new Date(item.PassportExpiryDate);
                        });
                    }
                    else {
                        _this.datatable = true;
                    }
                });
            }
            else {
                _this.GetDependentsList();
            }
        });
    };
    DependendsComponent.prototype.GetDependentsList = function () {
        var _this = this;
        this.infoService.GetDependents().then(function (res) {
            _this.dependentsArray = res;
            if (_this.dependentsArray && _this.dependentsArray.length > 0) {
                _this.datatable = false;
                _this.dependentsArray.forEach(function (item) {
                    item.DOBPassport = new Date(item.DOBPassport);
                    item.PassportExpiryDate = new Date(item.PassportExpiryDate);
                });
            }
            else {
                _this.datatable = true;
            }
        });
    };
    DependendsComponent.prototype.AddDependends = function (templateDependend) {
        this.bsModalRef = this.modalService.show(templateDependend, this.config);
    };
    DependendsComponent.prototype.add = function (form) {
        var _this = this;
        // this.Dependents = {};
        this.isEdit = false;
        if (form.valid) {
            var Obj = {
                Title: "",
                GivenName: this.Dependents.GivenName.toUpperCase(),
                SurName: this.Dependents.SurName.toUpperCase(),
                PassportNo: this.Dependents.passportNo,
                DOBPassport: this.Dependents.dob,
                PassportExpiryDate: this.Dependents.expiry,
                Gender: this.Dependents.gender,
                Relationship: this.Dependents.relationship,
            };
            this.infoService.InsertDependents(Obj).then(function (res) {
                if (res) {
                    _this.toaster.successToastr("Dependent added successfully");
                    _this.ngOnInit();
                    _this.Dependents = {};
                    _this.bsModalRef.hide();
                }
                else {
                    _this.toaster.errorToastr("Dependent added in error");
                }
            });
        }
    };
    DependendsComponent.prototype.update = function (form) {
        var _this = this;
        this.isEdit = true;
        if (form.valid) {
            var Obj = {
                Title: "",
                Id: this.GetByIdArray.Id,
                GivenName: this.Dependents.GivenName.toUpperCase(),
                SurName: this.Dependents.SurName.toUpperCase(),
                PassportNo: this.Dependents.passportNo,
                DOBPassport: this.Dependents.dob,
                PassportExpiryDate: this.Dependents.expiry,
                Gender: this.Dependents.gender,
                Relationship: this.Dependents.relationship,
            };
            this.infoService.UdateDependents(Obj).then(function (res) {
                if (res) {
                    _this.toaster.successToastr("Dependent updated successfully");
                    _this.bsModalRef.hide();
                    _this.isEdit = false;
                    _this.ngOnInit();
                    _this.Dependents = {};
                }
                else {
                    _this.toaster.errorToastr("Dependent updated in error");
                }
            });
        }
    };
    DependendsComponent.prototype.Edit = function (x, templateDependend) {
        var _this = this;
        this.bsModalRef = this.modalService.show(templateDependend, this.config);
        this.isEdit = true;
        var Id = x.Id;
        this.infoService.GetByDependentsId(Id).then(function (res) {
            if (res) {
                _this.GetByIdArray = res;
                _this.Dependents.GivenName = res.GivenName;
                _this.Dependents.SurName = res.SurName;
                _this.Dependents.passportNo = res.PassportNo;
                _this.Dependents.dob = new Date(res.DOBPassport);
                _this.Dependents.expiry = new Date(res.PassportExpiryDate);
                _this.Dependents.relationship = res.Relationship;
                _this.Dependents.gender = res.Gender;
                _this.ngOnInit();
            }
        });
    };
    DependendsComponent.prototype.Delete = function (x, confirmTemplate) {
        this.bsModalRef = this.modalService.show(confirmTemplate, this.configs);
        this.Id = x.Id;
    };
    DependendsComponent.prototype.deleteConfirm = function () {
        var _this = this;
        this.infoService.DeleteDependents(this.Id).then(function (res) {
            if (res) {
                _this.toaster.successToastr("Dependent deleted successfully");
                _this.GetDependentsList();
                _this.ngOnInit();
                _this.Dependents = {};
                _this.bsModalRef.hide();
            }
            else {
                _this.toaster.errorToastr("Dependent deleted in error");
            }
        });
    };
    DependendsComponent.prototype.canceldepend = function () {
        this.ngOnInit();
        this.bsModalRef.hide();
        this.isEdit = false;
        this.Dependents = {};
    };
    DependendsComponent.prototype.hide = function () {
        this.bsModalRef.hide();
        this.isEdit = false;
        this.Dependents = {};
    };
    DependendsComponent.prototype.number = function (event) {
        var charCode = event.which ? event.which : event.keyCode;
        if (charCode <= 126) {
            return false;
        }
        return true;
    };
    DependendsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: "app-dependends",
            template: __webpack_require__(/*! ./dependends.component.html */ "./src/app/dependends/dependends.component.html"),
            styles: [__webpack_require__(/*! ./dependends.component.css */ "./src/app/dependends/dependends.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_3__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_4__["BsModalService"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_5__["ToastrManager"]])
    ], DependendsComponent);
    return DependendsComponent;
}());



/***/ }),

/***/ "./src/app/edit-travel/edit-travel.component.css":
/*!*******************************************************!*\
  !*** ./src/app/edit-travel/edit-travel.component.css ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "sup {\r\n    color: red;\r\n    font-size: 100%;\r\n}\r\n.col-md-2.endtext {\r\n    text-align: end;\r\n    justify-content: end;\r\n}\r\n.displayNone {\r\n    display: none;\r\n    }\r\n.fitWidth {\r\n        width: -webkit-fit-content !important;\r\n        width: -moz-fit-content !important;\r\n        width: fit-content !important;\r\n    }\r\n.displayFlex {\r\n        display: flex;\r\n    }\r\n.width-100 {\r\n    width: 100% !important;\r\n    }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZWRpdC10cmF2ZWwvZWRpdC10cmF2ZWwuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFVBQVU7SUFDVixlQUFlO0FBQ25CO0FBQ0E7SUFDSSxlQUFlO0lBQ2Ysb0JBQW9CO0FBQ3hCO0FBRUE7SUFDSSxhQUFhO0lBQ2I7QUFFQTtRQUNJLHFDQUE2QjtRQUE3QixrQ0FBNkI7UUFBN0IsNkJBQTZCO0lBQ2pDO0FBRUE7UUFDSSxhQUFhO0lBQ2pCO0FBRUo7SUFDSSxzQkFBc0I7SUFDdEIiLCJmaWxlIjoic3JjL2FwcC9lZGl0LXRyYXZlbC9lZGl0LXRyYXZlbC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsic3VwIHtcclxuICAgIGNvbG9yOiByZWQ7XHJcbiAgICBmb250LXNpemU6IDEwMCU7XHJcbn1cclxuLmNvbC1tZC0yLmVuZHRleHQge1xyXG4gICAgdGV4dC1hbGlnbjogZW5kO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBlbmQ7XHJcbn1cclxuXHJcbi5kaXNwbGF5Tm9uZSB7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAuZml0V2lkdGgge1xyXG4gICAgICAgIHdpZHRoOiBmaXQtY29udGVudCAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAuZGlzcGxheUZsZXgge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICB9XHJcblxyXG4ud2lkdGgtMTAwIHtcclxuICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XHJcbiAgICB9Il19 */"

/***/ }),

/***/ "./src/app/edit-travel/edit-travel.component.html":
/*!********************************************************!*\
  !*** ./src/app/edit-travel/edit-travel.component.html ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n  <h4 class=\"card-header\">Travel Request</h4>\r\n  <div class=\"card-body\">\r\n    <div class=\"row\" *ngIf=\"isEdit\">\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"EmployeeID\">Travel Request Id</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"Id\" [(ngModel)]=\"userObj.ID\" placeholder=\"Travel Request Id\"\r\n            readonly />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <form name=\"form\" #f=\"ngForm\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"EmployeeID\">Employee Id</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"EmployeeID\" [(ngModel)]=\"userObj.EmployeeID\"\r\n              placeholder=\"Employee Id\" #EmployeeID=\"ngModel\" readonly required />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"EmployeeName\">Employee Name</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"EmployeeName\" [(ngModel)]=\"userObj.EmployeeName\"\r\n              placeholder=\"Employee Name\" #EmployeeName=\"ngModel\" readonly required />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Department\">Department</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Department\" [(ngModel)]=\"userObj.Department\"\r\n              placeholder=\"Department\" #Department=\"ngModel\" readonly required />\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Designation\">Designation</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Designation\" [(ngModel)]=\"userObj.Designation\"\r\n              placeholder=\"Designation\" #Designation=\"ngModel\" readonly required />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"BusinessUnit\">Business Unit</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"BusinessUnit\" [(ngModel)]=\"userObj.BusinessUnit\"\r\n              placeholder=\"Business Unit\" #BusinessUnit=\"ngModel\" readonly />\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"DeliveryUnit\">Delivery Unit</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"DeliveryUnit\" [(ngModel)]=\"userObj.DeliveryUnit\"\r\n              placeholder=\"Delivery Unit\" #DeliveryUnit=\"ngModel\" readonly />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Gender\">Gender</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"Gender\" [(ngModel)]=\"userObj.Gender\" placeholder=\"Age\"\r\n            #Gender=\"ngModel\" readonly required />\r\n\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Age\">Age</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Age\" [(ngModel)]=\"userObj.Age\" placeholder=\"Age\" #Age=\"ngModel\"\r\n              readonly required />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"BaseLocation\">Base Location</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"BaseLocation\" [(ngModel)]=\"userObj.BaseLocation\"\r\n            placeholder=\"Base Location\" readonly required />\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"DOBs\">Date Of Birth</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input class=\"form-control\" autocomplete=\"off\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n              bsDatepicker name=\"DOBs\" [(ngModel)]=\"userObj.DOB\" [bsConfig]=\"bsConfig\" placeholder=\"Date Of Birth\"\r\n              disabled required />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <accordion>\r\n        <accordion-group heading=\"Travel Details\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelType\">Travel For </label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\" *ngIf=\"isEdit\">\r\n              <select name=\"Travel_x005f_x0020_x005f_For\" [(ngModel)]=\"userObj.Travel_x005f_x0020_x005f_For\"\r\n                class=\"form-control\" #Travel_x005f_x0020_x005f_For=\"ngModel\" (change)=\"onChangeTravelFor($event)\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || Travel_x005f_x0020_x005f_For.touched) && Travel_x005f_x0020_x005f_For.invalid }\"\r\n                required>\r\n                <option value=\"Self\">Self</option>\r\n                <option value=\"Self along with Dependents\">Self along with Dependents</option>\r\n                <option value=\"Dependent\">Dependent</option>\r\n              </select>\r\n              <div *ngIf=\"(f.submitted || Travel_x005f_x0020_x005f_For.touched) && Travel_x005f_x0020_x005f_For.invalid\"\r\n                class=\"invalid-feedback\">\r\n                <div *ngIf=\"Travel_x005f_x0020_x005f_For.errors['required']\">Travel For is required</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelType\">Travel Type</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <select name=\"TravelType\" [(ngModel)]=\"userObj.TravelType\" class=\"form-control\" #TravelType=\"ngModel\"\r\n                (change)=\"onChangeTravelType($event)\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TravelType.touched) && TravelType.invalid }\" required>\r\n                <option value=\"International\">International</option>\r\n                <option value=\"Domestic\">Domestic</option>\r\n              </select>\r\n              <div *ngIf=\"(f.submitted || TravelType.touched) && TravelType.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TravelType.errors['required']\">Travel Type is required</div>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"Project\">Project</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input name=\"Project\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.Project\"\r\n                [typeahead]=\"common\" [typeaheadOptionsLimit]=\"15\" [typeaheadMinLength]=\"0\"\r\n                (focusout)=\"focusout($event,'Project')\" typeaheadOptionField=\"ProjectList\"\r\n                (typeaheadOnSelect)=\"onLoadApproval($event)\" (typeaheadNoResults)=\"typeaheadNoResults($event,'Project')\"\r\n                placeholder=\"Project\" #Project=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || Project.touched) && Project.invalid }\" required />\r\n              <div *ngIf=\"(f.submitted || Project.touched) && Project.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"Project.errors['required']\">Project is required</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"Project\">Project Id</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" class=\"form-control\" style=\"text-transform: capitalize\" name=\"projectoraclecode__c\"\r\n                #project_id=\"ngModel\" [(ngModel)]=\"userObj.projectoraclecode__c\" placeholder=\"Project Id\" readonly\r\n                required />\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ApprovalAuthority\">Client Name</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                style=\"text-transform: capitalize\" name=\"clientname__c\" [(ngModel)]=\"userObj.clientname__c\"\r\n                #clientname__c=\"ngModel\" placeholder=\"Client Name\" readonly required />\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ApproversSuperior\">Client Id</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" class=\"form-control\" style=\"text-transform: capitalize\" name=\"clientprismcode__c\"\r\n                #clientprismcode__c=\"ngModel\" [(ngModel)]=\"userObj.clientprismcode__c\" placeholder=\"Client Id\" readonly\r\n                required />\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ApprovalAuthority\">Approval Authority</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                style=\"text-transform: capitalize\" name=\"ApprovalAuthority\" [(ngModel)]=\"userObj.ApprovalAuthority\"\r\n                placeholder=\"Approval Authority\" readonly required />\r\n\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ApproversSuperior\">Approver's Superior</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" class=\"form-control\" style=\"text-transform: capitalize\" name=\"ApproversSuperior\"\r\n                [(ngModel)]=\"userObj.ApproversSuperior\" placeholder=\"Approvers Superior\" readonly required />\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelCategory\">Travel Category</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input name=\"TravelCategory\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.TravelCategory\"\r\n                [typeahead]=\"DeliverySource\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                (focusout)=\"focusout($event,'TravelCategory')\" typeaheadOptionField=\"name\" #TravelCategory=\"ngModel\"\r\n                (typeaheadOnSelect)=\"onTravelCategory($event)\"\r\n                (typeaheadNoResults)=\"typeaheadNoResults($event,'TravelCategory')\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TravelCategory.touched) && TravelCategory.invalid }\"\r\n                placeholder=\"Travel Category\" class=\"form-control\" required\r\n                [disabled]=\"userObj.Travel_x005f_x0020_x005f_For == 'Dependent'\">\r\n              <div *ngIf=\"(f.submitted || TravelCategory.touched) && TravelCategory.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TravelCategory.errors['required']\">Travel Category is required</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"Mobile\">Mobile Number</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" autofocus spellcheck=\"false\" pattern=\"\\+?([0-9]-?\\s?){10,17}$\" autocomplete=\"off\"\r\n                class=\"form-control\" style=\"text-transform: capitalize\" name=\"Mobile\" [(ngModel)]=\"userObj.Mobile\"\r\n                placeholder=\"Mobile Number\" #Mobile=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || Mobile.touched) && Mobile.invalid }\" required />\r\n              <div *ngIf=\"(f.submitted || Mobile.touched) && Mobile.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"Mobile.errors['required']\">Mobile Number is required</div>\r\n                <div *ngIf=\"Mobile.errors['pattern']\">Enter a valid mobile number</div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelPurpose\">Travel Purpose</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input name=\"TravelPurpose\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.TravelPurpose\"\r\n                [typeahead]=\"purposeOfProject\" [typeaheadOptionsLimit]=\"20\" [typeaheadMinLength]=\"0\"\r\n                typeaheadOptionField=\"name\" #TravelPurpose=\"ngModel\" (focusout)=\"focusout($event,'TravelPurpose')\"\r\n                (typeaheadNoResults)=\"typeaheadNoResults($event,'TravelPurpose')\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TravelPurpose.touched) && TravelPurpose.invalid }\"\r\n                placeholder=\"Travel Purpose\" class=\"form-control\" required\r\n                [disabled]=\"userObj.Travel_x005f_x0020_x005f_For == 'Dependent'\">\r\n              <div *ngIf=\"(f.submitted || TravelPurpose.touched) && TravelPurpose.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TravelPurpose.errors['required']\">Travel Purpose is required</div>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelMeal\">Travel Meal</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input class=\"form-control\" autocomplete=\"off\" name=\"TravelMeal\" [(ngModel)]=\"userObj.TravelMeal\"\r\n                [typeahead]=\"informService.Meal\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                (focusout)=\"focusout($event,'TravelMeal')\"\r\n                (typeaheadNoResults)=\"typeaheadNoResults($event,'TravelMeal')\" typeaheadOptionField=\"name\"\r\n                #TravelMeal=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TravelMeal.touched) && TravelMeal.invalid }\"\r\n                placeholder=\"Travel Meal\" class=\"form-control\" required />\r\n              <div *ngIf=\"(f.submitted || TravelMeal.touched) && TravelMeal.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TravelMeal.errors['required']\">Travel Meal is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row mt-2\">\r\n            <!-- <div class=\"col-md-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"ReportingDate\">Reporting Date</label>\r\n                  <sup>\r\n                    <span>*</span>\r\n                  </sup>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-3\">\r\n                <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" autocomplete=\"off\" bsDatepicker\r\n                  name=\"ReportingDate\" [(ngModel)]=\"userObj.ReportingDate\" [bsConfig]=\"bsConfig\" #ReportingDate=\"ngModel\"\r\n                  placeholder=\"Reporting Date\" [ngClass]=\"{ 'is-invalid': (f.submitted || Project.touched) && ReportingDate.invalid }\"\r\n                  [minDate]=\"minDate\" required  required>\r\n                <div *ngIf=\"(f.submitted || Project.touched) && ReportingDate.invalid\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"ReportingDate.errors['required']\">Reporting Date is required</div>\r\n                </div>\r\n              </div> -->\r\n            <!-- <div class=\"col-md-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"Mobile\">Mobile Number</label>\r\n                  <sup>\r\n                    <span>*</span>\r\n                  </sup>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-3\">\r\n                <input type=\"text\" autofocus spellcheck=\"false\" pattern=\"[0-9]+\" autocomplete=\"off\" class=\"form-control\"\r\n                  style=\"text-transform: capitalize\" name=\"Mobile\" [(ngModel)]=\"userObj.Mobile\"\r\n                  placeholder=\"Mobile Number\" #Mobile=\"ngModel\"\r\n                  [ngClass]=\"{ 'is-invalid': (f.submitted || Project.touched) && Mobile.invalid }\"  required />\r\n                <div *ngIf=\"(f.submitted || Project.touched) && Mobile.invalid\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"Mobile.errors['required']\">Mobile Number is required</div>\r\n                </div>\r\n  \r\n              </div> -->\r\n          </div>\r\n\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\" *ngIf=\"isEdit\">\r\n                <label for=\"AccommodationRequired\">Accommodation Required?</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n              <div class=\"form-group\" *ngIf=\"!isEdit\">\r\n                <label for=\"AccommodationRequired\">Accommodation Required?</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\" *ngIf=\"isEdit\">\r\n              <input type=\"radio\" name=\"AccommodationRequired\" [(ngModel)]=\"userObj.AccommodationRequired\" value=\"true\"\r\n                [checked]=\"userObj.AccommodationRequired == 'true'\" #AccommodationRequired=\"ngModel\"\r\n                (change)=\"handleChange($event)\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || AccommodationRequired.touched) && AccommodationRequired.invalid }\"\r\n                required />\r\n              Yes\r\n              <input type=\"radio\" name=\"AccommodationRequired\" [(ngModel)]=\"userObj.AccommodationRequired\" value=\"false\"\r\n                [checked]=\"!userObj.AccommodationRequired == 'false'\" #AccommodationRequired=\"ngModel\"\r\n                (change)=\"handleChange($event)\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || AccommodationRequired.touched) && AccommodationRequired.invalid }\"\r\n                required />\r\n              No\r\n              <div *ngIf=\"(f.submitted || AccommodationRequired.touched) && AccommodationRequired.invalid\"\r\n                class=\"invalid-feedback\">\r\n                <div *ngIf=\"AccommodationRequired.errors['required']\">Accommodation is required</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ClientDebit\">Client Debit?</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"col-md-3\" *ngIf=\"isEdit\">\r\n              <input type=\"radio\" name=\"ClientDebit\" [(ngModel)]=\"userObj.ClientDebit\" value=\"true\"\r\n                [checked]=\"userObj.ClientDebit\" #ClientDebit=\"ngModel\" (ngModelChange)=\"clientDebitChanged()\" \r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || ClientDebit.touched) && ClientDebit.invalid }\" required />\r\n              Yes\r\n              <input type=\"radio\" name=\"ClientDebit\" [(ngModel)]=\"userObj.ClientDebit\" value=\"false\"\r\n                [checked]=\"!userObj.ClientDebit\" #ClientDebit=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || ClientDebit.touched) && ClientDebit.invalid }\" required />\r\n              No\r\n              <div *ngIf=\"(f.submitted || ClientDebit.touched) && ClientDebit.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"ClientDebit.errors['required']\">Client Debit is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row mb-3\" style=\"color: brown;\">\r\n            <div class=\"col-md-6\" *ngIf=\"NoAccomdation || userObj.AccommodationRequired === 'false' || userObj.AccommodationRequired === false\">\r\n              Please be informed that the option chosen would mean that the accommodation would be managed on your own\r\n              and not by Maveric.\r\n            </div>\r\n\r\n            <div class=\"col-md-6\"\r\n              *ngIf=\"userObj.AccommodationRequired === 'true' && userObj.Travel_x005f_x0020_x005f_For !== 'Self'\">\r\n              Accommodation for Dependents is subject to availability. Please raise separate request to\r\n              \"traveldesk@maveric-systems.com\" mail ID to check availability.\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"userObj.ClientDebit=='true'\">\r\n              <div class=\"col-md-6\" *ngIf=\"!((NoAccomdation || userObj.AccommodationRequired === 'false' || userObj.AccommodationRequired === false) || (userObj.AccommodationRequired === 'true' && userObj.Travel_x005f_x0020_x005f_For !== 'Self'))\"></div>\r\n              <div class=\"col-md-6\">\r\n                Please attach the supporting document from Client Debit if available. File size should be less than a MB.\r\n              </div>\r\n            </ng-container>\r\n\r\n          </div>\r\n\r\n          \r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label>Cost Center / Cluster</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                style=\"text-transform: capitalize\" name=\"CostCenterOrCluster\" [(ngModel)]=\"userObj.CostCenterOrCluster\"\r\n                #CostCenterOrCluster=\"ngModel\" placeholder=\"Cost Center / Cluster\" required readonly \r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || CostCenterOrCluster.touched) && CostCenterOrCluster.invalid }\"/>\r\n                <div *ngIf=\"(f.submitted || CostCenterOrCluster.touched) && CostCenterOrCluster.invalid\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"CostCenterOrCluster.errors['required']\">Cost Center Or Cluster is required</div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-3\" *ngIf=\"userObj.ClientDebit=='true'\">\r\n              <label for=\"file\">Upload Client Debit</label>\r\n            </div>\r\n            <div class=\"col-md-3\" *ngIf=\"userObj.ClientDebit=='true'\">\r\n              <div class=\"form-group\">\r\n                <button type=\"btn\" class=\"btn btn-primary px-4\" (click)=\"DebitDocsAddClicked()\">Add</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div class=\"row\" *ngIf=\"userObj.ClientDebit=='true'\">\r\n\r\n            <div class=\"col-md-12\" *ngIf=\"userObject?.clientDebitSrcFiles?.length > 0\">\r\n              <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Files</th>\r\n                    <th>Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let item of userObject.clientDebitSrcFiles; let i = index\">\r\n                    <td (click)=\"download(item.ServerRelativePath.DecodedUrl, item.FileName)\">\r\n                      <a\r\n                      href=\"https://mavericsystems.sharepoint.com/{{item.ServerRelativePath.DecodedUrl}}\">{{item.FileName}}</a>\r\n                        <!-- href=\"https://mavericsystems.sharepoint.com/sites/app_data_center/_layouts/Download.aspx?sourceurl={{item.ServerRelativePath.DecodedUrl}}\">\r\n                        {{item.FileName}} -->\r\n                      <!-- </a> -->\r\n                    </td>\r\n                    <td class=\"form-group\">\r\n                      <button type=\"btn\" class=\"btn btn-danger px-4\"\r\n                      (click)=\"removeUploadedFiles(item.FileName,i)\">Remove</button>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n\r\n              </table>\r\n            </div>\r\n\r\n\r\n            <div class=\"col-md-12\" *ngIf=\"DebitDocs && DebitDocs.length > 0\">\r\n              <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Choose File</th>\r\n                    <th>Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let item of DebitDocs; let i = index\">\r\n                    <td class=\"form-group\">\r\n                      <input type=\"file\" [(ngModel)]=\"item\" name=\"File - {{i}}\" #file title=\"\"\r\n                        placeholder=\"Choose file\" (change)=\"handleDebitDocsInput($event.target.files,i)\">\r\n                      <span *ngIf=\"DebitDocsToUpload[i] && DebitDocsToUpload[i].content.size\">({{DebitDocsToUpload[i].content.size/1000}} Kb)</span>\r\n\r\n                    </td>\r\n                    <td class=\"form-group\">\r\n                      <button type=\"btn\" class=\"btn btn-danger px-4\"\r\n                      (click)=\"DebitDocRemove(i)\">Remove</button>\r\n                      <button type=\"btn\" class=\"btn btn-primary px-4 ml-2\" (click)=\"DebitDocsAddClicked()\" *ngIf=\"i===DebitDocs.length-1\">Add more</button>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row mb-2\">\r\n            <div class=\"col-md-12\" style=\"color: brown;\" *ngIf=\"DependentArrayView && DependentArrayView.length == 0\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\"></div>\r\n                <div class=\"col-md-8\" *ngIf=\"!isEdit && isDependent\">\r\n                  Please add dependent information in dependents tab and proceed further.\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-12\" *ngIf=\"DependentArrayView && DependentArrayView.length > 0\">\r\n              <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered width-100\" *ngIf=\"isDependent\">\r\n                <thead>\r\n                  <tr>\r\n                    <th></th>\r\n                    <th>Given Name</th>\r\n                    <th>Passport Expiry</th>\r\n                    <th>Relationship</th>\r\n                    <th [ngClass]=\"isShow ? '':'displayNone'\">Visa Status <sup>*</sup></th>\r\n                    <th [ngClass]=\"isShow ? '':'displayNone'\">Visa Valid Till </th>\r\n                    <th [ngClass]=\"isShow ? '':'displayNone'\">Visa No </th>\r\n                    <th [ngClass]=\"isShow ? '':'displayNone'\">Type of Visa <sup>*</sup></th>\r\n                    <th>Actions</th>\r\n\r\n                  </tr>\r\n                </thead>\r\n                <tbody *ngIf=\"userObj.Travel_x005f_x0020_x005f_For == 'Self along with Dependents'\">\r\n                  <tr>\r\n                    <td>\r\n                    </td>\r\n                    <td>{{userObj.GivenName}}</td>\r\n                    <td>{{userObj.PassportExpiryDate| date: 'dd-MMM-yyyy'}}</td>\r\n                    <td>Self</td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <input name=\"VisaStatus\" style=\"width: fit-content;\" class=\"form-control\" autocomplete=\"off\"\r\n                        [(ngModel)]=\"userObj.VisaStatus\" [typeahead]=\"informService.VisaStatus\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                        #VisaStatus=\"ngModel\" (focusout)=\"focusout($event,'VisaStatus')\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'VisaStatus')\"\r\n                        (typeaheadOnSelect)=\"visaStatus($event)\" [disabled]=\"!isShow\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || VisaStatus.touched) && VisaStatus.invalid }\"\r\n                        placeholder=\"Visa Status\" class=\"form-control\"\r\n                        [required]=\"TravelType.value === 'International'\" />\r\n                      <div *ngIf=\"(f.submitted || VisaStatus.touched) && VisaStatus.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaStatus.errors['required']\">Visa Status is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <span class=\"displayFlex\">\r\n                        <input class=\"form-control fitWidth\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                          autocomplete=\"off\" bsDatepicker\r\n                          [ngClass]=\"{ 'is-invalid': (f.submitted || VisaValidTill.touched) && VisaValidTill.invalid }\"\r\n                          [minDate]=\"today\" name=\"VisaValidTill\" [(ngModel)]=\"userObj.VisaValidTill\"\r\n                          [bsConfig]=\"bsConfig\" #VisaValidTill=\"ngModel\" placeholder=\"Visa Valid Till\"\r\n                          (ngModelChange)=\"onVisaValidTillChange(userObj)\" [disabled]=\"!isShow || updateEdit || isVisaSubmitted\"\r\n                          [required]=\"(TravelType.value === 'International' && (userObj.VisaStatus === 'Obtained'))\" />\r\n                        <span *ngIf=\"!isVisaSubmitted\"><sup>&nbsp;*</sup></span>\r\n                      </span>\r\n                      <div *ngIf=\"(f.submitted || VisaValidTill.touched) && VisaValidTill.invalid\"\r\n                        style=\"display: block;\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaValidTill.errors['required']\">Visa Valid Till is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <span class=\"displayFlex\">\r\n                        <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control fitWidth\"\r\n                          style=\"text-transform: capitalize\" name=\"VisaNo\" [(ngModel)]=\"userObj.VisaNo\"\r\n                          placeholder=\"Visa No\" #VisaNo=\"ngModel\" [disabled]=\"!isShow || updateEdit || isVisaSubmitted\"\r\n                          [ngClass]=\"{ 'is-invalid': (f.submitted || VisaNo.touched) && VisaNo.invalid }\"\r\n                          [required]=\"(TravelType.value === 'International' && (userObj.VisaStatus === 'Obtained' ))\" />\r\n                        <span *ngIf=\"!isVisaSubmitted\"><sup>&nbsp;*</sup></span>\r\n                      </span>\r\n                      <div *ngIf=\"(f.submitted || VisaNo.touched) && VisaNo.invalid\" style=\"display: block;\"\r\n                        class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaNo.errors['required']\">Visa No is required</div>\r\n                      </div>\r\n\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <input name=\"typevisa\" style=\"width: fit-content;\" class=\"form-control\" autocomplete=\"off\"\r\n                        [(ngModel)]=\"userObj.TypeofVisa\" [typeahead]=\"informService.TypeofVisa\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                        #TypeofVisa=\"ngModel\" placeholder=\"Type of Visa\" #TypeofVisa=\"ngModel\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'TypeofVisa')\" class=\"form-control\"\r\n                        (focusout)=\"focusout($event,'TypeofVisa')\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || TypeofVisa.touched) && TypeofVisa.invalid }\"\r\n                        [disabled]=\"!isShow || updateEdit || userObj.VisaStatus === 'On-arrival' || userObj.VisaStatus === 'Return to home country'\"\r\n                        [required]=\"TravelType.value === 'International'\" (typeaheadOnSelect)=\"OnOnewayCheck()\" />\r\n                      <div *ngIf=\"(f.submitted || TypeofVisa.touched) && TypeofVisa.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"TypeofVisa.errors['required']\">Visa Type is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                        (click)=\"showMoreInfo(MoreInfo, i, userObj)\">View</button>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n                <tbody>\r\n                  <tr *ngFor=\"let temp of DependentArrayView; let i = index\">\r\n                    <td>\r\n                      <div class=\"form-check\">\r\n                        <label>\r\n                          <input type=\"checkbox\" name=\"trades - {{i}}\" [(ngModel)]=\"temp.Selected\"\r\n                            (change)=\"checkedItems(temp, i)\" [checked]=\"temp.Selected == true\">\r\n                        </label>\r\n                      </div>\r\n                    </td>\r\n                    <td>{{temp.GivenName}}</td>\r\n                    <td>{{temp.PassportExpiryDate| date: 'dd-MMM-yyyy'}}</td>\r\n                    <td>{{temp.Relationship}}</td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <input name=\"VisaStatus - {{i}}\" style=\"width: fit-content;\" class=\"form-control\"\r\n                        autocomplete=\"off\" [(ngModel)]=\"temp.VisaStatus\"\r\n                        [typeahead]=\"userObj.Travel_x005f_x0020_x005f_For == 'Self along with Dependents' ? informService.VisaStatus : informService.DependentsVisaStatus\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                        #VisaStatus=\"ngModel\" (focusout)=\"focusout($event,'VisaStatus'+i)\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'VisaStatus'+i)\"\r\n                        (typeaheadOnSelect)=\"dependentVisaStatus(temp)\"\r\n                        [disabled]=\"!isShow || !temp.Selected\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || VisaStatus.touched) && VisaStatus.invalid }\"\r\n                        placeholder=\"Visa Status\" class=\"form-control\"\r\n                        [required]=\"TravelType.value === 'International'\" />\r\n                      <div *ngIf=\"(f.submitted || VisaStatus.touched) && VisaStatus.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaStatus.errors['required']\">Visa Status is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <span class=\"displayFlex\">\r\n                        <input class=\"form-control fitWidth\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                          autocomplete=\"off\" bsDatepicker\r\n                          [ngClass]=\"{ 'is-invalid': (f.submitted || VisaValidTill.touched) && VisaValidTill.invalid }\"\r\n                          [minDate]=\"today\" name=\"VisaValidTill - {{i}}\" [(ngModel)]=\"temp.VisaValidTill\"\r\n                          [bsConfig]=\"bsConfig\" #VisaValidTill=\"ngModel\" placeholder=\"Visa Valid Till\"\r\n                          [disabled]=\"!isShow || updateEdit || !temp.Selected ||\r\n                          (temp.VisaStatus && (temp.VisaStatus === 'Submitted' || temp.VisaStatus === 'On-arrival' || temp.VisaStatus === 'Return to home country'))\"\r\n                          (ngModelChange)=\"onVisaValidTillChange(temp)\"\r\n                          [required]=\"(TravelType.value === 'International' && (temp.VisaStatus === 'Obtained'))\" />\r\n                        <span\r\n                          *ngIf=\"!(temp.VisaStatus && (temp.VisaStatus === 'Submitted' || temp.VisaStatus === 'On-arrival' || temp.VisaStatus === 'Return to home country'))\"><sup>&nbsp;*</sup></span>\r\n                      </span>\r\n                      <div *ngIf=\"(f.submitted || VisaValidTill.touched) && VisaValidTill.invalid\"\r\n                        style=\"display: block;\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaValidTill.errors['required']\">Visa Valid Till is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <span class=\"displayFlex\">\r\n                        <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control fitWidth\"\r\n                          style=\"text-transform: capitalize\" name=\"VisaNo - {{i}}\" [(ngModel)]=\"temp.VisaNo\"\r\n                          placeholder=\"Visa No\" #VisaNo=\"ngModel\" [disabled]=\"!isShow || updateEdit || !temp.Selected ||\r\n                          (temp.VisaStatus && (temp.VisaStatus === 'Submitted' || temp.VisaStatus === 'On-arrival' || temp.VisaStatus === 'Return to home country'))\"\r\n                          [ngClass]=\"{ 'is-invalid': (f.submitted || VisaNo.touched) && VisaNo.invalid }\"\r\n                          [required]=\"(TravelType.value === 'International' && (temp.VisaStatus === 'Obtained' ))\" />\r\n                        <span\r\n                          *ngIf=\"!(temp.VisaStatus && (temp.VisaStatus === 'Submitted' || temp.VisaStatus === 'On-arrival' || temp.VisaStatus === 'Return to home country'))\"><sup>&nbsp;*</sup></span>\r\n                      </span>\r\n                      <div *ngIf=\"(f.submitted || VisaNo.touched) && VisaNo.invalid\" style=\"display: block;\"\r\n                        class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaNo.errors['required']\">Visa No is required</div>\r\n                      </div>\r\n\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <input name=\"typevisa - {{i}}\" style=\"width: fit-content;\" class=\"form-control\" autocomplete=\"off\"\r\n                        [(ngModel)]=\"temp.TypeofVisa\" [typeahead]=\"informService.DependentTypeofVisa\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                        #TypeofVisa=\"ngModel\" placeholder=\"Type of Visa\" #TypeofVisa=\"ngModel\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'TypeofVisa'+i)\" class=\"form-control\"\r\n                        (focusout)=\"focusout($event,'TypeofVisa'+i)\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || TypeofVisa.touched) && TypeofVisa.invalid }\" disabled\r\n                        (typeaheadOnSelect)=\"OnOnewayCheck()\" />\r\n                      <div *ngIf=\"(f.submitted || TypeofVisa.touched) && TypeofVisa.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"TypeofVisa.errors['required']\">Visa Type is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                        (click)=\"showMoreInfo(MoreInfo, i, null)\">View</button>\r\n                    </td>\r\n                  </tr>\r\n\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n          <div\r\n            *ngIf=\"userObj.Travel_x005f_x0020_x005f_For == 'Self' || userObj.Travel_x005f_x0020_x005f_For == 'Self along with Dependents'\">\r\n\r\n            <div *ngIf=\"isShowDomestic\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"IdentityProof\">Identity Proof</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <input name=\"IdentityProof\" autocomplete=\"off\" [(ngModel)]=\"userObj.IdentityProof\"\r\n                    [typeahead]=\"informService.Proof\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                    typeaheadOptionField=\"name\" placeholder=\"Identity Proof\" #IdentityProof=\"ngModel\"\r\n                    [ngClass]=\"{ 'is-invalid': (f.submitted || IdentityProof.touched) && IdentityProof.invalid }\"\r\n                    (focusout)=\"focusout($event,'IdentityProof')\"\r\n                    (typeaheadNoResults)=\"typeaheadNoResults($event,'IdentityProof')\" class=\"form-control\"\r\n                    [required]=\"TravelType.value === 'Domestic'\" (typeaheadOnSelect)=\"OnIdProof($event)\" />\r\n                  <div *ngIf=\"(f.submitted || IdentityProof.touched) && IdentityProof.invalid\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"IdentityProof.errors['required']\">Identity Proof is required</div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"IDProofNumber\">Id Proof Number</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autocomplete=\"off\" class=\"form-control\" style=\"text-transform: capitalize\"\r\n                      name=\"IDProofNumber\" [(ngModel)]=\"userObj.IDProofNumber\" placeholder=\"Id Proof Number\"\r\n                      #IDProofNumber=\"ngModel\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || IDProofNumber.touched) && IDProofNumber.invalid }\"\r\n                      [required]=\"TravelType.value === 'Domestic'\" />\r\n                    <div *ngIf=\"(f.submitted || IDProofNumber.touched) && IDProofNumber.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"IDProofNumber.errors['required']\">Identity Proof Number is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div *ngIf=isShow>\r\n            <div *ngIf=\"userObj.Travel_x005f_x0020_x005f_For == 'Self'\">\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"GivenName\">Given Name</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      style=\"text-transform: capitalize\" name=\"GivenName\" [(ngModel)]=\"userObj.GivenName\"\r\n                      placeholder=\"Given Name\" #GivenName=\"ngModel\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || GivenName.touched) && GivenName.invalid }\" readonly\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || GivenName.touched) && GivenName.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"GivenName.errors['required']\">Given Name is required</div>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"SurName\">Surname</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      style=\"text-transform: capitalize\" name=\"SurName\" [(ngModel)]=\"userObj.SurName\"\r\n                      placeholder=\"Surname\" #SurName=\"ngModel\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || SurName.touched) && SurName.invalid }\" readonly\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || SurName.touched) && SurName.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"SurName.errors['required']\">Surname is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"PassportNo\">Passport No</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      style=\"text-transform: capitalize\" name=\"PassportNo\" [(ngModel)]=\"userObj.PassportNo\"\r\n                      placeholder=\"Passport No\" #PassportNo=\"ngModel\" pattern=\"^[a-zA-Z0-9]+$\" maxlength=\"75\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || PassportNo.touched) && PassportNo.invalid }\" readonly\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || PassportNo.touched) && PassportNo.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"PassportNo.errors['required']\">Passport No is required</div>\r\n                      <div *ngIf=\"PassportNo.errors['pattern']\">Enter a valid passport number</div>\r\n                    </div>\r\n                  </div>\r\n\r\n\r\n\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"PassportExpiryDate\">Passport Expiry Date</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input class=\"form-control\" autocomplete=\"off\" #datepickerYMD=\"bsDatepicker\"\r\n                      (keydown)=\"number($event)\" bsDatepicker name=\"PassportExpiryDate\"\r\n                      [(ngModel)]=\"userObj.PassportExpiryDate\" [bsConfig]=\"bsConfig\" #PassportExpiryDate=\"ngModel\"\r\n                      [minDate]=\"minDate\" disabled\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || PassportExpiryDate.touched) && PassportExpiryDate.invalid }\"\r\n                      placeholder=\"Passport Expiry Date\" readonly [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || PassportExpiryDate.touched) && PassportExpiryDate.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"PassportExpiryDate.errors['required']\">Passport Expiry is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"DateofBirth\">Date of Birth (in Passport)</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                      autocomplete=\"off\" bsDatepicker name=\"DateofBirth\" [(ngModel)]=\"userObj.DateofBirth\"\r\n                      [bsConfig]=\"bsConfig\" #DateofBirth=\"ngModel\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || DateofBirth.touched) && DateofBirth.invalid }\"\r\n                      [maxDate]=\"minDate\" placeholder=\"Date of Birth (in Passport)\" readonly disabled\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || DateofBirth.touched) && DateofBirth.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"DateofBirth.errors['required']\">Date of Birth is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"VisaStatus\">Visa Status</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input name=\"VisaStatus\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.VisaStatus\"\r\n                      [typeahead]=\"informService.VisaStatus\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                      typeaheadOptionField=\"name\" #VisaStatus=\"ngModel\" (focusout)=\"focusout($event,'VisaStatus')\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'VisaStatus')\"\r\n                      (typeaheadOnSelect)=\"visaStatus($event)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || VisaStatus.touched) && VisaStatus.invalid }\"\r\n                      placeholder=\"Visa Status\" class=\"form-control\"\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || VisaStatus.touched) && VisaStatus.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"VisaStatus.errors['required']\">Visa Status is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"VisaValidTill\">Visa Valid Till</label>\r\n                    <sup *ngIf=\"!isVisaSubmitted\">\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                      autocomplete=\"off\" bsDatepicker\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || VisaValidTill.touched) && VisaValidTill.invalid }\"\r\n                      [minDate]=\"today\" name=\"VisaValidTill\" [(ngModel)]=\"userObj.VisaValidTill\" [bsConfig]=\"bsConfig\"\r\n                      #VisaValidTill=\"ngModel\" placeholder=\"Visa Valid Till\"\r\n                      (ngModelChange)=\"onVisaValidTillChange(userObj)\"\r\n                      [disabled]=\"isVisaSubmitted\"\r\n                      [required]=\"(TravelType.value === 'International' && (userObj.VisaStatus === 'Obtained'))\" />\r\n                    <div *ngIf=\"(f.submitted || VisaValidTill.touched) && VisaValidTill.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"VisaValidTill.errors['required']\">Visa Valid Till is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"TypeofVisa\">Type of Visa</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input name=\"typevisa\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.TypeofVisa\"\r\n                      [typeahead]=\"informService.TypeofVisa\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                      typeaheadOptionField=\"name\" #TypeofVisa=\"ngModel\" placeholder=\"Type of Visa\" #TypeofVisa=\"ngModel\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'TypeofVisa')\" class=\"form-control\"\r\n                      (focusout)=\"focusout($event,'TypeofVisa')\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || TypeofVisa.touched) && TypeofVisa.invalid }\"\r\n                      [required]=\"TravelType.value === 'International'\" (typeaheadOnSelect)=\"OnOnewayCheck()\"\r\n                      [disabled]=\"userObj.VisaStatus === 'On-arrival' || userObj.VisaStatus === 'Return to home country'\" />\r\n                    <div *ngIf=\"(f.submitted || TypeofVisa.touched) && TypeofVisa.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"TypeofVisa.errors['required']\">Visa Type is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"VisaNo\">Visa No</label>\r\n                    <sup *ngIf=\"!isVisaSubmitted\">\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      style=\"text-transform: capitalize\" name=\"VisaNo\" [(ngModel)]=\"userObj.VisaNo\"\r\n                      placeholder=\"Visa No\" #VisaNo=\"ngModel\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || VisaNo.touched) && VisaNo.invalid }\"\r\n                      [disabled]=\"isVisaSubmitted\"\r\n                      [required]=\"TravelType.value === 'International' && (userObj.VisaStatus === 'Obtained')\" />\r\n                    <div *ngIf=\"(f.submitted || VisaNo.touched) && VisaNo.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"VisaNo.errors['required']\">Visa No is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-md-3\">\r\n                <div class=\"form-group\" *ngIf=\"isEdit\">\r\n                  <label for=\"AdvanceRequired\">Advance Required?</label>\r\n                  <sup>\r\n                    <span>*</span>\r\n                  </sup>\r\n                </div>\r\n                <div class=\"form-group\" *ngIf=\"!isEdit\">\r\n                  <label for=\"AdvanceRequired\">Advance Required?</label>\r\n                  <sup>\r\n                    <span>*</span>\r\n                  </sup>\r\n                </div>\r\n              </div>\r\n              <!-- <div class=\"col-md-3\" *ngIf=\"isEdit\">\r\n                  <input type=\"radio\" [(ngModel)]=\"userObj.AdvanceRequired\" [value]=\"true\"\r\n                    [checked]=\"userObj.AdvanceRequired\"  />\r\n                  Yes\r\n                  <input type=\"radio\" [(ngModel)]=\"!userObj.AdvanceRequired\" [value]=\"false\"\r\n                    [checked]=\"!userObj.AdvanceRequired\"  />\r\n                  No\r\n                </div> -->\r\n              <div class=\"col-md-3\" *ngIf=\"isEdit\">\r\n                <input type=\"radio\" name=\"AdvanceRequired\" [(ngModel)]=\"userObj.AdvanceRequired\" value=\"true\"\r\n                  (change)=\"onAdvance($event, PANNoNotification)\" #AdvanceRequired=\"ngModel\"\r\n                  [ngClass]=\"{ 'is-invalid': (f.submitted || AdvanceRequired.touched) && AdvanceRequired.invalid }\"\r\n                  required />\r\n                Yes\r\n                <input type=\"radio\" name=\"AdvanceRequired\" [(ngModel)]=\"userObj.AdvanceRequired\" value=\"false\"\r\n                  (change)=\"onAdvance($event, PANNoNotification)\" #AdvanceRequired=\"ngModel\"\r\n                  [ngClass]=\"{ 'is-invalid': (f.submitted || AdvanceRequired.touched) && AdvanceRequired.invalid }\"\r\n                  required />\r\n                No\r\n                <div *ngIf=\"(f.submitted || AdvanceRequired.touched) && AdvanceRequired.invalid\"\r\n                  class=\"invalid-feedback\">\r\n                  <div *ngIf=\"AdvanceRequired.errors['required']\">Advance Required is required</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div *ngIf=\"isAdvance\">\r\n              <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Currency</th>\r\n                    <th>Card</th>\r\n                    <th>Cash</th>\r\n                    <th>Amount</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let money of AdvanceDetails; let i = index\">\r\n                    <td class=\"form-group\">\r\n                      <input [(ngModel)]=\"money.Currency\" name=\"Currency - {{i}}\" [typeahead]=\"CurrancyType\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"currency_types\"\r\n                        placeholder=\"Currency\" class=\"form-control\" (focusout)=\"focusout($event,'Currency',i)\"\r\n                        (typeaheadOnSelect)=\"OnCurrencyCheck($event,money,i)\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || Currency.touched) && Currency.invalid }\"\r\n                        #Currency=\"ngModel\" [required]=\"userObj.AdvanceRequired == 'true'\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'Currency',i)\" />\r\n                      <div *ngIf=\"(f.submitted || Currency.touched) && Currency.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"Currency.errors['required']\">Currency is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td class=\"form-group\">\r\n                      <input type=\"number\" autocomplete=\"off\" class=\"form-control\" (keydown)=\"numberOnly($event)\"\r\n                        [(ngModel)]=\"money.Card\" name=\"Card - {{i}}\" #Card=\"ngModel\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || Card.touched) && Card.invalid }\"\r\n                        [disabled]=\"money.carddisable\" [required]=\"userObj.AdvanceRequired == 'true'\">\r\n                      <div *ngIf=\"(f.submitted || Card.touched) && Card.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"Card.errors['required']\">Card is required</div>\r\n                      </div>\r\n\r\n                    </td>\r\n                    <td class=\"form-group\">\r\n                      <input type=\"number\" autocomplete=\"off\" class=\"form-control\" (keydown)=\"numberOnly($event)\"\r\n                        [(ngModel)]=\"money.Cash\" name=\"Cash - {{i}}\" #Cash=\"ngModel\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || Cash.touched) && Cash.invalid }\"\r\n                        [disabled]=\"money.cashdisable\" [required]=\"userObj.AdvanceRequired == 'true'\">\r\n                      <div *ngIf=\"(f.submitted || Cash.touched) && Cash.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"Cash.errors['required']\">Cash is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td class=\"form-group\">\r\n                      <input type=\"number\" autocomplete=\"off\" class=\"form-control\" value=\"{{money.Cash+money.Card}}\"\r\n                        name=\"Amount - {{i}}\" readonly [required]=\"userObj.AdvanceRequired == 'true'\" />\r\n                      <!-- <div *ngIf=\"(f.submitted || Project.touched) && Amount.invalid\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"Amount.errors['required']\">Amount is required</div>\r\n                        </div> -->\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n\r\n              <div class=\"ml-2 mb-3 mt-2\" *ngIf=\"isEdit && AdvanceDetails.length > 1\" style=\"float: right;\">\r\n                <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteNeRowCurrency()\">Delete</button>\r\n              </div>\r\n              <div class=\"ml-2 mb-3 mt-2\" *ngIf=\"isEdit && AdvanceDetails.length >= 1\" style=\"float: right;\">\r\n                <button type=\"button\" class=\"btn btn-primary\"\r\n                  (click)=\"addNeRowCurrency($event,AdvanceDetails, i)\">Add</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </accordion-group>\r\n      </accordion>\r\n\r\n\r\n\r\n      <accordion>\r\n        <accordion-group heading=\"Trip Details\">\r\n          <!-- <div class=\"form-group row\" *ngIf=\"isEdit\">\r\n              <div>\r\n                <input type=\"radio\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory1\" value=\"OneWay\"\r\n                  (change)=\"onRadioChange($event)\" [checked]=\"userObj.TripType === 'OneWay'\"\r\n                  [attr.disabled]=\"IsEditMode\" />\r\n                One Way\r\n                <input type=\"radio\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory2\" value=\"RoundTrip\"\r\n                  (change)=\"onRadioChange($event)\" [checked]=\"userObj.TripType === 'RoundTrip'\"\r\n                  [attr.disabled]=\"IsEditMode\" />\r\n                Round Trip\r\n                <input type=\"radio\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory3\" value=\"MultiCity\"\r\n                  (change)=\"onRadioChange($event)\" [checked]=\"userObj.TripType === 'MultiCity'\"\r\n                  [attr.disabled]=\"IsEditMode\" />\r\n                Multicity\r\n  \r\n              </div>\r\n            </div> -->\r\n          <div class=\"form-group row\" *ngIf=\"isEdit\">\r\n            <div>\r\n              <input type=\"radio\" name=\"TripType\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory1\"\r\n                value=\"OneWay\" (change)=\"onRadioChange($event)\" #TripType=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TripType.touched) && TripType.invalid }\" required  *ngIf=\"showOneWay\"/>\r\n                <span *ngIf=\"showOneWay\">&nbsp;One Way&nbsp;</span> \r\n              <input type=\"radio\" name=\"TripType\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory2\"\r\n                value=\"RoundTrip\" (change)=\"onRadioChange($event)\" #TripType=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TripType.touched) && TripType.invalid }\" required />\r\n              Round Trip\r\n              <input type=\"radio\" name=\"TripType\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory3\"\r\n                value=\"MultiCity\" (change)=\"onRadioChange($event)\" #TripType=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TripType.touched) && TripType.invalid }\" required />\r\n              Multicity\r\n              <div *ngIf=\"(f.submitted || TripType.touched) && TripType.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TripType.errors['required']\">Trip Type is required</div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"OnewayTripVisaType && ( userObj.TypeofVisa || DependentArrayView.length > 0 )\">\r\n            <div class=\"row mb-3\" style=\"color: brown;\">\r\n              <!-- <div class=\"col-md-3\"></div> -->\r\n              <div class=\"col-md-12\">\r\n                One way not allowed for the type of visa selected.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"isTableShow\">\r\n            <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n              <thead>\r\n                <tr>\r\n                  <th>From City</th>\r\n                  <th>To City</th>\r\n                  <th>Date</th>\r\n                  <th>First Preference</th>\r\n                  <th>Second Preference</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let temp of tripDeatilsArray; let i = index\">\r\n                  <td class=\"form-group\">\r\n                    <input [(ngModel)]=\"temp.Form\" name=\"Form - {{i}}\" [typeahead]=\"locationArrays\" #Form=\"ngModel\"\r\n                      [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"location\"\r\n                      placeholder=\"From City\" class=\"form-control\" (focusout)=\"focusout($event,'Form',i)\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'Form',i)\"\r\n                      (typeaheadOnSelect)=\"onFromCityChange($event,tripDeatilsArray, i)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || Form.touched) && Form.invalid }\" #Form=\"ngModel\"\r\n                      required>\r\n                    <div *ngIf=\"(f.submitted || Form.touched) && Form.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"Form.errors['required']\">From City is required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input [(ngModel)]=\"temp.To\" name=\"To - {{i}}\" [typeahead]=\"locationArrays\" #To=\"ngModel\"\r\n                      [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"location\"\r\n                      placeholder=\"To City\" class=\"form-control\" (focusout)=\"focusout($event,'To',i)\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'To',i)\"\r\n                      (typeaheadOnSelect)=\"onToCityChange($event,tripDeatilsArray , i)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || To.touched) && To.invalid }\" required>\r\n                    <div *ngIf=\"(f.submitted || To.touched) && To.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"To.errors['required']\">To City is required</div>\r\n                    </div>\r\n\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                      autocomplete=\"off\" bsDatepicker #date=\"ngModel\" name=\"TravelDate - {{i}}\"\r\n                      [(ngModel)]=\"temp.TravelDate\" [bsConfig]=\"bsConfig\" [minDate]=\"getMinDate(i)\"\r\n                      placeholder=\"Travel Date\" #TravelDate=\"ngModel\"\r\n                      (ngModelChange)=\"onValueChange($event,tripDeatilsArray , i)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || TravelDate.touched) && TravelDate.invalid }\" required>\r\n                    <div *ngIf=\"(f.submitted || TravelDate.touched) && TravelDate.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"TravelDate.errors['required']\">Travel Date is required</div>\r\n                    </div>\r\n\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input [(ngModel)]=\"temp.FirstPreferance\" name=\"FirstPreferance - {{i}}\"\r\n                      [typeahead]=\"informService.TimeArray\" #FirstPreferance=\"ngModel\" [typeaheadOptionsLimit]=\"7\"\r\n                      [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\" class=\"form-control\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'FirstPreferance',i)\"\r\n                      placeholder=\"First Preference\" (focusout)=\"focusout($event,'FirstPreferance',i)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || FirstPreferance.touched) && FirstPreferance.invalid }\"\r\n                      required (typeaheadOnSelect)=\"onFirstChange($event,tripDeatilsArray , i)\" />\r\n                    <div *ngIf=\"(f.submitted || FirstPreferance.touched) && FirstPreferance.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"FirstPreferance.errors['required']\">First Preference is required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input [(ngModel)]=\"temp.SecondPreferance\" name=\"SecondPreferance - {{i}}\"\r\n                      [typeahead]=\"informService.TimeArray\" #SecondPreferance=\"ngModel\" [typeaheadOptionsLimit]=\"7\"\r\n                      [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\" class=\"form-control\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'SecondPreferance',i)\"\r\n                      (focusout)=\"focusout($event,'SecondPreferance',i)\"\r\n                      (typeaheadOnSelect)=\"onSecondChange($event,tripDeatilsArray , i)\" placeholder=\"Second Preference\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || SecondPreferance.touched) && SecondPreferance.invalid }\"\r\n                      required />\r\n                    <div *ngIf=\"(f.submitted || SecondPreferance.touched) && SecondPreferance.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"SecondPreferance.errors['required']\">Second Preference is required</div>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div class=\"row mt-3 mb-3\" *ngIf=\"isDeviation\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"DeviationReason\">Deviation Reason</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <input autocomplete=\"off\" [typeahead]=\"informService.DeviationReason\" [typeaheadOptionsLimit]=\"7\"\r\n                  [typeaheadMinLength]=\"0\" name=\"DeviationReason\" [(ngModel)]=\"userObj.DeviationReason\"\r\n                  typeaheadOptionField=\"name\" #DeviationReason=\"ngModel\" placeholder=\"Deviation Reason\"\r\n                  (typeaheadNoResults)=\"typeaheadNoResults($event,'DeviationReason')\" class=\"form-control\"\r\n                  [ngClass]=\"{ 'is-invalid': (f.submitted || DeviationReason.touched) && DeviationReason.invalid }\"\r\n                  (focusout)=\"focusout($event,'DeviationReason')\" [required]=\"isDeviation === true\" />\r\n                <div *ngIf=\"(f.submitted || DeviationReason.touched) && DeviationReason.invalid\"\r\n                  class=\"invalid-feedback\">\r\n                  <div *ngIf=\"DeviationReason.errors['required']\">Deviation Reason is required</div>\r\n                </div>\r\n              </div>\r\n              <!-- [required]=\"(((isDeviation === true) && userObj.Project && userObj.IsProjectTravel === true) || ((isDeviation === true) && userObj.Project && userObj.IsProjectTravel === false))\" -->\r\n            </div>\r\n          </div>\r\n          <div class=\"row mt-3 mb-3\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ReportingDate\">Reporting Date</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" autocomplete=\"off\"\r\n                bsDatepicker name=\"ReportingDate\" [(ngModel)]=\"userObj.ReportingDate\" [bsConfig]=\"bsConfig\"\r\n                #ReportingDate=\"ngModel\" placeholder=\"Reporting Date\"\r\n                [minDate]=\"userObj.firstLegIndex ? tripDeatilsArray[userObj.firstLegIndex].TravelDate : tripDeatilsArray[0].TravelDate ? tripDeatilsArray[0].TravelDate : minDate\"\r\n                [maxDate]=\"userObj.TripType === 'OneWay' ? '':tripDeatilsArray[tripDeatilsArray.length-1].TravelDate\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || ReportingDate.touched) && ReportingDate.invalid }\" required\r\n                (ngModelChange)=\"onValueTriggerReportingDate($event)\" />\r\n              <div *ngIf=\"(f.submitted || ReportingDate.touched) && ReportingDate.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"ReportingDate.errors['required']\">Reporting Date is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"ml-2 mb-3 mt-3\"\r\n            *ngIf=\"(isDelete && tripDeatilsArray.length > 1 && userObj.TripType == 'MultiCity') || (isEdit && userObj.TripType == 'MultiCity')\"\r\n            style=\"float: right;\">\r\n            <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteNeRow()\">Remove Itinerary</button>\r\n          </div>\r\n          <div class=\"ml-2 mb-3 mt-3\"\r\n            *ngIf=\"(isShowBtn && userObj.TripType == 'MultiCity') || (isEdit && userObj.TripType == 'MultiCity')\"\r\n            style=\"float: right;\">\r\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"addNeRow($event,tripDeatilsArray, i)\">Add\r\n              Itinerary</button>\r\n          </div>\r\n        </accordion-group>\r\n      </accordion>\r\n\r\n      <div class=\"row   mt-5 mb-4\" *ngIf=\"isPasswordExpireInSixMnt \">\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n        <div class=\"col-md-6 \" style=\"color:red;padding-top: 8px;border: 1px solid;\">\r\n\r\n          <h5>Passport Expiry Alert</h5>\r\n\r\n          <div>\r\n            Your Passport expiry date is less than 6-months against your Travel date. Kindy get in\r\n            touch with \"traveldesk@maveric-systems.com\" to take guidance whether it is advisable to travel on the\r\n            requested date.\r\n          </div>\r\n\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n      </div>\r\n      <div class=\"row   mt-5 mb-4\" *ngIf=\"DependSixMnt\">\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n        <div class=\"col-md-6 \" style=\"color:red;padding-top: 8px;border: 1px solid;\">\r\n\r\n          <h5>Passport Expiry Alert - Dependent</h5>\r\n\r\n          <div>\r\n\r\n            <label for=\"\"> Dependent Passport expiry date is less than 6-months against your Travel date. Kindy\r\n              get\r\n              in touch with \"traveldesk@maveric-systems.com\" to take guidance whether it is advisable to travel on the\r\n              requested date.</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n      </div>\r\n      <div class=\"row height text-center pt-3\">\r\n        <button id=\"btnsub\" *ngIf=\"isEdit\" type=\"submit\" class=\"btn btn-primary px-3\"\r\n          (click)=\"Edit(f,template, PANNumberUpdatePopUp)\">Submit</button>\r\n        <button id=\"btncan\" *ngIf=\"isEdit\" type=\"button\" class=\"btn btn-danger px-3\" (click)=\"cancel()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #template>\r\n  <div class=\"modal-header popup\" style=\"display: unset;\">\r\n      <button type=\"button\" class=\"close pull-right popup\" aria-label=\"Close\" tooltip=\"close\" (click)=\"bsModalRef.hide()\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>  \r\n    <h5 class=\"modal-title text-center\" style=\"margin: 0 !important;\">Confirm Travel Request?</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Employee Id</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.EmployeeID}}</div>\r\n      <div class=\"col-md-2\"><label>Employee Name</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.EmployeeName}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Department</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Department}}</div>\r\n      <div class=\"col-md-2\"><label>Designation </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Designation}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Business Unit</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.BusinessUnit === null ? 'Nil':userObj.BusinessUnit }}</div>\r\n      <div class=\"col-md-2\"><label>Delivery Unit </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.DeliveryUnit === null ? 'Nil':userObj.DeliveryUnit}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Gender</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Gender}}</div>\r\n      <div class=\"col-md-2\"><label>Age </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Age}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Date of Birth</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.DOB | date: 'dd-MMM-yyyy'}}</div>\r\n      <div class=\"col-md-2\"><label>Base Location</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.BaseLocation}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Travel For </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Travel_x005f_x0020_x005f_For}}</div>\r\n      <div class=\"col-md-2\"><label>Travel Type</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.TravelType}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Project Id </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.projectoraclecode__c}}</div>\r\n      <div class=\"col-md-2\"><label>Project </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Project}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Client Id</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.clientprismcode__c}}</div>\r\n      <div class=\"col-md-2\"><label>Client Name </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.clientname__c}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Approval Authority</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.ApprovalAuthority}}</div>\r\n      <div class=\"col-md-2\"><label>Approvers Superior </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.ApproversSuperior}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Travel Category</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.TravelCategory}}</div>\r\n      <div class=\"col-md-2\"><label>Travel Purpose </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.TravelPurpose}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Mobile Number </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Mobile}}</div>\r\n      <div class=\"col-md-2\"><label>Travel Meal</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.TravelMeal}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Accommodation</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.AccommodationRequired == 'true'?'Yes':'No'}}</div>\r\n      <div class=\"col-md-2\"><label>Client Debit </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.ClientDebit == 'true'?'Yes':'No'}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Advance</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.AdvanceRequired == 'true'?'Yes':'No'}}</div>\r\n      <div class=\"col-md-2\"><label>Cost Center / Cluster</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.CostCenterOrCluster || 'Nil'}}</div>\r\n    </div>\r\n    <div class=\"row mt-2\" *ngIf=\"AdvanceDetails && AdvanceDetails.length > 0 \">\r\n      <div class=\"col-md-12\">\r\n        <table datatable [dtOptions]=\"dtOptionsPop\" class=\"table table-bordered\" *ngIf=\"isAdvance\">\r\n          <thead>\r\n            <tr>\r\n              <th>Currency</th>\r\n              <th>Card</th>\r\n              <th>Cash</th>\r\n              <th>Amount</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr *ngFor=\"let temp of AdvanceDetails; let i = index\">\r\n              <td>{{temp.Currency}}</td>\r\n              <td>{{temp.Card}}</td>\r\n              <td>{{temp.Cash}}</td>\r\n              <td>{{temp.Card + temp.Cash}}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mt-2\" *ngIf=\"DependentAdd && DependentAdd.length > 0 \">\r\n      <div class=\"col-md-12\">\r\n        <table datatable [dtOptions]=\"dtOptionsPop\" class=\"table table-bordered\" *ngIf=\"isDependent\">\r\n          <thead>\r\n            <tr>\r\n              <th>Given Name</th>\r\n              <th *ngIf=\"TravelType.value != 'International'\">Surname</th>\r\n              <th *ngIf=\"TravelType.value != 'International'\">Passport No</th>\r\n              <th *ngIf=\"TravelType.value != 'International'\">DOB</th>\r\n              <th>Passport Expiry</th>\r\n              <th *ngIf=\"TravelType.value != 'International'\">Gender</th>\r\n              <th>Relationship</th>\r\n              <th *ngIf=\"TravelType.value === 'International'\">Visa Status</th>\r\n              <th *ngIf=\"TravelType.value === 'International'\">Visa Valid Till</th>\r\n              <th *ngIf=\"TravelType.value === 'International'\">Visa No</th>\r\n              <th *ngIf=\"TravelType.value === 'International'\">Type of Visa</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr *ngFor=\"let temp of DependentAdd; let i = index\">\r\n\r\n              <td *ngIf=\"temp.Selected === true\">{{temp.GivenName}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value != 'International'\">{{temp.SurName}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value != 'International'\">{{temp.PassportNo}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value != 'International'\">{{temp.DOBPassport | date:\r\n                'dd-MMM-yyyy'}}</td>\r\n              <td *ngIf=\"temp.Selected === true\">{{temp.PassportExpiryDate | date: 'dd-MMM-yyyy'}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value != 'International'\">{{temp.Gender}}</td>\r\n              <td *ngIf=\"temp.Selected === true\">{{temp.Relationship}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value === 'International'\">{{temp.VisaStatus}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value === 'International'\">{{temp.VisaValidTill | date:\r\n                'dd-MMM-yyyy'}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value === 'International'\">{{temp.VisaNumber}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value === 'International'\">{{temp.TypeofVisa}}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\" *ngIf=\"TravelType.value === 'Domestic' && userObj.Travel_x005f_x0020_x005f_For != 'Dependent'\">\r\n      <div class=\"col-md-2\"><label>Identity Proof </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.IdentityProof}}</div>\r\n      <div class=\"col-md-2\"><label>IDProof Number</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.IDProofNumber}}</div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"TravelType.value === 'International' && userObj.Travel_x005f_x0020_x005f_For != 'Dependent'\">\r\n\r\n      <div class=\"col-md-2\"><label>Given Name </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.GivenName}}</div>\r\n      <div class=\"col-md-2\"><label>Surname</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.SurName}}</div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"TravelType.value === 'International' && userObj.Travel_x005f_x0020_x005f_For != 'Dependent'\">\r\n      <div class=\"col-md-2\"><label>Passport No</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.PassportNo}}</div>\r\n      <div class=\"col-md-2\"><label>Visa No</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.VisaNo === null ? 'Nil' :userObj.VisaNo }}</div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"TravelType.value === 'International' && userObj.Travel_x005f_x0020_x005f_For != 'Dependent'\">\r\n      <div class=\"col-md-2\"><label>Passport Expiry Date</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.PassportExpiryDate| date: 'dd-MMM-yyyy'}}</div>\r\n      <div class=\"col-md-2\"><label>Date of Birth</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.DateofBirth| date: 'dd-MMM-yyyy'}}</div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"TravelType.value === 'International' && userObj.Travel_x005f_x0020_x005f_For != 'Dependent'\">\r\n      <div class=\"col-md-2\"><label>Visa Status</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.VisaStatus}}</div>\r\n      <div class=\"col-md-2\"><label>Visa Valid Till</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.VisaValidTill === null ? 'Nil' : userObj.VisaValidTill | date: 'dd-MMM-yyyy'}}\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\" *ngIf=\"TravelType.value === 'International' && userObj.Travel_x005f_x0020_x005f_For != 'Dependent'\"><label>Visa Type</label> </div>\r\n      <div class=\"col-md-4\" *ngIf=\"TravelType.value === 'International' && userObj.Travel_x005f_x0020_x005f_For != 'Dependent'\"> : {{userObj.TypeofVisa}}</div>\r\n      <div class=\"col-md-2\"><label>Trip Type</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.TripType}}</div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"tripDeatilsArray && tripDeatilsArray.length > 0 \">\r\n      <div class=\"col-md-12\">\r\n        <table datatable [dtOptions]=\"dtOptionsPop\" class=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>From City</th>\r\n              <th>To City</th>\r\n              <th>Date</th>\r\n              <th>First Preference</th>\r\n              <th>Second Preference</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr *ngFor=\"let temp of tripDeatilsArray; let i = index\">\r\n              <td>{{temp.Form}}</td>\r\n              <td>{{temp.To}} </td>\r\n              <td>{{temp.TravelDate | date: 'dd-MMM-yyyy'}} </td>\r\n              <td>{{temp.FirstPreferance}} </td>\r\n              <td>{{temp.SecondPreferance}}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <div class=\"row mt-2\">\r\n      <div class=\"col-md-2\" *ngIf=\"isDeviation == true\"><label>Deviation Reason</label> </div>\r\n      <div class=\"col-md-4\" *ngIf=\"isDeviation == true\"> : {{userObj.DeviationReason}}</div>\r\n      <div class=\"col-md-2\"><label>Reporting Date</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.ReportingDate| date: 'dd-MMM-yyyy'}}</div>\r\n    </div>\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btns\" type=\"submit\" class=\"btn btn-primary px-4 mt-2\" [disabled]=\"clicked\"\r\n        (click)=\"TravelRequestAdd(Traveld)\">Submit</button>\r\n      <button id=\"btnClear\" type=\"submit\" class=\"btn btn-danger px-4 mt-2\"\r\n        (click)=\"TravelRequestCancel()\">Cancel</button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-template #Traveld>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row text-center request\">\r\n      <label for=\"comments\">Travel request raised your id is {{idnumber}}</label>\r\n    </div>\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\" (click)=\"navigate()\">Ok</button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #PANNumberUpdatePopUp>\r\n  <form name=\"form\" #PANForm=\"ngForm\">\r\n    <div class=\"modal-header popup\">\r\n      <h5 class=\"modal-title text-center\">PAN Number Update\r\n      </h5>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n      <div>\r\n        <label for=\"comments\">PAN Number</label>\r\n        <sup>\r\n          <span>*</span>\r\n        </sup>\r\n      </div>\r\n\r\n      <div class=\"col-md-12\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            pattern=\"[A-Za-z]{5}\\d{4}[A-Za-z]{1}\" style=\"text-transform: capitalize\" name=\"PANNumber\"\r\n            [(ngModel)]=\"userObj.PANNumber\" #PANNumber=\"ngModel\" placeholder=\"PAN Number\"\r\n            [ngClass]=\"{ 'is-invalid': PANForm.submitted && PANForm.invalid }\" required />\r\n          <div *ngIf=\"PANNumber.touched && PANForm.invalid\">\r\n            <div *ngIf=\"PANNumber.errors['required']\" style=\"color: red;\">Pan Number required</div>\r\n            <div *ngIf=\"!PANNumber.errors['required']\" style=\"color: red;\">Enter valid pan number</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row text-center request\">\r\n        <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\" (click)=\"updatePANNumber()\"\r\n          [disabled]=\"!userObj.PANNumber || PANForm.invalid\">Update</button>\r\n        <button id=\"btnClear\" type=\"button\" class=\"btn btn-danger px-4\"\r\n          (click)=\"navigateBack('PANNumber')\">Cancel</button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</ng-template>\r\n\r\n<ng-template #PANNoNotification>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center\">Alert\r\n    </h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div>\r\n      <label for=\"comments\">\r\n        Please share Pan Card & Latest Passport Copy front & back page to employeepayments@maveric-systems.com\r\n      </label>\r\n    </div>\r\n\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btnClear\" type=\"button\" class=\"btn btn-primary px-4\"\r\n        (click)=\"showPANNoUpdatePopUp(PANNumberUpdatePopUp)\">Ok</button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #MoreInfo>\r\n  <div class=\"modal-header popup\" style=\"display: unset;\">\r\n    <button type=\"button\" class=\"close pull-right popup\" aria-label=\"Close\" tooltip=\"close\" (click)=\"bsModalRef.hide()\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n     <h5 class=\"modal-title text-center\" style=\"margin: 0 !important;\">More Info</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Given Name</label> </div>\r\n      <div class=\"col-md-4\"> : <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].GivenName : userObj.GivenName\"></span>\r\n      </div>\r\n      <div class=\"col-md-2\"><label>Sur Name</label> </div>\r\n      <div class=\"col-md-4\"> :\r\n        <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].SurName : userObj.SurName\"></span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Gender</label> </div>\r\n      <div class=\"col-md-4\"> :\r\n        <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].Gender : userObj.Gender\"></span>\r\n      </div>\r\n      <div class=\"col-md-2\"><label>Relationship</label> </div>\r\n      <div class=\"col-md-4\"> :\r\n        <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].Relationship : 'Self'\"></span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Date of Birth <span *ngIf=\"selectedDependantIndex !== -1\">(in\r\n            Passport)</span></label> </div>\r\n      <div class=\"col-md-4\" *ngIf=\"selectedDependantIndex == -1\"> : {{ userObj.DateofBirth | date: 'dd-MMM-yyyy'}}\r\n      </div>\r\n      <div class=\"col-md-4\" *ngIf=\"selectedDependantIndex !== -1\"> : {{\r\n        DependentArrayView[selectedDependantIndex].DOBPassport | date: 'dd-MMM-yyyy'}}\r\n      </div>\r\n      <div class=\"col-md-2\"><label>Passport No</label> </div>\r\n      <div class=\"col-md-4\"> :\r\n        <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].PassportNo : userObj.PassportNo\"></span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Passport Expiry Date</label> </div>\r\n      <div class=\"col-md-4\" *ngIf=\"selectedDependantIndex == -1\"> : {{ userObj.PassportExpiryDate | date:\r\n        'dd-MMM-yyyy'}}\r\n      </div>\r\n      <div class=\"col-md-4\" *ngIf=\"selectedDependantIndex !== -1\"> : {{\r\n        DependentArrayView[selectedDependantIndex].PassportExpiryDate | date: 'dd-MMM-yyyy'}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>"

/***/ }),

/***/ "./src/app/edit-travel/edit-travel.component.ts":
/*!******************************************************!*\
  !*** ./src/app/edit-travel/edit-travel.component.ts ***!
  \******************************************************/
/*! exports provided: EditTravelComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditTravelComponent", function() { return EditTravelComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_adminUse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/adminUse */ "./src/app/shared/adminUse.ts");
/* harmony import */ var _shared_costUpdate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/costUpdate */ "./src/app/shared/costUpdate.ts");
/* harmony import */ var _shared_TravelCost__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/TravelCost */ "./src/app/shared/TravelCost.ts");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm5/ngx-bootstrap-modal.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_9__);










var EditTravelComponent = /** @class */ (function () {
    function EditTravelComponent(informService, router, modalService, activatedRoute, toaster) {
        this.informService = informService;
        this.router = router;
        this.modalService = modalService;
        this.activatedRoute = activatedRoute;
        this.toaster = toaster;
        this.config = {
            backdrop: true,
            class: "modal-xl",
            ignoreBackdropClick: true,
        };
        this.configsm = {
            backdrop: true,
            class: "modal-md",
            ignoreBackdropClick: true,
        };
        this.isEdit = false;
        this.noResult = false;
        this.userObj = {};
        this.adminUse = new _shared_adminUse__WEBPACK_IMPORTED_MODULE_2__["AdminUse"]();
        this.CostUpdate = new _shared_costUpdate__WEBPACK_IMPORTED_MODULE_3__["CostUpdate"]();
        this.TravelCost = new _shared_TravelCost__WEBPACK_IMPORTED_MODULE_4__["TravelCost"]();
        this.submitted = false;
        this.isShow = false;
        this.isShowDomestic = false;
        this.tripDeatilsArray = [
            {
                Form: "",
                To: "",
                TravelDate: null,
                FirstPreferance: "",
                SecondPreferance: "",
                fromDisable: false,
                toDisable: false,
                TravelDateDisable: false,
            },
        ];
        this.AdvanceDetails = [
            {
                Currency: "",
                Card: 0,
                Cash: 0,
                Amount: 0,
                carddisable: false,
                cashdisable: false,
            },
        ];
        this.isShowBtn = false;
        this.isDelete = false;
        this.isDependent = false;
        this.DependentArray = [];
        this.minDate = new Date();
        this.visaMinDate = new Date();
        this.minidate = new Date();
        this.maxDate = this.minDate.setDate(this.minDate.getDate() + 1);
        this.currentDate = new Date(this.minDate);
        // MaxDate =  this.minDate.setDate( this.minDate.getDate() + 7 );
        this.user = {};
        this.isAdvance = false;
        this.isTyped = false;
        this.isTableShow = false;
        this.isEditable = false;
        this.isDeviation = false;
        this.bsConfig = {
            dateInputFormat: this.informService.DateFormate,
            adaptivePosition: true,
            showWeekNumbers: false,
        };
        this.projectArray = [];
        this.dtOptions = {};
        this.dtOptionsPop = {};
        this.locationArrays = [];
        this.AdminUseArray = [];
        this.resultObj = {};
        this.userObject = {};
        this.travelObj = {};
        this.DependentArrayView = [];
        this.DependentAdd = [];
        this.TravelProfileArray = [];
        // newDate: Date;
        // new: Date;
        this.FullDetailTravelRequest = [];
        // FullDetailTravelRequestById: any = {};
        this.RId = 0;
        this.GetByTravelDependentsId = {};
        this.GetByRouteId = [];
        this.tempTrip = "";
        this.projectoaid = [];
        this.Hrinfo = [];
        this.BookingNames = [];
        this.common = [];
        // emails: any[];
        this.Approv = [];
        this.Super = [];
        this.DMauthority = {};
        this.TPSuperior = {};
        this.TPSuperSuperior = {};
        this.TPSuperSuperiorOfficer = {};
        this.DMauthoritySame = {};
        this.TravelLoginInfo = {};
        this.FunctionalAuthority = {};
        this.FunctionalSupAuthority = {};
        this.Depart = [];
        this.Delivery = {};
        this.DeliverySource = [];
        this.fileToUpload = null;
        this.TicketFiles = [];
        this.TotalAmountPaid = 0;
        this.comments = "";
        this.pageShow = false;
        this.counter = 0;
        this.amountPaid = false;
        this.amountrefunded = false;
        this.amoPay = false;
        this.amoRepay = false;
        this.clickCount = 0;
        this.isSingleClick = true;
        this.buttonHide = false;
        this.IsEditMode = false;
        this.updateEdit = false;
        this.money = {};
        this.NoAccomdation = false;
        this.flight = false;
        this.Costdetails = [];
        this.TPSuperiorNon = {};
        this.AA = [];
        this.el = {};
        this.OnewayTripVisaType = false;
        this.FilesArray = [];
        this.FilesArrayData = [];
        this.FullDetails = [];
        this.FullDetailsRoute = [];
        this.lastTravelDetails = {};
        this.lastNumberRoute = {};
        this.Results = [];
        this.RouteResults = [];
        this.filechoose = false;
        this.fileResult = [];
        this.clicked = false;
        this.ResultPassportExpiryDate = [];
        this.checkDependentExpiry = false;
        this.GetTravelProfileInitial = [];
        this.EditsObjects = {};
        this.checkAdvanceRequired = false;
        this.TravelProjectList = [];
        this.DefaultProjectUser = [];
        this.editdisable = false;
        this.findProject = [];
        this.findTravelCategory = [];
        this.findTravelPurpose = [];
        this.findTravelMeal = [];
        this.findIdentityProof = [];
        this.findVisaStatus = [];
        this.findTypeofVisa = [];
        this.findCurency = [];
        this.findForm = [];
        this.findTo = [];
        this.findFirstPreferance = [];
        this.findSecondPreferance = [];
        this.findVendorName = [];
        this.findCostfor = [];
        this.isPasswordExpireInSixMnt = false;
        this.today = new Date();
        this.initialDependentAdd = [];
        this.showOneWay = true;
        this.clientDebitFilesUploaded = [];
        this.filesToRemove = [];
        this.DebitDocs = [];
        this.DebitDocsToUpload = [];
        // this.userObj.AnyDependentTravelling = false;
        this.userObj.Travel_x005f_x0020_x005f_For = "Self";
        this.userObj.AccommodationRequired = false;
        this.userObj.ClientDebit = false;
        this.userObj.AdvanceCurrency = false;
        this.userObj = this.informService.Current;
        this.minDate = new Date();
        // if (this.activatedRoute.snapshot.params['id']) {
        // this.RId = +atob(this.activatedRoute.snapshot.params['id']);
        this.RId = this.activatedRoute.snapshot.params["id"];
        this.Appkey = this.activatedRoute.snapshot.params["key"];
        // }
    }
    EditTravelComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.informService.GetCurrentUser(function () {
            if (_this.RId == null || _this.RId == undefined) {
                _this.informService.GetTravelProfileDetails().then(function (res) {
                    _this.GetTravelProfileInitial = res;
                    if (_this.GetTravelProfileInitial.length > 0) {
                        _this.router.navigate(["/NewTravelRequest"]);
                    }
                    else {
                        _this.router.navigate(["/MyProfile"]);
                        _this.toaster.successToastr("Please update your profile");
                    }
                });
            }
            _this.informService.GetDepertName().then(function (res) {
                _this.Depart = res;
            });
            _this.informService.GetCurrency().then(function (res) {
                _this.CurrancyType = res;
            });
            _this.informService.GetHrInfo().then(function (res) {
                _this.Hrinfo = res;
            });
            // this.informService.GetDefaultProjectUser().then((res: any) => {
            //   this.DefaultProjectUser = res;
            // });
            _this.informService.GetBookingNames().then(function (res) {
                _this.BookingNames = res;
            });
            _this.informService.GetLocation().then(function (res) {
                _this.locationArrays = res;
            });
            var checkDate = new Date();
            _this.informService.GetProjectoid().then(function (respon) {
                _this.projectoaid = _this.informService.projectoaidlist;
                _this.projectoaid.forEach(function (element) {
                    element.deploymentdate__c = new Date(element.deploymentdate__c);
                    element.enddate__c = new Date(element.enddate__c);
                });
                for (var i = 0; i < _this.BookingNames.length; i++) {
                    var ele = _this.BookingNames[i];
                    for (var j = 0; j < _this.projectoaid.length; j++) {
                        var res = _this.projectoaid[j];
                        if (ele.project_id == res.bookingprojectoaid__c &&
                            (ele.projectdepartmentname__c != null ||
                                ele.projectdepartmentname__c != undefined) &&
                            checkDate >= res.deploymentdate__c &&
                            checkDate <= res.enddate__c &&
                            _this.common.findIndex(function (e) { return e.project_id == ele.project_id; }) < 0) {
                            _this.common.push(ele);
                        }
                    }
                }
                _this.common.forEach(function (element) {
                    element.ProjectList =
                        element.projectoraclecode__c +
                            " " +
                            "-" +
                            " " +
                            element.project_name;
                });
            });
            _this.GetDependentsList();
            _this.informService.GetTravelProfileDetails().then(function (res) {
                _this.TravelProfileArray = res;
                _this.userObj.PassportExpDate = new Date(res[0].PassportExpDate);
                _this.PassportExpDate = _this.userObj.PassportExpDate.setMonth(_this.userObj.PassportExpDate.getMonth() - 6);
                _this.userObj.PANNumber = res[0].PANNumber;
                // if (this.TravelProfileArray.length > 0) {
                //   this.userObj.GivenName = res[0].GivenName,
                //     this.userObj.SurName = res[0].SurName,
                //     this.userObj.PassportNo = res[0].PassportNo,
                //     this.userObj.DateofBirth = new Date(res[0].DOBPassport),
                //     this.userObj.PassportExpiryDate = new Date(res[0].PassportExpiryDate),
                //     this.userObj.Mobile = res[0].Mobile;
                // }
            });
        });
        this.userObj = this.informService.Current;
        this.dtOptions = {
            pagingType: "full_numbers",
            pageLength: 10,
            paging: false,
            searching: false,
            info: false,
            ordering: false,
        };
        this.dtOptionsPop = {
            pagingType: "full_numbers",
            pageLength: 30,
            paging: false,
            searching: false,
            info: false,
            ordering: false,
        };
        if (this.RId != null && this.RId != undefined) {
            this.IsEditMode = true;
            if (this.Appkey == "UpdateTicket" ||
                this.Appkey == "Mytravel" ||
                this.Appkey == "approval") {
                this.updateEdit = true;
            }
            this.isEdit = true;
            this.informService.GetTravelRequestEditById(this.RId).then(function (res) {
                _this.informService.GetHrInfo().then(function (res) {
                    _this.Hrinfo = res;
                });
                _this.userObject = res;
                if (_this.userObject.TravelRequest.ClientDebitFileName &&
                    JSON.parse(_this.userObject.TravelRequest.ClientDebitFileName).length > 0) {
                    _this.clientDebitFilesUploaded = JSON.parse(_this.userObject.TravelRequest.ClientDebitFileName);
                }
                res.TravelRequest.DOB = _this.userObj.DOB;
                res.TravelRequest.Age = _this.userObj.Age;
                res.TravelRequest.DateofBirth = new Date(res.TravelRequest.DateofBirth);
                res.TravelRequest.PassportExpiryDate = new Date(res.TravelRequest.PassportExpiryDate);
                res.TravelRequest.PassportExpDate = new Date(res.TravelRequest.PassportExpDate);
                // if (res.TravelRequest.VisaValidTill != null) {
                //   this.bsValue = new Date(res.TravelRequest.VisaValidTill)
                // } else {
                //   this.bsValue = ''
                // }
                var tempPANNumber = _this.userObj.PANNumber;
                _this.userObj = res.TravelRequest;
                _this.userObj.PANNumber = tempPANNumber;
                if (_this.userObj.VisaValidTill || _this.userObj.TypeofVisa || _this.userObj.VisaNo) {
                    _this.initialVisaType = _this.userObj.TypeofVisa;
                    _this.initialVisaNo = _this.userObj.VisaNo;
                    _this.userObj.VisaValidTill = _this.initialVisaValidity = _this.userObj.VisaValidTill ? new Date(_this.userObj.VisaValidTill) : "";
                }
                if (_this.userObject.DependentAdd.length > 0) {
                    _this.initialDependentAdd = Object(lodash__WEBPACK_IMPORTED_MODULE_9__["cloneDeep"])(_this.userObject.DependentAdd);
                }
                if (res.TravelRequest.VisaStatus === "Submitted" || res.TravelRequest.VisaStatus === "On-arrival" || res.TravelRequest.VisaStatus === "Return to home country") {
                    _this.isVisaSubmitted = true;
                }
                _this.userObj.AccommodationRequired = String(_this.userObj.AccommodationRequired);
                _this.userObj.ClientDebit = String(_this.userObj.ClientDebit);
                _this.userObj.AdvanceRequired = String(_this.userObj.AdvanceRequired);
                _this.userObj.projectoraclecode__c = _this.userObj.projectoraclecode_x005f__x005f_c;
                _this.userObj.clientname__c = _this.userObj.clientname_x005f__x005f_c;
                _this.userObj.clientprismcode__c = _this.userObj.clientprismcode_x005f__x005f_c;
                // for (var i = 0; i < res.tripDeatilsArray.length; i++) {
                //   res.tripDeatilsArray[i].TravelDate = new Date(res.tripDeatilsArray[i].TravelDate);
                //   var ele = res.DependentAdd[i]
                //   if (res.TravelRequest.TravelType === 'International') {
                //     if (res.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
                //       res.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
                //     }
                //     else {
                //       res.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                //     }
                //     const data = res.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
                //     this.isPasswordExpireInSixMnt = data.length ? true : false;
                //   }
                // }
                // if (res.TravelRequest.TravelType === 'International') {
                //   for (var j = 0; j < res.DependentAdd.length; j++) {
                //     var ele = res.DependentAdd[j];
                //     for (var i = 0; i < res.tripDeatilsArray.length; i++) {
                //       if (res.tripDeatilsArray[i].TravelDate >= ele.DepndPassportExpDate) {
                //         res.tripDeatilsArray[i].DependSixMnt = true
                //       }
                //     }
                //     const data = res.tripDeatilsArray.filter(x => x.DependSixMnt === true);
                //     this.DependSixMnt = data.length ? true : false;
                //   }
                // }
                // this.userObj.AnyDependentTravelling = String(this.userObj.AnyDependentTravelling);
                if (_this.userObj.TravelMode === "Flight") {
                    _this.flight = true;
                }
                if (_this.userObj.IsDeviationRequest === true) {
                    _this.isDeviation = true;
                }
                else {
                    _this.isDeviation = false;
                }
                if (_this.userObj.Travel_x005f_x0020_x005f_For === "Dependent") {
                    _this.isDependent = true;
                }
                else if (_this.userObj.Travel_x005f_x0020_x005f_For === "Self along with Dependents") {
                    _this.isDependent = true;
                }
                else {
                    _this.isDependent = false;
                }
                if (_this.userObj.TravelType === "International") {
                    _this.isShowDomestic = false;
                    _this.isShow = true;
                }
                else {
                    _this.isShow = false;
                    _this.isShowDomestic = true;
                }
                if (_this.userObj.AdvanceRequired === "true") {
                    _this.isAdvance = true;
                }
                // this.informService.GetTravelProfileDetailsEdit(this.userObj.Title).then((res: any) => {
                //   this.TravelProfileArray = res;
                //   if (this.TravelProfileArray.length > 0) {
                //     this.userObj.GivenName = res[0].GivenName,
                //       this.userObj.SurName = res[0].SurName,
                //       this.userObj.PassportNo = res[0].PassportNo,
                //       this.userObj.DateofBirth = new Date(res[0].DOBPassport),
                //       this.userObj.PassportExpiryDate = new Date(res[0].PassportExpiryDate),
                //       this.userObj.Mobile = res[0].Mobile;
                //   }
                // });
                _this.rgid = _this.userObj.ID;
                _this.tripDeatilsArray = _this.userObject.tripDeatilsArray;
                var ind = _this.tripDeatilsArray.findIndex(function (item) { return item.ReferenceLeg != null || item.ReferenceLeg != undefined; });
                ind >= 0 ? _this.userObj.firstLegIndex = ind : _this.userObj.firstLegIndex = 0;
                _this.DependentAdd = _this.userObject.DependentAdd;
                if (_this.userObj.TravelType === 'International') {
                    if (_this.userObj.Travel_x005f_x0020_x005f_For === "Self") {
                        _this.checkInterAssPass();
                    }
                    else if (_this.userObj.Travel_x005f_x0020_x005f_For === "Dependent") {
                        _this.checkInterDepPass();
                    }
                    else if (_this.userObj.Travel_x005f_x0020_x005f_For === "Self along with Dependents") {
                        _this.checkInterDepPass();
                        _this.checkInterAssPass();
                    }
                }
                if (_this.userObject.AdvanceDetails.length > 0) {
                    _this.AdvanceDetails = _this.userObject.AdvanceDetails;
                    _this.AdvanceDetails.forEach(function (element) {
                        if (element.Card == "0" || element.Card == 0) {
                            element.carddisable = true;
                        }
                        if (element.Cash == "0" || element.Cash == 0) {
                            element.cashdisable = true;
                        }
                    });
                }
                else {
                    _this.AdvanceDetails = _this.AdvanceDetails;
                }
                if (_this.userObj.TravelStatus === "Travel Approved") {
                    _this.CostUpdate.Costfor = "Booking";
                }
                if (_this.userObj.TravelStatus === "Reschedule Approved") {
                    _this.CostUpdate.Costfor = "Reschedule";
                }
                if (_this.userObj.TravelStatus === "Cancellation Requested") {
                    _this.CostUpdate.Costfor = "Cancel";
                }
                if (_this.userObj.TripType === "RoundTrip" || _this.userObj.TripType === "OneWay") {
                    _this.userObj.FromCity = _this.tripDeatilsArray[0].Form;
                    _this.userObj.ToCity = _this.tripDeatilsArray[0].To;
                }
                if (_this.userObj.TripType === "MultiCity") {
                    _this.userObj.FromCity = _this.tripDeatilsArray[0].Form;
                    _this.userObj.ToCity = _this.tripDeatilsArray[0].Form;
                }
                _this.AdvanceDetails.forEach(function (element) {
                    element.Card = element.Card ? Number.parseFloat(element.Card) : 0;
                    element.Cash = element.Cash ? Number.parseFloat(element.Cash) : 0;
                    // element.Actions = 'NoUpdate';
                });
                _this.isTableShow = true;
                _this.tripDeatilsArray.forEach(function (element) {
                    element.TravelDate = new Date(element.TravelDate);
                });
                _this.tripDeatilsArray.forEach(function (element) {
                    element.TravelDate = new Date(element.TravelDate);
                    element.ActualDate = new Date(element.ActualDate);
                    // element.Actions = 'NoUpdate';
                    // element.InvoiceDate = new Date(element.InvoiceDate);
                    // element.TicketIssueDate = new Date(element.TicketIssueDate);
                    // element.AmountPaid = element.AmountPaid == null ? 0 : element.AmountPaid;
                    // element.AmountRefunded = element.AmountRefunded == null ? 0 : element.AmountRefunded;
                });
                // this.isDependent = true;
                // this.GetDependentsListById();
                _this.informService
                    .GetDependentsById(_this.userObj.Title)
                    .then(function (resp) {
                    _this.DependentArrayView = resp;
                    if (_this.DependentArrayView && _this.DependentArrayView.length > 0) {
                        _this.DependentArrayView.forEach(function (item) {
                            item.Selected = false;
                            item.DOBPassport = new Date(item.DOBPassport);
                            item.PassportExpiryDate = new Date(item.PassportExpiryDate);
                        });
                        _this.DependentAdd.forEach(function (response) {
                            // response.Actions = 'NoUpdate';
                            response.PassportExpiryDate = new Date(response.PassportExpiryDate);
                        });
                        _this.DependentAdd.forEach(function (response) {
                            _this.DependentArrayView.forEach(function (p) {
                                _this.isDependent = true;
                                if (response.GivenName == p.GivenName &&
                                    response.SurName == p.SurName) {
                                    p.Selected = true;
                                    response.Selected = true;
                                    p.VisaValidTill = response.VisaValidTill ? new Date(response.VisaValidTill) : "";
                                    p.VisaStatus = response.VisaStatus;
                                    p.TypeofVisa = response.TypeofVisa;
                                    p.VisaNo = response.VisaNumber;
                                }
                            });
                        });
                        _this.firstDependentIndex = _this.DependentArrayView.findIndex(function (item) { return item.Selected; });
                    }
                });
                (_this.tempTrip = _this.userObj.TripType),
                    // (this.userObj.VisaValidTill = new Date(this.userObj.VisaValidTill)),
                    (_this.userObj.ReportingDate = new Date(_this.userObj.ReportingDate)),
                    // this.userObj.DateofBirth = new Date(this.userObj.DOBPassport),
                    // this.userObj.PassportExpiryDate = new Date(this.userObj.PassportExpiryDate)
                    _this.informService.getCostDetails(_this.rgid).then(function (response) {
                        _this.Costdetails = response;
                        var AmountPaid = 0.0;
                        _this.Costdetails.forEach(function (element) {
                            element.TotalCost ? Number.parseFloat(element.TotalCost) : 0;
                            AmountPaid =
                                Number.parseFloat(AmountPaid) +
                                    Number.parseFloat(element.TotalCost);
                        });
                        _this.userObj.Cost = AmountPaid;
                    });
                _this.informService.GetDepertName().then(function (res) {
                    _this.Depart = res;
                });
                // this.informService.GetHrInfo().then((res: any) => {
                //   this.Hrinfo = res;
                // });
                _this.informService.GetBookingNames().then(function (res) {
                    _this.BookingNames = res;
                });
                _this.informService
                    .GetProject(_this.userObj.EmployeeID)
                    .then(function (res) {
                    _this.projectoaid = res;
                    _this.projectoaid.forEach(function (element) {
                        element.deploymentdate__c = new Date(element.deploymentdate__c);
                        element.enddate__c = new Date(element.enddate__c);
                    });
                    var checkDate = new Date();
                    for (var i = 0; i < _this.BookingNames.length; i++) {
                        var ele = _this.BookingNames[i];
                        for (var j = 0; j < _this.projectoaid.length; j++) {
                            var res = _this.projectoaid[j];
                            if (ele.project_id == res.bookingprojectoaid__c &&
                                (ele.projectdepartmentname__c != null ||
                                    ele.projectdepartmentname__c != undefined) &&
                                checkDate >= res.deploymentdate__c &&
                                checkDate <= res.enddate__c) {
                                _this.common.push(ele);
                            }
                        }
                    }
                    _this.el = _this.common.find(function (e) { return e.ProjectList == _this.userObj.Project; });
                    if (_this.el.projectdepartmentname__c != null ||
                        _this.el.projectdepartmentname__c != undefined) {
                        _this.Delivery = _this.Depart.find(function (eleme) {
                            return eleme.Department_name == _this.el.projectdepartmentname__c;
                        });
                    }
                    if (_this.Delivery && (_this.Delivery.department_type_name != null ||
                        _this.Delivery.department_type_name != undefined)) {
                        if (_this.Delivery.department_type_name == "DELIVERY") {
                            _this.DeliverySource = _this.informService.TravelCategory.filter(function (eleme) { return eleme.department_type_name == "DELIVERY"; });
                            _this.userObj.IsProjectTravel = true;
                        }
                        else {
                            _this.DeliverySource = _this.informService.TravelCategory.filter(function (eleme) { return eleme.department_type_name != "DELIVERY"; });
                            _this.userObj.IsProjectTravel = false;
                        }
                        if (_this.userObj && _this.userObj.Travel_x005f_x0020_x005f_For !== 'Dependent') {
                            Object(lodash__WEBPACK_IMPORTED_MODULE_9__["remove"])(_this.DeliverySource, _this.informService.TravelCategory.find(function (eleme) { return eleme.name == "Dependent Travel"; }));
                        }
                    }
                    _this.purpose = _this.DeliverySource.find(function (el) { return el.name == _this.userObj.TravelCategory; });
                    _this.onTravelCate(_this.purpose);
                    // if(this.Hrinfo && this.Hrinfo.length > 0) {
                    setTimeout(function () {
                        if (_this.RId != null &&
                            _this.RId != undefined &&
                            _this.Appkey === "Reschedule") {
                            var isDMavailable = false;
                            var isTPavailable = false;
                            var FMSuperior_1;
                            var FMSuperSuperior = void 0;
                            var Account = void 0;
                            if (_this.el.accountmanagerprismcode__c != null ||
                                _this.el.accountmanagerprismcode__c != undefined) {
                                Account = _this.Hrinfo.find(function (el) { return _this.el.accountmanagerprismcode__c == el.Title; });
                                if (Account != null || Account != undefined) {
                                    _this.EditAccountManager = Account.maveric_email_id;
                                }
                            }
                            var FM_1 = _this.Hrinfo.find(function (el) { return _this.informService.Current.EmployeeID == el.Title; });
                            if (FM_1 != null || FM_1 != undefined) {
                                FMSuperior_1 = _this.Hrinfo.find(function (el) { return FM_1.functional_reporting_to == el.Title; });
                                FMSuperSuperior = _this.Hrinfo.find(function (el) { return FMSuperior_1.functional_reporting_to == el.Title; });
                                _this.userObj.ApprovalAuthority = FM_1.maveric_email_id;
                            }
                            if (FMSuperior_1 != null || FMSuperior_1 != undefined) {
                                _this.userObj.ApproversSuperior = FMSuperior_1.maveric_email_id;
                            }
                            if (_this.el.deliverymanagerprismcode__c != null ||
                                _this.el.deliverymanagerprismcode__c != undefined) {
                                _this.DM = _this.Hrinfo.find(function (el) { return _this.el.deliverymanagerprismcode__c == el.Title; });
                                if (_this.TP != null || _this.TP != undefined) {
                                    _this.DMSuperior = _this.Hrinfo.find(function (el) { return _this.DM.functional_reporting_to == el.Title; });
                                }
                                isDMavailable = true;
                            }
                            if (_this.el.technicalpartnerprismcode__c != null ||
                                _this.el.technicalpartnerprismcode__c != undefined) {
                                _this.TP = _this.Hrinfo.find(function (el) { return _this.el.technicalpartnerprismcode__c == el.Title; });
                                if (_this.TP != null || _this.TP != undefined) {
                                    _this.TPSuperior = _this.Hrinfo.find(function (el) { return _this.TP.functional_reporting_to == el.Title; });
                                }
                                isTPavailable = true;
                            }
                            if (isDMavailable && isTPavailable) {
                                if (_this.DM.maveric_email_id ==
                                    _this.informService.Current.MailID) {
                                    _this.userObj.ApprovalAuthority = _this.TP.maveric_email_id;
                                    _this.userObj.ApproversSuperior = _this.TPSuperior.maveric_email_id;
                                }
                                else if (_this.TP.maveric_email_id ==
                                    _this.informService.Current.MailID) {
                                    if (_this.TPSuperior != null ||
                                        _this.TPSuperior != undefined) {
                                        _this.TPSuperSuperior = _this.Hrinfo.find(function (el) {
                                            return _this.TPSuperior.functional_reporting_to == el.Title;
                                        });
                                    }
                                    _this.userObj.ApprovalAuthority = _this.TPSuperior.maveric_email_id;
                                    _this.userObj.ApproversSuperior = _this.TPSuperSuperior.maveric_email_id;
                                }
                                else {
                                    _this.userObj.ApprovalAuthority = _this.DM.maveric_email_id;
                                    _this.userObj.ApproversSuperior = _this.TP.maveric_email_id;
                                }
                            }
                            else if (!isDMavailable && isTPavailable) {
                                if (_this.TP.maveric_email_id ==
                                    _this.informService.Current.MailID) {
                                    if (_this.TPSuperior != null ||
                                        _this.TPSuperior != undefined) {
                                        _this.TPSuperSuperior = _this.Hrinfo.find(function (el) {
                                            return _this.TPSuperior.functional_reporting_to == el.Title;
                                        });
                                    }
                                    _this.userObj.ApprovalAuthority = _this.TPSuperior.maveric_email_id;
                                    _this.userObj.ApproversSuperior = _this.TPSuperSuperior.maveric_email_id;
                                }
                                else {
                                    _this.userObj.ApprovalAuthority = _this.TP.maveric_email_id;
                                    _this.userObj.ApproversSuperior = _this.TPSuperior.maveric_email_id;
                                }
                            }
                            else if (isDMavailable && !isTPavailable) {
                                if (_this.DM.maveric_email_id ==
                                    _this.informService.Current.MailID) {
                                    _this.userObj.ApprovalAuthority = _this.DMSuperior.maveric_email_id;
                                    _this.DMSuperiorSuper = _this.Hrinfo.find(function (el) {
                                        return _this.DMSuperior.functional_reporting_to == el.Title;
                                    });
                                    _this.userObj.ApproversSuperior = _this.DMSuperiorSuper.maveric_email_id;
                                }
                                else {
                                    _this.userObj.ApprovalAuthority = _this.DM.maveric_email_id;
                                    _this.userObj.ApproversSuperior = _this.DMSuperior.maveric_email_id;
                                }
                            }
                            else if (!isDMavailable && !isTPavailable) {
                                _this.userObj.ApprovalAuthority = FMSuperior_1.maveric_email_id;
                                _this.userObj.ApproversSuperior =
                                    FMSuperSuperior.maveric_email_id;
                            }
                            else {
                                _this.userObj.ApprovalAuthority = FMSuperior_1.maveric_email_id;
                                _this.userObj.ApproversSuperior =
                                    FMSuperSuperior.maveric_email_id;
                            }
                            if (_this.userObj.ApprovalAuthority ==
                                _this.userObj.ApproversSuperior ||
                                _this.informService.Current.MailID ==
                                    _this.userObj.ApprovalAuthority ||
                                _this.informService.Current.MailID ==
                                    _this.userObj.ApproversSuperior) {
                                _this.userObj.ApprovalAuthority = "";
                                _this.userObj.ApproversSuperior = "";
                                _this.toaster.errorToastr("unable to fetch approval details please contact administrator");
                            }
                        }
                    }, 3000);
                });
            });
        }
    };
    EditTravelComponent.prototype.onChangeTravelFor = function (eve) {
        var _this = this;
        if (eve.target.value === "Self along with Dependents") {
            this.isShow = false;
            this.isDependent = true;
            this.getIsDisabled();
            if (this.userObj.TravelPurpose == 'Dependent Travel') {
                this.userObj.TravelPurpose = "";
            }
            ;
            if (this.userObj.TravelCategory == 'Dependent Travel') {
                this.userObj.TravelCategory = "";
            }
            ;
            if (this.userObj.TravelType === "International") {
                this.DependentArrayView.forEach(function (dependent) {
                    dependent.TypeofVisa = dependent.Selected ? "Dependent Visa" : "";
                });
                this.checkInterAssPass();
                this.checkInterDepPass();
            }
        }
        else if (eve.target.value === "Self") {
            this.isDependent = false;
            this.DependSixMnt = false;
            this.getIsDisabled();
            if (this.userObj.TravelPurpose == 'Dependent Travel') {
                this.userObj.TravelPurpose = "";
            }
            ;
            if (this.userObj.TravelCategory == 'Dependent Travel') {
                this.userObj.TravelCategory = "";
            }
            ;
            if (this.userObj.TravelType === "International" && this.userObj.Travel_x005f_x0020_x005f_For != "Dependent") {
                for (var i = 0; i < this.tripDeatilsArray.length; i++) {
                    if (this.userObj.PassportExpiryDate <= this.tripDeatilsArray[i].TravelDate) {
                        this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                        this.toaster.errorToastr("Travel Date should be on (or) before passport expiry date");
                        setTimeout(function () {
                            _this.tripDeatilsArray[i].TravelDate = null;
                        }, 300);
                        var data = this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
                        this.isPasswordExpireInSixMnt = data.length ? true : false;
                    }
                    else {
                        if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
                            this.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
                        }
                        else {
                            this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                        }
                        var data = this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
                        this.isPasswordExpireInSixMnt = data.length ? true : false;
                    }
                }
            }
        }
        else {
            this.isShow = false;
            this.isDependent = true;
            this.DependSixMnt = false;
            this.userObj.TravelCategory = this.userObj.TravelPurpose = 'Dependent Travel';
            this.getIsDisabled();
            for (var j = 0; j < this.DependentAdd.length; j++) {
                var ele = this.DependentAdd[j];
                for (var i = 0; i < this.tripDeatilsArray.length; i++) {
                    if (ele.PassportExpiryDate < this.tripDeatilsArray[i].TravelDate) {
                        this.toaster.errorToastr(" Travel Date should be on (or) before dependent passport expiry date");
                        setTimeout(function () {
                            _this.tripDeatilsArray[i].TravelDate = null;
                        }, 50);
                        this.tripDeatilsArray[i].DependSixMnt = false;
                    }
                    else {
                        if (this.tripDeatilsArray[i].TravelDate >= ele.DepndPassportExpDate) {
                            this.tripDeatilsArray[i].DependSixMnt = true;
                        }
                    }
                    var data = this.tripDeatilsArray.filter(function (x) { return x.DependSixMnt === true; });
                    this.DependSixMnt = data.length ? true : false;
                }
            }
            if (this.userObj.TravelType === "International") {
                this.isPasswordExpireInSixMnt = false;
                this.DependentArrayView.forEach(function (dependent) {
                    dependent.TypeofVisa = dependent.Selected ? "Dependent Visa" : "";
                    if (dependent.Selected && dependent.VisaStatus === "Submitted") {
                        dependent.VisaStatus = "";
                    }
                });
            }
        }
        if (this.userObj.TravelType === "International") {
            this.isShow = true;
        }
    };
    // onChangeTravelFor(eve) {
    //   if (eve.target.value === "Self along with Dependents") {
    //     this.isDependent = true;
    //     if (this.userObj.TravelType === "International") {
    //       if (this.userObj.Travel_x005f_x0020_x005f_For === "Self") {
    //         for (var i = 0; i < this.tripDeatilsArray.length; i++) {
    //           if (this.userObj.PassportExpiryDate <= this.tripDeatilsArray[i].TravelDate) {
    //             this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
    //             this.toaster.errorToastr("Travel Date should be on (or) before passport expiry date");
    //             setTimeout(() => {
    //               this.tripDeatilsArray[i].TravelDate = null;
    //             }, 300);
    //             const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
    //             this.isPasswordExpireInSixMnt = data.length ? true : false;
    //           } else {
    //             if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
    //               this.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
    //             }
    //             else {
    //               this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
    //             }
    //             const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
    //             this.isPasswordExpireInSixMnt = data.length ? true : false;
    //           }
    //         }
    //       } else if (this.userObj.Travel_x005f_x0020_x005f_For === "Dependent") {
    //         for (var j = 0; j < this.DependentAdd.length; j++) {
    //           var ele = this.DependentAdd[j];
    //           for (var i = 0; i < this.tripDeatilsArray.length; i++) {
    //             if (ele.PassportExpiryDate <= this.tripDeatilsArray[i].TravelDate) {
    //               this.toaster.errorToastr(" Travel Date should be on (or) before dependent passport expiry date");
    //               setTimeout(() => {
    //                 this.tripDeatilsArray[i].TravelDate = null;
    //               }, 50);
    //               this.tripDeatilsArray[i].DependSixMnt = false
    //             }
    //             else {
    //               if (this.tripDeatilsArray[i].TravelDate >= ele.DepndPassportExpDate) {
    //                 this.tripDeatilsArray[i].DependSixMnt = true
    //               }
    //             }
    //             const data = this.tripDeatilsArray.filter(x => x.DependSixMnt === true);
    //             this.DependSixMnt = data.length ? true : false;
    //           }
    //         }
    //       } else {
    //         for (var i = 0; i < this.tripDeatilsArray.length; i++) {
    //           if (this.userObj.PassportExpiryDate <= this.tripDeatilsArray[i].TravelDate) {
    //             this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
    //             this.toaster.errorToastr("Travel Date should be on (or) before passport expiry date");
    //             setTimeout(() => {
    //               this.tripDeatilsArray[i].TravelDate = null;
    //             }, 300);
    //             const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
    //             this.isPasswordExpireInSixMnt = data.length ? true : false;
    //           } else {
    //             if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
    //               this.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
    //             }
    //             else {
    //               this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
    //             }
    //             const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
    //             this.isPasswordExpireInSixMnt = data.length ? true : false;
    //           }
    //         }
    //         for (var j = 0; j < this.DependentAdd.length; j++) {
    //           var ele = this.DependentAdd[j];
    //           for (var i = 0; i < this.tripDeatilsArray.length; i++) {
    //             if (ele.PassportExpiryDate <= this.tripDeatilsArray[i].TravelDate) {
    //               this.toaster.errorToastr(" Travel Date should be on (or) before dependent passport expiry date");
    //               setTimeout(() => {
    //                 this.tripDeatilsArray[i].TravelDate = null;
    //               }, 50);
    //               this.tripDeatilsArray[i].DependSixMnt = false
    //             }
    //             else {
    //               if (this.tripDeatilsArray[i].TravelDate >= ele.DepndPassportExpDate) {
    //                 this.tripDeatilsArray[i].DependSixMnt = true
    //               }
    //             }
    //             const data = this.tripDeatilsArray.filter(x => x.DependSixMnt === true);
    //             this.DependSixMnt = data.length ? true : false;
    //           }
    //         }
    //       }
    //     }
    //   } else if (eve.target.value === "Self") {
    //     this.isDependent = false;
    //     this.DependSixMnt = false
    //     if (this.userObj.TravelType === "International" && this.userObj.Travel_x005f_x0020_x005f_For != "Dependent") {
    //       for (var i = 0; i < this.tripDeatilsArray.length; i++) {
    //         if (this.userObj.PassportExpiryDate <= this.tripDeatilsArray[i].TravelDate) {
    //           this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
    //           this.toaster.errorToastr("Travel Date should be on (or) before passport expiry date");
    //           setTimeout(() => {
    //             this.tripDeatilsArray[i].TravelDate = null;
    //           }, 300);
    //           const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
    //           this.isPasswordExpireInSixMnt = data.length ? true : false;
    //         } else {
    //           if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
    //             this.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
    //           }
    //           else {
    //             this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
    //           }
    //           const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
    //           this.isPasswordExpireInSixMnt = data.length ? true : false;
    //         }
    //       }
    //     }
    //   }
    //   else {
    //     this.isDependent = true;
    //     this.DependSixMnt = false
    //     for (var j = 0; j < this.DependentAdd.length; j++) {
    //       var ele = this.DependentAdd[j];
    //       for (var i = 0; i < this.tripDeatilsArray.length; i++) {
    //         if (ele.PassportExpiryDate <= this.tripDeatilsArray[i].TravelDate) {
    //           this.toaster.errorToastr(" Travel Date should be on (or) before dependent passport expiry date");
    //           setTimeout(() => {
    //             this.tripDeatilsArray[i].TravelDate = null;
    //           }, 50);
    //           this.tripDeatilsArray[i].DependSixMnt = false
    //         }
    //         else {
    //           if (this.tripDeatilsArray[i].TravelDate >= ele.DepndPassportExpDate) {
    //             this.tripDeatilsArray[i].DependSixMnt = true
    //           }
    //         }
    //         const data = this.tripDeatilsArray.filter(x => x.DependSixMnt === true);
    //         this.DependSixMnt = data.length ? true : false;
    //       }
    //     }
    //     if (this.userObj.TravelType === "International") {
    //       this.isPasswordExpireInSixMnt = false;
    //     }
    //   }
    // }
    EditTravelComponent.prototype.onTravelCate = function (obj) {
        this.purposeOfProject = this.informService.TravelPurpose.filter(function (x) { return x.TCId == obj.Id; });
        if (this.userObj && this.userObj.Travel_x005f_x0020_x005f_For !== 'Dependent') {
            var temp = this.purposeOfProject.find(function (eleme) { return eleme.name == "Dependent Travel"; });
            if (temp) {
                Object(lodash__WEBPACK_IMPORTED_MODULE_9__["remove"])(this.DeliverySource, temp);
            }
        }
    };
    EditTravelComponent.prototype.NavTravelRequest = function () {
        this.router.navigate(["/"]);
    };
    EditTravelComponent.prototype.GetDependentsList = function () {
        var _this = this;
        this.informService.GetDependents().then(function (res) {
            _this.DependentArrayView = res;
            if (_this.DependentArrayView && _this.DependentArrayView.length > 0) {
                _this.DependentArrayView.forEach(function (item) {
                    item.Selected = false;
                    item.DOBPassport = new Date(item.DOBPassport);
                    item.PassportExpiryDate = new Date(item.PassportExpiryDate);
                });
            }
        });
    };
    EditTravelComponent.prototype.onChange = function (date) {
        this.userObj.VisaValidTill = date;
    };
    EditTravelComponent.prototype.Edit = function (form, template, PANNoUpdatePopup) {
        var _this = this;
        this.submitted = true;
        this.clicked = false;
        if ((this.userObj.AdvanceRequired == 'true' || this.userObj.AdvanceRequired === true) && !this.userObj.PANNumber) {
            this.toaster.warningToastr("Update PAN Number");
            this.bsModalRef = this.modalService.show(PANNoUpdatePopup, this.config);
            return;
        }
        if ((this.userObj.ClientDebit == 'true' || this.userObj.ClientDebit === true) && this.DebitDocs.length > 0 && this.DebitDocsToUpload.length < 1) {
            this.toaster.warningToastr("Choose atleast one file for client debit or remove all empty grids");
            return;
        }
        if (form.valid && this.userObj.TripType && this.userObj.TripType != "") {
            if ((this.userObj.Travel_x005f_x0020_x005f_For === "Self along with Dependents" && this.DependentAdd.length == 0 && (form.value.TravelType === "International" || form.value.TravelType === "Domestic"))
                || this.userObj.Travel_x005f_x0020_x005f_For === "Dependent" && this.DependentAdd.length == 0 && (form.value.TravelType === "International" || form.value.TravelType === "Domestic")) {
                this.toaster.errorToastr("Please choose Dependents");
            }
            else {
                if (form.value.TravelType == "International" && (form.value.Travel_x005f_x0020_x005f_For === "Dependent" || form.value.Travel_x005f_x0020_x005f_For === "Self along with Dependents")) {
                    this.DependentAdd.forEach(function (item) {
                        var matchedDependent = _this.DependentArrayView.find(function (value) { return value.GivenName === item.GivenName && value.SurName === item.SurName; });
                        item.VisaValidTill = matchedDependent.VisaValidTill ? matchedDependent.VisaValidTill : null;
                        item.VisaNumber = matchedDependent.VisaNo;
                        item.VisaStatus = matchedDependent.VisaStatus;
                        item.TypeofVisa = matchedDependent.TypeofVisa;
                        if (item.VisaNo) {
                            delete item.VisaNo;
                        }
                    });
                }
                if (form.value.TravelType == "International" && form.value.Travel_x005f_x0020_x005f_For != "Dependent") {
                    for (var i = 0; i < this.tripDeatilsArray.length; i++) {
                        this.tripDeatilsArray[i].TravelDate = new Date(this.tripDeatilsArray[i].TravelDate);
                        if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
                            this.isPasswordExpireInSixMnt = true;
                        }
                        else {
                            this.isPasswordExpireInSixMnt = false;
                        }
                    }
                    var AmountPaid = 0.0;
                    if (form.value.AdvanceRequired == "true") {
                        for (var i = 0; i < this.AdvanceDetails.length; i++) {
                            if (this.AdvanceDetails[i].Cash > 0 ||
                                this.AdvanceDetails[i].Card > 0) {
                                this.checkAdvanceRequired = true;
                            }
                            else {
                                this.toaster.errorToastr("Please enter the amount in advance required field");
                                this.checkAdvanceRequired = false;
                                break;
                            }
                        }
                    }
                    if (form.value.AdvanceRequired == "true" &&
                        this.checkAdvanceRequired === true) {
                        if (form.value.TripType == "MultiCity") {
                            if (this.tripDeatilsArray.length > 1) {
                                this.bsModalRef = this.modalService.show(template, this.config);
                                this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                                this.userObject.resultObj = this.userObj;
                                this.userObject.AdvanceDetails = this.AdvanceDetails;
                                if (form.value.Travel_x005f_x0020_x005f_For == "Dependent" ||
                                    form.value.Travel_x005f_x0020_x005f_For == "Self along with Dependents") {
                                    this.userObject.DependentAdd = this.DependentAdd;
                                }
                                else {
                                    this.userObject.DependentAdd = [];
                                }
                            }
                            else {
                                this.toaster.errorToastr("Multi City travel applicable for minimum 2 trip");
                            }
                        }
                        else {
                            this.bsModalRef = this.modalService.show(template, this.config);
                            this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                            this.userObject.resultObj = this.userObj;
                            this.userObject.AdvanceDetails = this.AdvanceDetails;
                            if (form.value.Travel_x005f_x0020_x005f_For == "Dependent" ||
                                form.value.Travel_x005f_x0020_x005f_For == "Self along with Dependents") {
                                this.userObject.DependentAdd = this.DependentAdd;
                            }
                            else {
                                this.userObject.DependentAdd = [];
                            }
                        }
                    }
                    else if (form.value.AdvanceRequired == "false") {
                        if (form.value.TripType == "MultiCity") {
                            if (this.tripDeatilsArray.length > 1) {
                                this.bsModalRef = this.modalService.show(template, this.config);
                                this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                                this.userObject.resultObj = this.userObj;
                                this.userObject.AdvanceDetails = [];
                                if (form.value.Travel_x005f_x0020_x005f_For == "Dependent" ||
                                    form.value.Travel_x005f_x0020_x005f_For == "Self along with Dependents") {
                                    this.userObject.DependentAdd = this.DependentAdd;
                                }
                                else {
                                    this.userObject.DependentAdd = [];
                                }
                            }
                            else {
                                this.toaster.errorToastr("Multi City travel applicable for minimum 2 trip");
                            }
                        }
                        else {
                            this.bsModalRef = this.modalService.show(template, this.config);
                            this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                            this.userObject.resultObj = this.userObj;
                            this.userObject.AdvanceDetails = [];
                            if (form.value.Travel_x005f_x0020_x005f_For == "Dependent" ||
                                form.value.Travel_x005f_x0020_x005f_For == "Self along with Dependents") {
                                this.userObject.DependentAdd = this.DependentAdd;
                            }
                            else {
                                this.userObject.DependentAdd = [];
                            }
                        }
                    }
                }
                else {
                    if (form.value.TripType == "MultiCity") {
                        if (this.tripDeatilsArray.length > 1) {
                            this.bsModalRef = this.modalService.show(template, this.config);
                            this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                            this.userObject.resultObj = this.userObj;
                            this.userObject.AdvanceDetails = [];
                            if (form.value.Travel_x005f_x0020_x005f_For == "Dependent" ||
                                form.value.Travel_x005f_x0020_x005f_For == "Self along with Dependents") {
                                this.userObject.DependentAdd = this.DependentAdd;
                            }
                            else {
                                this.userObject.DependentAdd = [];
                            }
                        }
                        else {
                            this.toaster.errorToastr("Multi City travel applicable for minimum 2 trip");
                        }
                    }
                    else {
                        this.bsModalRef = this.modalService.show(template, this.config);
                        this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                        this.userObject.resultObj = this.userObj;
                        this.userObject.AdvanceDetails = [];
                        if (form.value.Travel_x005f_x0020_x005f_For == "Dependent" ||
                            form.value.Travel_x005f_x0020_x005f_For == "Self along with Dependents") {
                            this.userObject.DependentAdd = this.DependentAdd;
                        }
                        else {
                            this.userObject.DependentAdd = [];
                        }
                    }
                }
            }
        }
        else {
            this.toaster.errorToastr("Edit not valid");
        }
    };
    EditTravelComponent.prototype.TravelRequestAdd = function (Traveld) {
        var _this = this;
        this.clicked = true;
        delete this.userObject.resultObj.CostCenter;
        delete this.userObject.resultObj.OU;
        delete this.userObject.resultObj.FullBusinessUnit;
        delete this.userObject.resultObj.FullDeliveryUnit;
        if (this.userObject.resultObj.PANNumber || this.userObject.resultObj.PANNumber === null) {
            delete this.userObject.resultObj.PANNumber;
        }
        if (this.userObject.resultObj.firstLegIndex == null || this.userObject.resultObj.firstLegIndex == 0 || this.userObject.resultObj.firstLegIndex) {
            delete this.userObject.resultObj.firstLegIndex;
        }
        // this.userObject.resultObj.Age = this.userObject.resultObj.Age.toString();
        // var AccommodationRequired = (this.userObject.resultObj.AccommodationRequired =="true");
        // var AccommodationRequired = (this.userObject.resultObj.AccommodationRequired =="false");
        // var AdvanceRequired = (this.userObject.resultObj.AdvanceRequired =="true");
        // var AdvanceRequired = (this.userObject.resultObj.AdvanceRequired =="false");
        // var AnyDependentTravelling = (this.userObject.resultObj.AnyDependentTravelling =="true");
        // var AnyDependentTravelling = (this.userObject.resultObj.AnyDependentTravelling =="false");
        // var ClientDebit = (this.userObject.resultObj.ClientDebit =="true");
        // var ClientDebit = (this.userObject.resultObj.ClientDebit =="false");
        var EditsObjects = {
            Project: this.userObj.Project,
            ApprovalAuthority: this.userObj.ApprovalAuthority,
            ApproversSuperior: this.userObj.ApproversSuperior,
            TravelCategory: this.userObj.TravelCategory,
            Mobile: this.userObj.Mobile,
            TravelPurpose: this.userObj.TravelPurpose,
            TravelMeal: this.userObj.TravelMeal,
            AccommodationRequired: this.userObj.AccommodationRequired,
            ClientDebit: this.userObj.ClientDebit,
            AdvanceRequired: this.userObj.AdvanceRequired,
            // AnyDependentTravelling: this.userObj.AnyDependentTravelling,
            Travel_x0020_For: this.userObj.Travel_x005f_x0020_x005f_For,
            TravelType: this.userObj.TravelType,
            IdentityProof: this.userObj.IdentityProof,
            IDProofNumber: this.userObj.IDProofNumber,
            GivenName: this.userObj.GivenName,
            SurName: this.userObj.SurName,
            PassportNo: this.userObj.PassportNo,
            PassportExpiryDate: this.userObj.PassportExpiryDate,
            DateofBirth: this.userObj.DateofBirth,
            VisaStatus: this.userObj.VisaStatus,
            VisaValidTill: this.userObj.VisaValidTill ? this.userObj.VisaValidTill : null,
            TypeofVisa: this.userObj.TypeofVisa,
            VisaNo: this.userObj.VisaNo,
            TripType: this.userObj.TripType,
            ReportingDate: this.userObj.ReportingDate,
            DeviationReason: this.userObj.DeviationReason,
            ID: this.userObject.resultObj.ID,
            Title: this.userObject.resultObj.Title,
            IsProjectTravel: this.userObject.resultObj.IsProjectTravel,
        };
        this.userObject.EditsObjects = EditsObjects;
        if (this.userObj.TravelType === "International" && (((!this.initialVisaValidity && this.userObj.VisaValidTill) ||
            (this.initialVisaValidity && this.userObj.VisaValidTill && ((new Date(this.initialVisaValidity.toDateString()) > new Date(this.userObj.VisaValidTill.toDateString())) ||
                (new Date(this.initialVisaValidity.toDateString()) < new Date(this.userObj.VisaValidTill.toDateString()))))) ||
            ((!this.initialVisaNo && this.userObj.VisaNo) || (this.initialVisaNo && this.userObj.VisaNo && this.initialVisaNo != this.userObj.VisaNo)) ||
            ((!this.initialVisaType && this.userObj.TypeofVisa) || (this.initialVisaType && this.userObj.TypeofVisa && this.initialVisaType != this.userObj.TypeofVisa)))) {
            this.userObject.IsVisaValidityUpdated = true;
        }
        this.userObject.changedDependentsVisa = [];
        if (this.userObj.TravelType === "International" && this.DependentAdd.length > 0 && this.userObj.Travel_x005f_x0020_x005f_For !== "Self") {
            this.DependentAdd.forEach(function (dependent) {
                var oldData = _this.initialDependentAdd.find(function (item) { return item.GivenName === dependent.GivenName && item.SurName === dependent.SurName; });
                if (oldData) {
                    if ((((!oldData.VisaValidTill) && dependent.VisaValidTill) ||
                        (oldData.VisaValidTill && dependent.VisaValidTill &&
                            ((_this.getDateWithoutTime(new Date(oldData.VisaValidTill)) >
                                _this.getDateWithoutTime(new Date(dependent.VisaValidTill.toDateString()))) ||
                                (_this.getDateWithoutTime(new Date(oldData.VisaValidTill))
                                    < _this.getDateWithoutTime(new Date(dependent.VisaValidTill.toDateString())))))) ||
                        (((!oldData.VisaValidTill) && dependent.VisaNumber) || (oldData.VisaNumber && dependent.VisaNumber && oldData.VisaNumber != dependent.VisaNumber)) ||
                        ((!oldData.TypeofVisa && dependent.TypeofVisa) || (oldData.TypeofVisa && dependent.TypeofVisa && oldData.TypeofVisa != dependent.TypeofVisa))
                        || (oldData.VisaStatus != dependent.VisaStatus)) {
                        _this.userObject.changedDependentsVisa.push(dependent);
                    }
                }
                else {
                    _this.userObject.changedDependentsVisa.push(dependent);
                }
            });
        }
        var locationInfo = this.locationArrays.find(function (item) { return item.location == _this.userObject.tripDeatilsArray[0].To; });
        this.userObject.EditsObjects.Country = locationInfo ? locationInfo.country : "";
        this.userObject.EditsObjects.Region = locationInfo ? locationInfo.region : "";
        if (this.userObject.EditsObjects.ClientDebit === "true" || this.userObject.EditsObjects.ClientDebit === true) {
            if (this.DebitDocsToUpload.length > 0) {
                this.DebitDocsToUpload.forEach(function (item) {
                    _this.clientDebitFilesUploaded.push(item.name);
                });
            }
            this.userObject.EditsObjects.ClientDebitFileName = this.clientDebitFilesUploaded.length > 0 ? JSON.stringify(this.clientDebitFilesUploaded) : "";
        }
        else {
            this.userObject.EditsObjects.ClientDebitFileName = "";
            this.filesToRemove = this.DebitDocsToUpload = [];
        }
        this.userObject.trackerData = {
            ActualUserEmpID: this.informService.actualUserId,
            LoggedInUserEmpID: this.informService.Current.EmployeeID,
            ActivityPerformed: "Edit",
            TravelTicketNo: this.userObject.EditsObjects.ID,
            DeviationReason: this.userObject.EditsObjects.DeviationReason || "",
            IsSameUserLoggedIn: this.informService.actualUserId == this.informService.Current.EmployeeID ? true : false
        };
        this.informService
            .NewTravelRequestEdit(this.userObject, this.filesToRemove, this.DebitDocsToUpload)
            .then(function (res) {
            _this.idnumber = res;
            if (res) {
                _this.bsModalRef.hide();
                _this.bsModalRef.hide();
                _this.clicked = false;
                setTimeout(function () {
                    window.location.reload();
                    _this.router.navigate(["/"]);
                }, 2000);
                _this.toaster.successToastr("Travel request updated Successfully");
                _this.router.navigate(["/"]);
            }
            else {
                _this.toaster.errorToastr("Unable to raise travel request");
            }
        });
    };
    EditTravelComponent.prototype.navigate = function () {
        var _this = this;
        this.bsModalRef.hide();
        setTimeout(function () {
            window.location.reload();
            _this.router.navigate(["/"]);
        }, 2000);
        this.router.navigate(["/"]);
    };
    EditTravelComponent.prototype.TravelRequestCancel = function () {
        this.bsModalRef.hide();
        this.clicked = false;
    };
    EditTravelComponent.prototype.onTravelCategory = function (e) {
        this.purposeOfProject = [];
        this.userObj.TravelPurpose = "";
        this.purposeOfProject = this.informService.TravelPurpose.filter(function (x) { return x.TCId == e.item.Id; });
        if (this.userObj && this.userObj.Travel_x005f_x0020_x005f_For !== 'Dependent') {
            var temp = this.purposeOfProject.find(function (eleme) { return eleme.name == "Dependent Travel"; });
            if (temp) {
                Object(lodash__WEBPACK_IMPORTED_MODULE_9__["remove"])(this.DeliverySource, temp);
            }
        }
    };
    EditTravelComponent.prototype.OnCurrencyCheck = function (evt, routes, i) {
        this.AdvanceDetails[i].Card = 0;
        this.AdvanceDetails[i].Cash = 0;
        this.findcurrency = this.AdvanceDetails.filter(function (a) { return a.Currency === evt.value; });
        if (this.findcurrency.length > 1) {
            this.AdvanceDetails[i].Currency = "";
        }
        if (evt.item.travel_allow_card == true) {
            this.AdvanceDetails[i].carddisable = false;
        }
        if (evt.item.travel_allow_card == false) {
            this.AdvanceDetails[i].carddisable = true;
        }
        if (evt.item.travel_allow_cash == true) {
            this.AdvanceDetails[i].cashdisable = false;
        }
        if (evt.item.travel_allow_cash == false) {
            this.AdvanceDetails[i].cashdisable = true;
        }
    };
    EditTravelComponent.prototype.handleChange = function (evt) {
        var target = evt.target.value;
        if (target === "false" || target === false) {
            this.NoAccomdation = true;
        }
        else {
            this.NoAccomdation = false;
        }
    };
    EditTravelComponent.prototype.OnIdProof = function (eve) {
        this.myObj = this.TravelProfileArray[0];
        this.userObj.IDProofNumber = "";
        for (var _i = 0, _a = Object.entries(this.myObj); _i < _a.length; _i++) {
            var value = _a[_i];
            if (value["0"] === eve.item.key) {
                this.userObj.IDProofNumber = value["1"];
            }
        }
    };
    EditTravelComponent.prototype.visaStatus = function (eve) {
        if (eve.value === "Submitted" || eve.value === "On-arrival" || eve.value === "Return to home country") {
            if (eve.value === "On-arrival") {
                this.userObj.TypeofVisa = "On Arrival Visa";
                this.OnOnewayCheck();
            }
            if (eve.value === "Return to home country") {
                this.userObj.TypeofVisa = "Return to home country visa";
                this.OnOnewayCheck();
            }
            this.isVisaSubmitted = true;
            this.userObj.VisaValidTill = null;
            this.userObj.VisaNo = "";
        }
        else {
            this.isVisaSubmitted = false;
        }
    };
    EditTravelComponent.prototype.dependentVisaStatus = function (temp) {
        if (temp.VisaStatus === "Submitted" || temp.VisaStatus === "On-arrival" || temp.VisaStatus === "Return to home country") {
            temp.VisaValidTill = null;
            temp.VisaNo = "";
        }
    };
    EditTravelComponent.prototype.onLoadApproval = function (e) {
        var _this = this;
        this.TravelProjectList.push(e.item);
        if (this.userObject.TravelProjectList.length > 0) {
            this.userObject.TravelProjectList[0] = this.TravelProjectList;
        }
        else {
            this.userObject.TravelProjectList = this.TravelProjectList;
        }
        var Obj = this.TravelProjectList.find(function (x) { return x.projectoraclecode__c == e.item.projectoraclecode__c; });
        this.userObj.projectoraclecode__c = Obj.projectoraclecode__c;
        this.userObj.clientname__c = Obj.clientname__c;
        this.userObj.clientprismcode__c = Obj.clientprismcode__c;
        this.userObj.ApprovalAuthority = "";
        this.userObj.ApproversSuperior = "";
        this.userObj.TravelCategory = this.userObj.Travel_x005f_x0020_x005f_For === 'Dependent' ? 'Dependent Travel' : "";
        this.userObj.TravelPurpose = this.userObj.Travel_x005f_x0020_x005f_For === 'Dependent' ? 'Dependent Travel' : "";
        var isDMavailable = false;
        var isTPavailable = false;
        var FMSuperior;
        var FMSuperSuperior;
        var Account;
        if (e.item.accountmanagerprismcode__c != null ||
            e.item.accountmanagerprismcode__c != undefined) {
            Account = this.Hrinfo.find(function (el) { return e.item.accountmanagerprismcode__c == el.Title; });
            if (Account != null || Account != undefined) {
                this.userObj.AccountManager = Account.maveric_email_id;
            }
        }
        var FM = this.Hrinfo.find(function (el) { return _this.informService.Current.EmployeeID == el.Title; });
        if (FM != null || FM != undefined) {
            FMSuperior = this.Hrinfo.find(function (el) { return FM.functional_reporting_to == el.Title; });
            FMSuperSuperior = this.Hrinfo.find(function (el) { return FMSuperior.functional_reporting_to == el.Title; });
            this.userObj.ApprovalAuthority = FM.maveric_email_id;
        }
        if (FMSuperior != null || FMSuperior != undefined) {
            this.userObj.ApproversSuperior = FMSuperior.maveric_email_id;
        }
        if (e.item.deliverymanagerprismcode__c != null ||
            e.item.deliverymanagerprismcode__c != undefined) {
            this.DM = this.Hrinfo.find(function (el) { return e.item.deliverymanagerprismcode__c == el.Title; });
            if (this.TP != null || this.TP != undefined) {
                this.DMSuperior = this.Hrinfo.find(function (el) { return _this.DM.functional_reporting_to == el.Title; });
            }
            isDMavailable = true;
        }
        if (e.item.technicalpartnerprismcode__c != null ||
            e.item.technicalpartnerprismcode__c != undefined) {
            this.TP = this.Hrinfo.find(function (el) { return e.item.technicalpartnerprismcode__c == el.Title; });
            if (this.TP != null || this.TP != undefined) {
                this.TPSuperior = this.Hrinfo.find(function (el) { return _this.TP.functional_reporting_to == el.Title; });
            }
            isTPavailable = true;
        }
        // if (isDMavailable && isTPavailable) {
        //   this.userObj.ApprovalAuthority = this.DM.maveric_email_id;
        //   this.userObj.ApproversSuperior = this.TP.maveric_email_id;
        // }
        // if (!isDMavailable && isTPavailable) {
        //   this.userObj.ApprovalAuthority = this.TP.maveric_email_id;
        //   this.userObj.ApproversSuperior = this.TPSuperior.maveric_email_id;
        //   if (this.TP.maveric_email_id == this.informService.Current.MailID) {
        //     if (this.TPSuperior != null || this.TPSuperior != undefined) {
        //       this.TPSuperSuperiors = this.Hrinfo.find((el) => this.TPSuperior.functional_reporting_to == el.Title);
        //     }
        //     this.userObj.ApprovalAuthority = this.TPSuperior.maveric_email_id;
        //     this.userObj.ApproversSuperior = this.TPSuperSuperiors.maveric_email_id;
        //   }
        // }
        // if (isDMavailable && !isTPavailable) {
        //   if (this.DM.maveric_email_id == this.informService.Current.MailID) {
        //     this.userObj.ApprovalAuthority = this.DMSuperior.maveric_email_id;
        //     this.DMSuperiorSuper = this.Hrinfo.find((el) => this.DMSuperior.functional_reporting_to == el.Title);
        //     this.userObj.ApproversSuperior = this.DMSuperiorSuper.maveric_email_id;
        //   } else {
        //     this.userObj.ApprovalAuthority = this.DM.maveric_email_id;
        //     this.userObj.ApproversSuperior = this.DMSuperior.maveric_email_id;
        //   }
        // }
        // if (!isDMavailable && !isTPavailable) {
        //   this.userObj.ApprovalAuthority = FMSuperior.maveric_email_id;
        //   this.userObj.ApproversSuperior = FMSuperSuperior.maveric_email_id;
        // }
        // if (this.informService.Current.MailID == this.TP.maveric_email_id || this.userObj.ApprovalAuthority == this.userObj.ApproversSuperior || this.informService.Current.MailID == this.userObj.ApprovalAuthority || this.informService.Current.MailID == this.userObj.ApproversSuperior) {
        //   this.userObj.ApprovalAuthority = FMSuperior.maveric_email_id;
        //   this.userObj.ApproversSuperior = FMSuperSuperior.maveric_email_id;
        // }
        // if (this.userObj.ApprovalAuthority == null || this.userObj.ApprovalAuthority == undefined) {
        //   this.userObj.ApprovalAuthority = FMSuperior.maveric_email_id;
        // }
        // if (this.userObj.ApproversSuperior == null || this.userObj.ApproversSuperior == undefined) {
        //   this.userObj.ApproversSuperior = FMSuperSuperior.maveric_email_id;
        // }
        if (isDMavailable && isTPavailable) {
            if (this.DM.maveric_email_id == this.informService.Current.MailID) {
                this.userObj.ApprovalAuthority = this.TP.maveric_email_id;
                this.userObj.ApproversSuperior = this.TPSuperior.maveric_email_id;
            }
            else if (this.TP.maveric_email_id == this.informService.Current.MailID) {
                if (this.TPSuperior != null || this.TPSuperior != undefined) {
                    this.TPSuperSuperior = this.Hrinfo.find(function (el) { return _this.TPSuperior.functional_reporting_to == el.Title; });
                }
                this.userObj.ApprovalAuthority = this.TPSuperior.maveric_email_id;
                this.userObj.ApproversSuperior = this.TPSuperSuperior.maveric_email_id;
            }
            else {
                this.userObj.ApprovalAuthority = this.DM.maveric_email_id;
                this.userObj.ApproversSuperior = this.TP.maveric_email_id;
            }
        }
        else if (!isDMavailable && isTPavailable) {
            if (this.TP.maveric_email_id == this.informService.Current.MailID) {
                if (this.TPSuperior != null || this.TPSuperior != undefined) {
                    this.TPSuperSuperior = this.Hrinfo.find(function (el) { return _this.TPSuperior.functional_reporting_to == el.Title; });
                }
                this.userObj.ApprovalAuthority = this.TPSuperior.maveric_email_id;
                this.userObj.ApproversSuperior = this.TPSuperSuperior.maveric_email_id;
            }
            else {
                this.userObj.ApprovalAuthority = this.TP.maveric_email_id;
                this.userObj.ApproversSuperior = this.TPSuperior.maveric_email_id;
            }
        }
        else if (isDMavailable && !isTPavailable) {
            if (this.DM.maveric_email_id == this.informService.Current.MailID) {
                this.userObj.ApprovalAuthority = this.DMSuperior.maveric_email_id;
                this.DMSuperiorSuper = this.Hrinfo.find(function (el) { return _this.DMSuperior.functional_reporting_to == el.Title; });
                this.userObj.ApproversSuperior = this.DMSuperiorSuper.maveric_email_id;
            }
            else {
                this.userObj.ApprovalAuthority = this.DM.maveric_email_id;
                this.userObj.ApproversSuperior = this.DMSuperior && this.DMSuperior.maveric_email_id ? this.DMSuperior.maveric_email_id : "";
            }
        }
        else if (!isDMavailable && !isTPavailable) {
            this.userObj.ApprovalAuthority = FMSuperior.maveric_email_id;
            this.userObj.ApproversSuperior = FMSuperSuperior.maveric_email_id;
        }
        else {
            this.userObj.ApprovalAuthority = FMSuperior.maveric_email_id;
            this.userObj.ApproversSuperior = FMSuperSuperior.maveric_email_id;
        }
        if (this.userObj.ApprovalAuthority == this.userObj.ApproversSuperior ||
            this.informService.Current.MailID == this.userObj.ApprovalAuthority ||
            this.informService.Current.MailID == this.userObj.ApproversSuperior) {
            this.userObj.ApprovalAuthority = "";
            this.userObj.ApproversSuperior = "";
            this.toaster.errorToastr("unable to fetch approval details please contact administrator");
        }
        if (e.item.projectdepartmentname__c != null ||
            e.item.projectdepartmentname__c != undefined) {
            this.Delivery = this.Depart.find(function (eleme) { return eleme.Department_name == e.item.projectdepartmentname__c; });
        }
        if (this.Delivery && (this.Delivery.department_type_name != null ||
            this.Delivery.department_type_name != undefined)) {
            if (this.Delivery.department_type_name == "DELIVERY") {
                this.DeliverySource = this.informService.TravelCategory.filter(function (eleme) { return eleme.department_type_name == "DELIVERY"; });
                this.userObj.IsProjectTravel = true;
                if (e.item.cost_center_name__c) {
                    this.userObj.CostCenterOrCluster = e.item.cost_center_name__c;
                }
                else if (e.item.ProjectOrg_Str_name__c) {
                    var units = e.item.ProjectOrg_Str_name__c.split("-");
                    this.userObj.CostCenterOrCluster = units[units.length - 1];
                }
                else {
                    this.userObj.CostCenterOrCluster = "";
                }
            }
            else {
                this.DeliverySource = this.informService.TravelCategory.filter(function (eleme) { return eleme.department_type_name != "DELIVERY"; });
                this.userObj.IsProjectTravel = false;
                if (this.informService.Current.CostCenter) {
                    this.userObj.CostCenterOrCluster = this.informService.Current.CostCenter;
                }
                else if (this.informService.Current.OU) {
                    var units = this.informService.Current.OU.split("-");
                    this.userObj.CostCenterOrCluster = units && units.length > 0 ? Object(lodash__WEBPACK_IMPORTED_MODULE_9__["last"])(units) : "";
                }
                else {
                    this.userObj.CostCenterOrCluster = "";
                }
            }
            if (this.userObj && this.userObj.Travel_x005f_x0020_x005f_For !== 'Dependent') {
                Object(lodash__WEBPACK_IMPORTED_MODULE_9__["remove"])(this.DeliverySource, this.informService.TravelCategory.find(function (eleme) { return eleme.name == "Dependent Travel"; }));
            }
        }
    };
    // onChangeTravelType(e: any) {
    //   if (e.target.value === "International") {
    //     this.isShow = true;
    //     this.isShowDomestic = false;
    //     this.userObj.IdentityProof = "";
    //     this.userObj.IDProofNumber = "";
    //     if (this.userObj.Travel_x005f_x0020_x005f_For === "Self") {
    //       for (var i = 0; i < this.tripDeatilsArray.length; i++) {
    //         this.tripDeatilsArray[i].TravelDate = new Date(this.tripDeatilsArray[i].TravelDate);
    //         var ele = this.DependentAdd[i]
    //         if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
    //           this.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
    //         }
    //         else {
    //           this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
    //         }
    //         const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
    //         this.isPasswordExpireInSixMnt = data.length ? true : false;
    //       }
    //     } else if (this.userObj.Travel_x005f_x0020_x005f_For === "Dependent") {
    //       for (var j = 0; j < this.DependentAdd.length; j++) {
    //         var ele = this.DependentAdd[j];
    //         ele.PassportExpiryDate = new Date(ele.PassportExpiryDate)
    //         for (var i = 0; i < this.tripDeatilsArray.length; i++) {
    //           this.tripDeatilsArray[i].TravelDate = new Date(this.tripDeatilsArray[i].TravelDate);
    //           if (this.tripDeatilsArray[i].TravelDate >= ele.DepndPassportExpDate) {
    //             this.tripDeatilsArray[i].DependSixMnt = true
    //           }
    //         }
    //         const data = this.tripDeatilsArray.filter(x => x.DependSixMnt === true);
    //         this.DependSixMnt = data.length ? true : false;
    //       }
    //     } else {
    //       for (var j = 0; j < this.DependentAdd.length; j++) {
    //         var ele = this.DependentAdd[j];
    //         ele.PassportExpiryDate = new Date(ele.PassportExpiryDate)
    //         for (var i = 0; i < this.tripDeatilsArray.length; i++) {
    //           this.tripDeatilsArray[i].TravelDate = new Date(this.tripDeatilsArray[i].TravelDate);
    //           if (this.tripDeatilsArray[i].TravelDate >= ele.DepndPassportExpDate) {
    //             this.tripDeatilsArray[i].DependSixMnt = true
    //           }
    //         }
    //         const data = this.tripDeatilsArray.filter(x => x.DependSixMnt === true);
    //         this.DependSixMnt = data.length ? true : false;
    //       }
    //       for (var i = 0; i < this.tripDeatilsArray.length; i++) {
    //         this.tripDeatilsArray[i].TravelDate = new Date(this.tripDeatilsArray[i].TravelDate);
    //         var ele = this.DependentAdd[i]
    //         if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
    //           this.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
    //         }
    //         else {
    //           this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
    //         }
    //         const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
    //         this.isPasswordExpireInSixMnt = data.length ? true : false;
    //       }
    //     }
    //   } else {
    //     this.isPasswordExpireInSixMnt = false;
    //     this.isShowDomestic = true;
    //     this.isShow = false;
    //     this.userObj.VisaStatus = "";
    //     this.userObj.VisaValidTill = null;
    //     this.userObj.TypeofVisa = "";
    //     this.userObj.VisaNo = "";
    //     this.userObj.AdvanceRequired = "false";
    //     if (
    //       this.userObj.AdvanceRequired == "false" ||
    //       this.userObj.AdvanceRequired == false
    //     ) {
    //       this.isAdvance = false;
    //     }
    //   }
    // }
    EditTravelComponent.prototype.dependentOnOnewayCheck = function () {
        if (this.DependentArrayView[this.firstDependentIndex].TypeofVisa && this.DependentArrayView[this.firstDependentIndex].TypeofVisa !== "") {
            if (this.DependentArrayView[this.firstDependentIndex].TypeofVisa === "Work Visa" || this.DependentArrayView[this.firstDependentIndex].TypeofVisa === "Return to home country visa") {
                this.OnewayTripVisaType = false;
            }
            else {
                this.OnewayTripVisaType = true;
                if (this.userObj.TripType == 'RoundTrip' || this.userObj.TripType == 'MultiCity') {
                    this.isTableShow = true;
                }
                else {
                    this.isShowBtn = false;
                    this.isTableShow = false;
                    this.isDelete = false;
                    this.userObj.TripType = "";
                }
            }
        }
    };
    EditTravelComponent.prototype.selfOnOnewayCheck = function () {
        if (this.userObj.TypeofVisa && this.userObj.TypeofVisa !== "") {
            if (this.userObj.TypeofVisa === "Work Visa" || this.userObj.TypeofVisa === "Return to home country visa") {
                this.OnewayTripVisaType = false;
            }
            else {
                this.OnewayTripVisaType = true;
                if (this.userObj.TripType == 'RoundTrip' || this.userObj.TripType == 'MultiCity') {
                    this.isTableShow = true;
                }
                else {
                    this.isShowBtn = false;
                    this.isTableShow = false;
                    this.isDelete = false;
                    this.userObj.TripType = "";
                }
            }
        }
    };
    EditTravelComponent.prototype.OnOnewayCheck = function () {
        if (this.userObj.Travel_x005f_x0020_x005f_For === 'Dependent') {
            this.dependentOnOnewayCheck();
        }
        else {
            this.selfOnOnewayCheck();
        }
        this.getIsDisabled();
    };
    EditTravelComponent.prototype.getIsDisabled = function () {
        if (this.userObj.TravelType === "International" && (this.OnewayTripVisaType ||
            (this.userObj.Travel_x005f_x0020_x005f_For !== "Dependent" && this.userObj.TypeofVisa !== "Work Visa" &&
                this.userObj.TypeofVisa !== "Return to home country visa") || this.userObj.Travel_x005f_x0020_x005f_For === "Dependent")) {
            if (this.userObj.TripType === "OneWay") {
                this.userObj.TripType = "";
            }
            this.isTableShow = false;
            this.showOneWay = false;
        }
        else {
            this.showOneWay = true;
            if (this.userObj.TripType) {
                this.isTableShow = true;
            }
        }
    };
    EditTravelComponent.prototype.onRadioChange = function (e) {
        var _this = this;
        // this.minDate.setDate(new Date().getDate());
        this.getIsDisabled();
        this.minDate = new Date();
        if (e.target.value === "OneWay") {
            if (this.userObj.TravelType === "International") {
                if (this.userObj.TypeofVisa === "Work Visa" || this.userObj.TypeofVisa === "Return to home country visa" ||
                    (this.firstDependentIndex && this.DependentArrayView[this.firstDependentIndex].TypeofVisa === "Work Visa" || this.DependentArrayView[this.firstDependentIndex].TypeofVisa === "Return to home country visa")) {
                    if (this.RId !== null && this.tempTrip && this.tempTrip == "OneWay") {
                        this.informService.GetByRoutesId(this.userObj.ID).then(function (res) {
                            _this.tripDeatilsArray = res;
                            _this.isTableShow = true;
                        });
                    }
                    else {
                        this.tripDeatilsArray = [];
                        var obj = {
                            Form: "",
                            To: "",
                            TravelDate: null,
                            FirstPreferance: "",
                            SecondPreferance: "",
                            fromDisable: false,
                            toDisable: false,
                            TravelDateDisable: false,
                        };
                        this.tripDeatilsArray.push(obj);
                        this.isShowBtn = false;
                        this.isTableShow = true;
                        this.isDelete = false;
                        this.OnewayTripVisaType = false;
                    }
                }
                else {
                    this.OnewayTripVisaType = true;
                    this.userObj.TripType = "";
                    this.isTableShow = false;
                    this.isDelete = false;
                    this.isShowBtn = false;
                }
            }
            else {
                if (this.RId !== null && this.tempTrip && this.tempTrip == "OneWay") {
                    this.informService.GetByRoutesId(this.userObj.ID).then(function (res) {
                        _this.tripDeatilsArray = res;
                        _this.isTableShow = true;
                    });
                }
                else {
                    this.tripDeatilsArray = [];
                    var obj = {
                        Form: "",
                        To: "",
                        TravelDate: null,
                        FirstPreferance: "",
                        SecondPreferance: "",
                        fromDisable: false,
                        toDisable: false,
                        TravelDateDisable: false,
                    };
                    this.tripDeatilsArray.push(obj);
                    this.isShowBtn = false;
                    this.isTableShow = true;
                    this.isDelete = false;
                    this.OnewayTripVisaType = false;
                }
            }
        }
        if (e.target.value === "RoundTrip") {
            this.OnewayTripVisaType = false;
            if (this.RId !== null && this.tempTrip && this.tempTrip == "RoundTrip") {
                this.informService.GetByRoutesId(this.userObj.ID).then(function (res) {
                    _this.tripDeatilsArray = res;
                    _this.isTableShow = true;
                });
            }
            else {
                this.tripDeatilsArray = [];
                for (var i = 0; i < 2; i++) {
                    var obj = {
                        Form: "",
                        To: "",
                        TravelDate: null,
                        FirstPreferance: "",
                        SecondPreferance: "",
                        fromDisable: false,
                        toDisable: false,
                        TravelDateDisable: false,
                    };
                    this.tripDeatilsArray.push(obj);
                }
                this.isTableShow = true;
                this.isShowBtn = false;
                this.isDelete = false;
            }
        }
        if (e.target.value === "MultiCity") {
            this.OnewayTripVisaType = false;
            if (this.RId !== null && this.tempTrip && this.tempTrip == "MultiCity") {
                this.informService.GetByRoutesId(this.userObj.ID).then(function (res) {
                    _this.tripDeatilsArray = res;
                    _this.isTableShow = true;
                });
            }
            else {
                this.tripDeatilsArray = [];
                for (var i = 0; i < 1; i++) {
                    var obj = {
                        Form: "",
                        To: "",
                        TravelDate: null,
                        FirstPreferance: "",
                        SecondPreferance: "",
                        fromDisable: false,
                        toDisable: false,
                        TravelDateDisable: false,
                    };
                    this.tripDeatilsArray.push(obj);
                }
                this.isTableShow = true;
                this.isShowBtn = true;
                this.isDelete = true;
            }
        }
    };
    EditTravelComponent.prototype.addNeRow = function (evt, tripDeatilsArray, i) {
        var obj = {
            Form: "",
            To: "",
            TravelDate: null,
            FirstPreferance: "",
            SecondPreferance: "",
            fromDisable: false,
            toDisable: false,
            TravelDateDisable: false,
        };
        this.tripDeatilsArray.push(obj);
        if (this.tripDeatilsArray.length > 0) {
            this.tripDeatilsArray[this.tripDeatilsArray.length - 1].Form = this.tripDeatilsArray[this.tripDeatilsArray.length - 2].To;
            // this.tripDeatilsArray[this.tripDeatilsArray.length - 1].fromDisable = true;
        }
        // this.tripDeatilsArray[i].Actions = 'New';
    };
    EditTravelComponent.prototype.addNeRowCurrency = function (evt, AdvanceDetails, i) {
        this.clicked = true;
        var obj = { Currency: "", Card: 0, Cash: 0, Amount: 0 };
        this.AdvanceDetails.push(obj);
        // this.AdvanceDetails[i].Actions = 'New';
    };
    EditTravelComponent.prototype.deleteNeRowCurrency = function () {
        if (this.AdvanceDetails.length > 1) {
            this.AdvanceDetails.splice(-1, 1);
        }
    };
    EditTravelComponent.prototype.deleteNeRow = function () {
        if (this.tripDeatilsArray.length >= 1) {
            this.tripDeatilsArray.splice(-1, 1);
            this.minDate = this.tripDeatilsArray[this.tripDeatilsArray.length - 1].TravelDate;
        }
    };
    EditTravelComponent.prototype.ondependentTravelChange = function (e) {
        if (e.target.value === "true") {
            this.isDependent = true;
        }
        else {
            this.isDependent = false;
        }
    };
    EditTravelComponent.prototype.OnTravelMode = function (event) {
        if (event.value === "Bus" || event.value === "Train") {
            this.flight = false;
        }
        else {
            this.flight = true;
        }
    };
    // checkedItems(temp: any, i: number) {
    //   let checklist: any = {};
    //   checklist = temp;
    //   if (checklist.Selected) {
    //     checklist.DOBPassport = new Date(checklist.DOBPassport);
    //     checklist.PassportExpiryDate = new Date(checklist.PassportExpiryDate);
    //     this.DependentAdd.push(checklist);
    //   } else {
    //     let index;
    //     index = this.DependentAdd.findIndex((a) => a.ID === checklist.ID);
    //     this.DependentAdd.splice(index, 1);
    //   }
    // }
    // checkedItems(temp: any) {
    //   let checklist: any = {};
    //   checklist = temp;
    //   if (checklist.Selected) {
    //     checklist.DOBPassport = new Date(checklist.DOBPassport);
    //     checklist.PassportExpiryDate = new Date(checklist.PassportExpiryDate);
    //     this.DependentAdd.push(checklist);
    //     if (this.tripDeatilsArray.length > 0) {
    //       for (var i = 0; i < this.DependentAdd.length; i++) {
    //         var ele = this.DependentAdd[i];
    //         for (var j = 0; j < this.tripDeatilsArray.length; j++) {
    //           var res = this.tripDeatilsArray[j];
    //           if (ele.PassportExpiryDate <= res.TravelDate) {
    //             this.toaster.errorToastr(" Travel Date should be on (or) before dependent passport expiry date");
    //             for (var d = j; d < this.tripDeatilsArray.length; d++) {
    //               this.tripDeatilsArray[d].TravelDate = null;
    //               this.tripDeatilsArray[d].DependSixMnt = false
    //             }
    //           }
    //           else {
    //             if (res.TravelDate >= ele.DepndPassportExpDate) {
    //               this.tripDeatilsArray[j].DependSixMnt = true
    //             }
    //           }
    //           const data = this.tripDeatilsArray.filter(x => x.DependSixMnt === true);
    //           this.DependSixMnt = data.length ? true : false;
    //         }
    //       }
    //     }
    //   } else {
    //     let index;
    //     index = this.DependentAdd.findIndex((a) => a.ID === checklist.ID);
    //     this.DependentAdd.splice(index, 1);
    //     if (this.DependentAdd.length > 0) {
    //       for (var i = 0; i < this.DependentAdd.length; i++) {
    //         for (var j = 0; j < this.tripDeatilsArray.length; j++) {
    //           if (this.tripDeatilsArray[j].TravelDate >= this.DependentAdd[i].DepndPassportExpDate) {
    //             this.tripDeatilsArray[j].DependSixMnt = true
    //           }
    //         }
    //       }
    //     } else {
    //       for (var j = 0; j < this.tripDeatilsArray.length; j++) {
    //         this.tripDeatilsArray[j].DependSixMnt = false
    //       }
    //     }
    //     const data = this.tripDeatilsArray.filter(x => x.DependSixMnt === true);
    //     this.DependSixMnt = data.length ? true : false;
    //   }
    // }
    EditTravelComponent.prototype.checkedItems = function (temp, index) {
        var checklist = {};
        if (temp.Selected && this.userObj.TravelType === 'International' && this.userObj.Travel_x005f_x0020_x005f_For !== "Self") {
            temp.TypeofVisa = "Dependent Visa";
        }
        checklist = temp;
        if (checklist.Selected) {
            checklist.DOBPassport = new Date(checklist.DOBPassport);
            checklist.PassportExpiryDate = new Date(checklist.PassportExpiryDate);
            this.DependentAdd.push(checklist);
            if (this.userObj.TravelType === 'International') {
                if (this.userObj.Travel_x005f_x0020_x005f_For === "Self") {
                    this.checkInterAssPass();
                }
                else if (this.userObj.Travel_x005f_x0020_x005f_For === "Dependent") {
                    if (this.firstDependentIndex >= 0) {
                        if (this.firstDependentIndex > index) {
                            this.firstDependentIndex = index;
                        }
                    }
                    else {
                        this.firstDependentIndex = this.DependentArrayView.findIndex(function (item) { return item.Selected; });
                    }
                    this.checkInterDepPass();
                }
                else {
                    this.checkInterDepPass();
                    this.checkInterAssPass();
                }
            }
        }
        else {
            if (this.firstDependentIndex == index) {
                this.firstDependentIndex = this.DependentArrayView.findIndex(function (item) { return item.Selected; });
            }
            if (temp.VisaValidTill) {
                temp.VisaValidTill = "";
            }
            if (temp.VisaStatus) {
                temp.VisaStatus = "";
            }
            if (temp.VisaNo) {
                temp.VisaNo = "";
            }
            if (temp.TypeofVisa) {
                temp.TypeofVisa = "";
            }
            var index1 = void 0;
            index1 = this.DependentAdd.findIndex(function (a) { return a.GivenName === checklist.GivenName && a.SurName === checklist.SurName; });
            if (index1 != -1) {
                this.DependentAdd.splice(index1, 1);
            }
            if (this.DependentAdd.length > 0) {
                for (var i = 0; i < this.DependentAdd.length; i++) {
                    for (var j = 0; j < this.tripDeatilsArray.length; j++) {
                        if (this.tripDeatilsArray[j].TravelDate >= this.DependentAdd[i].DepndPassportExpDate) {
                            this.tripDeatilsArray[j].DependSixMnt = true;
                        }
                    }
                }
            }
            else {
                for (var j = 0; j < this.tripDeatilsArray.length; j++) {
                    this.tripDeatilsArray[j].DependSixMnt = false;
                }
            }
            var data = this.tripDeatilsArray.filter(function (x) { return x.DependSixMnt === true; });
            this.DependSixMnt = data.length ? true : false;
        }
    };
    EditTravelComponent.prototype.onValueChange = function (event, tripDeatilsArray, i) {
        var _this = this;
        if (this.userObj.TravelType === "International") {
            var ind = this.tripDeatilsArray.findIndex(function (item) { return item.ReferenceLeg != null || item.ReferenceLeg != undefined; });
            if (((ind < 0 && i == 0) || (ind >= 0 && ind == i)) && this.userObj.VisaValidTill && event > this.userObj.VisaValidTill) {
                setTimeout(function () {
                    _this.tripDeatilsArray[i].TravelDate = "";
                }, 300);
                this.toaster.errorToastr("Travel date should be on (or) before visa valid till date");
            }
            if (this.userObj.Travel_x005f_x0020_x005f_For === 'Self along with Dependents' || this.userObj.Travel_x005f_x0020_x005f_For === 'Dependent') {
                if ((this.userObj.firstLegIndex && this.userObj.firstLegIndex == i) || (!this.userObj.firstLegIndex && i == 0)) {
                    if (this.DependentArrayView.length > 0) {
                        this.DependentArrayView.forEach(function (dependent) {
                            if (dependent.VisaValidTill && _this.getDateWithoutTime(event) > _this.getDateWithoutTime(dependent.VisaValidTill)) {
                                setTimeout(function () {
                                    _this.tripDeatilsArray[i].TravelDate = "";
                                }, 300);
                                _this.toaster.errorToastr("Travel date should be on (or) before dependent visa valid till date");
                            }
                        });
                    }
                }
            }
        }
        if (this.RId != null && this.RId != undefined && this.Appkey === "Reschedule") {
            if (i === 0) {
                if (this.tripDeatilsArray[i].ID == null || this.tripDeatilsArray[i].ID == undefined) {
                    this.tripDeatilsArray[i].Actions = "New";
                }
                else {
                    this.tripDeatilsArray[i].Actions = "Update";
                }
                if (this.userObj.TravelType === "International") {
                    if (this.userObj.Travel_x005f_x0020_x005f_For === "Self") {
                        this.checkAssoPasExp(i, event);
                    }
                    else if (this.userObj.Travel_x005f_x0020_x005f_For === "Dependent") {
                        this.checkDependentPasExp(i, event);
                    }
                    else {
                        this.checkDependentPasExp(i, event);
                        this.checkAssoPasExp(i, event);
                    }
                }
                // if (this.tripDeatilsArray[i].TravelDate === "" || this.tripDeatilsArray[i].TravelDate === null) {
                //   this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                //   const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
                //   this.isPasswordExpireInSixMnt = data.length ? true : false;
                // }
                this.minDate = new Date();
                if (this.userObj.IsProjectTravel) {
                    this.minDate.setHours(0);
                    this.minDate.setMinutes(0);
                    this.minDate.setSeconds(0);
                    this.minDate.setMilliseconds(0);
                    this.MaxDates = new Date(this.minDate.getTime() +
                        (this.userObj.IsProjectTravel ? 2 : 0) * (1000 * 60 * 60 * 24));
                    if (event < this.MaxDates && event >= this.minDate) {
                        this.isDeviation = true;
                        this.userObj.DeviationReason = "";
                        if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                            setTimeout(function () {
                                _this.userObj.ReportingDate = "";
                            }, 2000);
                            this.minidate = event;
                        }
                    }
                    else {
                        this.isDeviation = false;
                        this.userObj.DeviationReason = "";
                        this.userObj.IsDeviationRequest = false;
                        if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                            setTimeout(function () {
                                _this.userObj.ReportingDate = "";
                            }, 2000);
                            this.minidate = event;
                        }
                    }
                }
                else {
                    this.isDeviation = false;
                    this.userObj.DeviationReason = "";
                    this.userObj.IsDeviationRequest = false;
                    if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                        setTimeout(function () {
                            _this.userObj.ReportingDate = null;
                        }, 2000);
                        this.minidate = event;
                    }
                }
                if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                    setTimeout(function () {
                        _this.userObj.ReportingDate = null;
                    }, 2000);
                    this.minidate = event;
                }
                if (this.tripDeatilsArray[i].TravelDate.getTime() > this.tripDeatilsArray[i + 1].TravelDate.getTime()) {
                    for (var j = i + 1; j < this.tripDeatilsArray.length; j++) {
                        this.tripDeatilsArray[j].TravelDate = "";
                        this.tripDeatilsArray[j].DependSixMnt = false;
                        this.tripDeatilsArray[j].isPasswordExpireInSixMnt = false;
                        if (this.userObj.TravelType === "International") {
                            if (this.userObj.Travel_x005f_x0020_x005f_For === "Self") {
                                this.checkAssoPasExp(i, event);
                            }
                            else if (this.userObj.Travel_x005f_x0020_x005f_For === "Dependent") {
                                this.checkDependentPasExp(i, event);
                            }
                            else {
                                this.checkDependentPasExp(i, event);
                                this.checkAssoPasExp(i, event);
                            }
                        }
                        // if (this.tripDeatilsArray[i].TravelDate === "" || this.tripDeatilsArray[i].TravelDate === null) {
                        //   this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                        //   const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
                        //   this.isPasswordExpireInSixMnt = data.length ? true : false;
                        // }
                        return (this.minidate = event);
                    }
                }
            }
            else {
                if (this.tripDeatilsArray[i].ID == null ||
                    this.tripDeatilsArray[i].ID == undefined) {
                    this.tripDeatilsArray[i].Actions = "New";
                }
                else {
                    this.tripDeatilsArray[i].Actions = "Update";
                }
                if (this.userObj.TravelType === "International") {
                    if (this.userObj.Travel_x005f_x0020_x005f_For === "Self") {
                        this.checkAssoPasExp(i, event);
                    }
                    else if (this.userObj.Travel_x005f_x0020_x005f_For === "Dependent") {
                        this.checkDependentPasExp(i, event);
                    }
                    else {
                        this.checkDependentPasExp(i, event);
                        this.checkAssoPasExp(i, event);
                    }
                }
                if (this.tripDeatilsArray[i].TravelDate === "" || this.tripDeatilsArray[i].TravelDate === null) {
                    this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                    var data = this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
                    this.isPasswordExpireInSixMnt = data.length ? true : false;
                }
                if (this.tripDeatilsArray[i].TravelDate.getTime() > this.tripDeatilsArray[i + 1].TravelDate.getTime()) {
                    for (var j = i + 1; j < this.tripDeatilsArray.length; j++) {
                        this.tripDeatilsArray[j].TravelDate = "";
                        this.tripDeatilsArray[i].DependSixMnt = false;
                        this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                        if (this.userObj.TravelType === "International") {
                            if (this.userObj.Travel_x005f_x0020_x005f_For === "Self") {
                                this.checkAssoPasExp(i, event);
                            }
                            else if (this.userObj.Travel_x005f_x0020_x005f_For === "Dependent") {
                                this.checkDependentPasExp(i, event);
                            }
                            else {
                                this.checkDependentPasExp(i, event);
                                this.checkAssoPasExp(i, event);
                            }
                        }
                        // if (this.tripDeatilsArray[i].TravelDate === "" || this.tripDeatilsArray[i].TravelDate === null) {
                        //   this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                        //   const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
                        //   this.isPasswordExpireInSixMnt = data.length ? true : false;
                        // }
                        this.minidate = event;
                        return (this.minidate = event);
                    }
                }
            }
        }
        else {
            if (i === 0) {
                this.minDate = new Date();
                this.minDate.setHours(0);
                this.minDate.setMinutes(0);
                this.minDate.setSeconds(0);
                this.minDate.setMilliseconds(0);
                if (this.userObj.TravelType === "International") {
                    if (this.userObj.Travel_x005f_x0020_x005f_For === "Self") {
                        this.checkAssoPasExp(i, event);
                    }
                    else if (this.userObj.Travel_x005f_x0020_x005f_For === "Dependent") {
                        this.checkDependentPasExp(i, event);
                    }
                    else {
                        this.checkDependentPasExp(i, event);
                        this.checkAssoPasExp(i, event);
                    }
                }
                // if (this.tripDeatilsArray[i].TravelDate === "" || this.tripDeatilsArray[i].TravelDate === null) {
                //   this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                //   const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
                //   this.isPasswordExpireInSixMnt = data.length ? true : false;
                // }
                this.MaxDates = new Date(this.minDate.getTime() +
                    (this.userObj.IsProjectTravel ? 7 : 5) * (1000 * 60 * 60 * 24));
                if (event < this.MaxDates && event >= this.minDate) {
                    this.isDeviation = true;
                    if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                        setTimeout(function () {
                            _this.userObj.ReportingDate = "";
                        }, 2000);
                    }
                }
                else {
                    this.isDeviation = false;
                    this.userObj.DeviationReason = "";
                    if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                        setTimeout(function () {
                            _this.userObj.ReportingDate = "";
                        }, 2000);
                    }
                }
                if (this.tripDeatilsArray.length === 1) {
                    if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                        setTimeout(function () {
                            _this.userObj.ReportingDate = "";
                        }, 2000);
                    }
                    this.minidate = event;
                }
                else {
                    if (this.Appkey === "Mytravel") {
                    }
                    else {
                        for (var j = i + 1; j < this.tripDeatilsArray.length; j++) {
                            this.tripDeatilsArray[j].TravelDate = "";
                            this.tripDeatilsArray[j].DependSixMnt = false;
                            this.tripDeatilsArray[j].isPasswordExpireInSixMnt = false;
                            if (this.userObj.TravelType === "International") {
                                if (this.userObj.Travel_x005f_x0020_x005f_For === "Self") {
                                    this.checkAssoPasExp(i, event);
                                }
                                else if (this.userObj.Travel_x005f_x0020_x005f_For === "Dependent") {
                                    this.checkDependentPasExp(i, event);
                                }
                                else {
                                    this.checkDependentPasExp(i, event);
                                    this.checkAssoPasExp(i, event);
                                }
                            }
                            // if (this.tripDeatilsArray[i].TravelDate === "" || this.tripDeatilsArray[i].TravelDate === null) {
                            //   this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                            //   const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
                            //   this.isPasswordExpireInSixMnt = data.length ? true : false;
                            // } 
                            this.minidate = event;
                        }
                    }
                }
            }
            else {
                if (this.Appkey === "Mytravel") {
                }
                else {
                    for (var j = i + 1; j < this.tripDeatilsArray.length; j++) {
                        this.tripDeatilsArray[j].TravelDate = "";
                        this.tripDeatilsArray[j].DependSixMnt = false;
                        this.tripDeatilsArray[j].isPasswordExpireInSixMnt = false;
                    }
                    if (this.userObj.TravelType === "International") {
                        if (this.userObj.Travel_x005f_x0020_x005f_For === "Self") {
                            this.checkAssoPasExp(i, event);
                        }
                        else if (this.userObj.Travel_x005f_x0020_x005f_For === "Dependent") {
                            this.checkDependentPasExp(i, event);
                        }
                        else {
                            this.checkDependentPasExp(i, event);
                            this.checkAssoPasExp(i, event);
                        }
                    }
                    // if (this.tripDeatilsArray[i].TravelDate === "" || this.tripDeatilsArray[i].TravelDate === null) {
                    //   this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                    //   const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
                    //   this.isPasswordExpireInSixMnt = data.length ? true : false;
                    // }
                }
            }
        }
        if (this.userObj.ReportingDate && this.tripDeatilsArray[0].TravelDate && this.userObj.ReportingDate > this.tripDeatilsArray[0].TravelDate) {
            this.userObj.ReportingDate = "";
        }
    };
    EditTravelComponent.prototype.checkAssoPasExp = function (i, event) {
        var _this = this;
        if (this.userObj.PassportExpiryDate < event) {
            this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
            this.toaster.errorToastr("Travel Date should be on (or) before passport expiry date");
            setTimeout(function () {
                _this.tripDeatilsArray[i].TravelDate = null;
                if (_this.userObj.Travel_x005f_x0020_x005f_For === "Self along with Dependents") {
                    if (_this.isPasswordExpireInSixMnt === false) {
                        _this.tripDeatilsArray[i].DependSixMnt = false;
                        var data_1 = _this.tripDeatilsArray.filter(function (x) { return x.DependSixMnt === true; });
                        _this.DependSixMnt = data_1.length ? true : false;
                    }
                }
            }, 300);
            var data = this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
            this.isPasswordExpireInSixMnt = data.length ? true : false;
        }
        else {
            if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
                this.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
            }
            else {
                this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
            }
            var data = this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
            this.isPasswordExpireInSixMnt = data.length ? true : false;
        }
    };
    EditTravelComponent.prototype.checkDependentPasExp = function (i, event) {
        var _this = this;
        for (var j = 0; j < this.DependentAdd.length; j++) {
            var ele = this.DependentAdd[j];
            this.tripDeatilsArray[i].DependSixMnt = false;
            if (ele.PassportExpiryDate <= event) {
                this.tripDeatilsArray[i].DependSixMnt = false;
                this.toaster.errorToastr(" Travel Date should be on (or) before dependent passport expiry date");
                setTimeout(function () {
                    _this.tripDeatilsArray[i].TravelDate = null;
                    if (_this.userObj.Travel_x005f_x0020_x005f_For === "Self along with Dependents") {
                        if (_this.DependSixMnt === false) {
                            _this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                            var data_2 = _this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
                            _this.isPasswordExpireInSixMnt = data_2.length ? true : false;
                        }
                    }
                }, 50);
                this.tripDeatilsArray[i].DependSixMnt = false;
            }
            else {
                if (this.tripDeatilsArray[i].TravelDate >= ele.DepndPassportExpDate) {
                    this.tripDeatilsArray[i].DependSixMnt = true;
                }
            }
            var data = this.tripDeatilsArray.filter(function (x) { return x.DependSixMnt === true; });
            this.DependSixMnt = data.length ? true : false;
        }
    };
    EditTravelComponent.prototype.onChangeTravelType = function (e) {
        this.getIsDisabled();
        if (e.target.value === "International") {
            this.isShow = true;
            this.isShowDomestic = false;
            this.userObj.IdentityProof = "";
            this.userObj.IDProofNumber = "";
            if (this.userObj.Travel_x005f_x0020_x005f_For === "Self") {
                this.checkInterAssPass();
            }
            else if (this.userObj.Travel_x005f_x0020_x005f_For === "Dependent") {
                if (!this.firstDependentIndex) {
                    this.firstDependentIndex = this.DependentArrayView.findIndex(function (item) { return item.Selected; });
                }
                this.DependentArrayView.forEach(function (dependent) {
                    dependent.TypeofVisa = dependent.Selected ? "Dependent Visa" : "";
                });
                this.checkInterDepPass();
            }
            else {
                this.DependentArrayView.forEach(function (dependent) {
                    dependent.TypeofVisa = dependent.Selected ? "Dependent Visa" : "";
                });
                this.checkInterDepPass();
                this.checkInterAssPass();
            }
        }
        else {
            this.isPasswordExpireInSixMnt = false;
            this.DependSixMnt = false;
            this.isShowDomestic = true;
            this.isShow = false;
            this.userObj.VisaStatus = "";
            this.userObj.VisaValidTill = null;
            this.userObj.TypeofVisa = "";
            this.userObj.VisaNo = "";
            this.userObj.AdvanceRequired = "false";
            if (this.userObj.AdvanceRequired == "false" || this.userObj.AdvanceRequired == false) {
                this.isAdvance = false;
            }
        }
    };
    EditTravelComponent.prototype.checkInterAssPass = function () {
        var _this = this;
        for (var i = 0; i < this.tripDeatilsArray.length; i++) {
            if (this.tripDeatilsArray[i].TravelDate != null && this.tripDeatilsArray[i].TravelDate != "") {
                this.tripDeatilsArray[i].TravelDate = new Date(this.tripDeatilsArray[i].TravelDate);
                if (this.userObj.PassportExpiryDate < this.tripDeatilsArray[i].TravelDate) {
                    this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                    this.toaster.errorToastr("Travel Date should be on (or) before passport expiry date");
                    setTimeout(function () {
                        _this.tripDeatilsArray[i].TravelDate = null;
                        if (_this.userObj.Travel_x005f_x0020_x005f_For === "Self along with Dependents") {
                            _this.checkInterDepPass();
                        }
                    }, 10);
                    break;
                }
                else {
                    if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
                        this.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
                    }
                    else {
                        this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                    }
                }
            }
            else {
                this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
            }
            var data = this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
            this.isPasswordExpireInSixMnt = data.length ? true : false;
        }
    };
    EditTravelComponent.prototype.checkInterDepPass = function () {
        for (var j = 0; j < this.DependentAdd.length; j++) {
            var ele = this.DependentAdd[j];
            ele.PassportExpiryDate = new Date(ele.PassportExpiryDate);
            for (var k = 0; k < this.tripDeatilsArray.length; k++) {
                if (this.tripDeatilsArray[k].TravelDate != null && this.tripDeatilsArray[k].TravelDate != "" && this.tripDeatilsArray != undefined) {
                    this.tripDeatilsArray[k].TravelDate = new Date(this.tripDeatilsArray[k].TravelDate);
                    // this.tripDeatilsArray[k].DependSixMnt = false
                    if (ele.PassportExpiryDate < this.tripDeatilsArray[k].TravelDate) {
                        this.tripDeatilsArray[k].DependSixMnt = false;
                        this.toaster.errorToastr(" Travel Date should be on (or) before dependent passport expiry date");
                        for (var d = k; k < this.tripDeatilsArray.length; k++) {
                            this.tripDeatilsArray[d].TravelDate = null;
                            this.tripDeatilsArray[d].DependSixMnt = false;
                        }
                    }
                    else {
                        if (this.tripDeatilsArray[k].TravelDate >= ele.DepndPassportExpDate) {
                            this.tripDeatilsArray[k].DependSixMnt = true;
                        }
                    }
                }
                else {
                    this.tripDeatilsArray[k].DependSixMnt = false;
                }
                var data = this.tripDeatilsArray.filter(function (x) { return x.DependSixMnt === true; });
                this.DependSixMnt = data.length ? true : false;
            }
        }
    };
    EditTravelComponent.prototype.onFromCityChange = function (evt, routes, i) {
        if (this.tripDeatilsArray[i].Form === this.tripDeatilsArray[i].To) {
            this.tripDeatilsArray[i].Form = "";
        }
        if (this.userObj.TripType == "RoundTrip") {
            this.tripDeatilsArray[1].To = this.tripDeatilsArray[0].Form;
            this.tripDeatilsArray[1].Form = this.tripDeatilsArray[0].To;
            this.tripDeatilsArray[1].fromDisable = true;
            this.tripDeatilsArray[1].toDisable = true;
        }
        // if(this.tripDeatilsArray[i].ID == null || this.tripDeatilsArray[i].ID == undefined) {
        //   this.tripDeatilsArray[i].Actions = 'New';
        // } else {
        //   this.tripDeatilsArray[i].Actions = 'Update';
        // }
    };
    EditTravelComponent.prototype.onFirstChange = function (evt, routes, i) {
        // if (this.tripDeatilsArray[i].ID == null || this.tripDeatilsArray[i].ID == undefined) {
        //   this.tripDeatilsArray[i].Actions = 'New';
        // } else {
        //   this.tripDeatilsArray[i].Actions = 'Update';
        // }
        if (this.tripDeatilsArray[i].FirstPreferance ===
            this.tripDeatilsArray[i].SecondPreferance) {
            if (this.tripDeatilsArray[i].FirstPreferance === "No Preference") {
            }
            else {
                this.tripDeatilsArray[i].SecondPreferance = "";
            }
        }
        if (this.tripDeatilsArray[i].FirstPreferance === "No Preference") {
            this.tripDeatilsArray[i].SecondPreferance = "No Preference";
            this.tripDeatilsArray[i].fromDisable = true;
        }
        else {
            this.tripDeatilsArray[i].fromDisable = false;
        }
        if (this.tripDeatilsArray.length > 0) {
            if (this.tripDeatilsArray[this.tripDeatilsArray.length - 2].TravelDate.getTime() ===
                this.tripDeatilsArray[this.tripDeatilsArray.length - 1].TravelDate.getTime()) {
                if (this.tripDeatilsArray[this.tripDeatilsArray.length - 2]
                    .FirstPreferance ==
                    this.tripDeatilsArray[this.tripDeatilsArray.length - 1]
                        .FirstPreferance) {
                    this.tripDeatilsArray[this.tripDeatilsArray.length - 1].FirstPreferance = "";
                    this.tripDeatilsArray[this.tripDeatilsArray.length - 1].SecondPreferance = "";
                }
            }
        }
    };
    EditTravelComponent.prototype.onSecondChange = function (evt, routes, i) {
        // if (this.tripDeatilsArray[i].ID == null || this.tripDeatilsArray[i].ID == undefined) {
        //   this.tripDeatilsArray[i].Actions = 'New';
        // } else {
        //   this.tripDeatilsArray[i].Actions = 'Update';
        // }
        if (this.tripDeatilsArray[i].FirstPreferance ===
            this.tripDeatilsArray[i].SecondPreferance) {
            if (this.tripDeatilsArray[i].FirstPreferance === "No Preference") {
            }
            else {
                this.tripDeatilsArray[i].SecondPreferance = "";
            }
        }
        if (this.tripDeatilsArray[i].FirstPreferance === "No Preference") {
            this.tripDeatilsArray[i].SecondPreferance = "No Preference";
        }
    };
    EditTravelComponent.prototype.onToCityChange = function (evt, routes, i) {
        if (this.tripDeatilsArray[i].Form === this.tripDeatilsArray[i].To) {
            this.tripDeatilsArray[i].To = "";
        }
        if (this.userObj.TripType == "RoundTrip") {
            this.tripDeatilsArray[1].To = this.tripDeatilsArray[0].Form;
            this.tripDeatilsArray[1].Form = this.tripDeatilsArray[0].To;
        }
        if (this.userObj.TripType == "MultiCity") {
            if (this.tripDeatilsArray.length > 0 &&
                this.tripDeatilsArray[i] &&
                this.tripDeatilsArray[i + 1]) {
                this.tripDeatilsArray[i + 1].Form = this.tripDeatilsArray[i].To;
            }
        }
        // if(this.tripDeatilsArray[i].ID == null || this.tripDeatilsArray[i].ID == undefined) {
        //   this.tripDeatilsArray[i].Actions = 'New';
        // } else {
        //   this.tripDeatilsArray[i].Actions = 'Update';
        // }
    };
    EditTravelComponent.prototype.onAdvance = function (e, PANNoNotification) {
        if (e.target.value === "true" || e.target.value === true) {
            this.isAdvance = true;
            this.bsModalRef = this.modalService.show(PANNoNotification, this.configsm);
        }
        else {
            this.isAdvance = false;
        }
    };
    EditTravelComponent.prototype.typeaheadNoResults = function (event, key, i) {
        if (event) {
            if (key === "Project") {
                this.userObj.Project = "";
            }
            if (key === "DeviationReason") {
                this.userObj.DeviationReason = "";
            }
            if (key === "TravelCategory") {
                this.userObj.TravelCategory = "";
            }
            if (key === "TravelPurpose") {
                this.userObj.TravelPurpose = "";
            }
            if (key === "TravelMeal") {
                this.userObj.TravelMeal = "";
            }
            if (key === "IdentityProof") {
                this.userObj.IdentityProof = "";
            }
            if (key === "IDProofNumber") {
                this.userObj.IDProofNumber = "";
            }
            if (key === "VisaStatus") {
                this.userObj.VisaStatus = "";
            }
            if (key === "TypeofVisa") {
                this.userObj.TypeofVisa = "";
            }
            if (key === "Form") {
                this.tripDeatilsArray[i].Form = "";
            }
            if (key === "To") {
                this.tripDeatilsArray[i].To = "";
            }
            if (key === "FirstPreferance") {
                this.tripDeatilsArray[i].FirstPreferance = "";
            }
            if (key === "SecondPreferance") {
                this.tripDeatilsArray[i].SecondPreferance = "";
            }
            if (key === "TravelMode") {
                this.userObj.TravelMode = "";
            }
            if (key === "Flight") {
                this.userObj.Flight = "";
            }
            if (key === "VendorName") {
                this.userObj.VendorName = "";
            }
            if (key === "comments") {
                this.comments = "";
            }
            if (key === "Currency") {
                this.AdvanceDetails[i].Currency = "";
            }
        }
    };
    EditTravelComponent.prototype.cancel = function () {
        this.ngOnInit();
        this.router.navigate(["/"]);
    };
    EditTravelComponent.prototype.navigateBack = function (key) {
        if (key && key == 'PANNumber') {
            this.userObj.PANNumber = null;
        }
        this.bsModalRef.hide();
    };
    // onValueTrigger(e: any) {
    //   if (this.userObj.TravelType === 'International') {
    //     if (e > this.userObj.PassportExpiryDate) {
    //       this.toaster.errorToastr('Visa valid date exceeds the passport expiry date');
    //       setTimeout(() => {
    //         this.userObj.VisaValidTill = null;
    //       }, 300);
    //     }
    //     if (this.tripDeatilsArray.length > 0) {
    //       for (let i = 1; i <= this.tripDeatilsArray.length; i++) {
    //         if (e <= this.tripDeatilsArray[i - 1].TravelDate) {
    //           setTimeout(() => {
    //             this.tripDeatilsArray[i - 1].TravelDate = null;
    //           }, 300);
    //         }
    //       }
    //     }
    //   }
    // }
    // onValueTriggerReportingDate(ev: any) {
    //   if (this.userObj.TravelType === 'International') {
    //     if (ev < this.tripDeatilsArray[this.tripDeatilsArray.length - 1].TravelDate) {
    //       this.toaster.errorToastr('Reporting date exceeds the travel date');
    //       setTimeout(() => {
    //         this.userObj.ReportingDate = null;
    //       }, 300);
    //     }
    //   }
    // }
    // const isDate = this.calDateBetween(this.userObj.PassportExpiryDate, e);
    // if (isDate) {
    //   this.toaster.errorToastr('visa valid exceed the expiry date');
    //   setTimeout(() => {
    //     this.userObj.VisaValidTill = null;
    //   }, 300);
    // }
    // this.validatePassport1(e)
    // }
    // calDateBetween(date1, date2) {
    //   if (date1 < date2) {
    //     return true;
    //   }
    //   return false;
    // }
    // validatePassport(date) {
    //   setTimeout(() => {
    //     let iscount = false;
    //     this.tripDeatilsArray.forEach(trDate => {
    //       const isDate = this.calDateBetween(date, trDate.TravelDate);
    //       if (isDate) {
    //         iscount = true;
    //         trDate.TravelDate = null;
    //       }
    //     });
    //     const isDate = this.calDateBetween(date, this.userObj.VisaValidTill);
    //     if (isDate) {
    //       iscount = true;
    //       this.userObj.VisaValidTill = null;
    //     }
    //     if (iscount) {
    //       this.toaster.errorToastr('visa and travel vs passport');
    //     }
    //   }, 300);
    // }
    // validatePassport1(date) {
    //   setTimeout(() => {
    //   let iscount = false;
    //   this.tripDeatilsArray.forEach(trDate => {
    //     const isDate = this.calDateBetween(this.userObj.PassportExpiryDate, trDate.TravelDate);
    //     if (isDate) {
    //       iscount = true;
    //         trDate.TravelDate = null;
    //     }
    //   });
    //   if (iscount) {
    //     this.toaster.errorToastr('passport vs Travel date');
    //     return;
    //   }
    //   iscount = false;
    //   this.tripDeatilsArray.forEach(trDate => {
    //     const isDate = this.calDateBetween(this.userObj.VisaValidTill, trDate.TravelDate);
    //     if (isDate) {
    //       iscount = true;
    //         trDate.TravelDate = null;
    //     }
    //   });
    //   if (iscount) {
    //     this.toaster.errorToastr('Visa vs Travel date');
    //   }
    // }, 300);
    // }
    // onValueChange(Onvalue: Date, tripDeatilsArray: any, i: number, ): void {
    //   if (this.userObj.TravelType === 'International') {
    //     if (this.userObj.PassportExpiryDate <= Onvalue) {
    //       this.toaster.errorToastr('Travel Date exceeds the passport expiry date');
    //     }
    //     if (this.userObj.ReportingDate <= Onvalue) {
    //       this.toaster.errorToastr('Travel Date exceeds the reporting date');
    //       setTimeout(() => {
    //         this.tripDeatilsArray[i].TravelDate = null;
    //       }, 300);
    //     }
    //     if (i === this.tripDeatilsArray.indexOf(this.tripDeatilsArray[this.tripDeatilsArray.length - 1])) {
    //       if (this.userObj.VisaStatus == 'Obtained' && this.userObj.VisaValidTill <= Onvalue) {
    //         this.toaster.errorToastr('Travel Date exceeds the Visa valid date');
    //         setTimeout(() => {
    //           this.tripDeatilsArray[this.tripDeatilsArray.length - 1].TravelDate = null;
    //         }, 300);
    //       }
    //     }
    //   }
    //   // let dates: any
    //   // var minDates = dates.reduce(function (minDate, Onvalue) { return minDate < Onvalue ? minDate : Onvalue; });
    //   // var maxDates = dates.reduce(function (minDate, Onvalue) { return minDate > Onvalue ? minDate : Onvalue; });
    //   if (Onvalue) {
    //     this.minDate = Onvalue;
    //     // this.minidate = Onvalue;
    //   }
    //   if (this.tripDeatilsArray.length > 2) {
    //     this.tripDeatilsArray[this.tripDeatilsArray.length - 2].TravelDateDisable = true;
    //   }
    //   if (i != 0) { return; }
    //   if (Onvalue) {
    //     this.minidate = Onvalue;
    //     this.minDate = this.minDate;
    //   }
    //   this.minDate = new Date();
    //   this.minDate.setHours(0);
    //   this.minDate.setMinutes(0);
    //   this.minDate.setSeconds(0);
    //   this.minDate.setMilliseconds(0);
    //   if (this.RId != null && this.RId != undefined && this.Appkey === 'Reschedule') {
    //     if (this.userObj.TravelType === 'International') {
    //       if (this.userObj.PassportExpiryDate <= Onvalue) {
    //         this.toaster.errorToastr('Travel Date exceeds the passport expiry date');
    //       }
    //       if (this.userObj.ReportingDate <= Onvalue) {
    //         this.toaster.errorToastr('Travel Date exceeds the reporting date');
    //         setTimeout(() => {
    //           this.tripDeatilsArray[i].TravelDate = null;
    //         }, 300);
    //       }
    //     }
    //     this.minDate = new Date();
    //     if (this.userObj.IsProjectTravel) {
    //       this.minDate.setHours(0);
    //       this.minDate.setMinutes(0);
    //       this.minDate.setSeconds(0);
    //       this.minDate.setMilliseconds(0);
    //       this.MaxDates = new Date(this.minDate.getTime() + ((this.userObj.IsProjectTravel ? 2 : 0) * (1000 * 60 * 60 * 24)));
    //       if ((Onvalue < this.MaxDates) && (Onvalue >= this.minDate)) {
    //         this.isDeviation = true;
    //         this.userObj.DeviationReason = '';
    //       } else {
    //         this.isDeviation = false;
    //       }
    //       if (Onvalue) {
    //         this.minDate = Onvalue;
    //       }
    //     } else {
    //       this.isDeviation = false;
    //       if (Onvalue) {
    //         this.minDate = Onvalue;
    //       }
    //     }
    //   } else {
    //     this.MaxDates = new Date(this.minDate.getTime() + ((this.userObj.IsProjectTravel ? 7 : 5) * (1000 * 60 * 60 * 24)));
    //   }
    //   if ((Onvalue < this.MaxDates) && (Onvalue >= this.minDate)) {
    //     this.isDeviation = true;
    //     if (Onvalue) {
    //       this.minDate = Onvalue;
    //     }
    //   } else {
    //     this.isDeviation = false;
    //     if (Onvalue) {
    //       this.minDate = Onvalue;
    //     }
    //   }
    // }
    // checkAssoPasExp(i, event) {
    //   if (this.userObj.PassportExpiryDate <= event) {
    //     this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
    //     this.toaster.errorToastr("Travel Date should be on (or) before passport expiry date");
    //     setTimeout(() => {
    //       this.tripDeatilsArray[i].TravelDate = null;
    //     }, 300);
    //     const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
    //     this.isPasswordExpireInSixMnt = data.length ? true : false;
    //   } else {
    //     if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
    //       this.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
    //     }
    //     else {
    //       this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
    //     }
    //     const data = this.tripDeatilsArray.filter(x => x.isPasswordExpireInSixMnt === true);
    //     this.isPasswordExpireInSixMnt = data.length ? true : false;
    //   }
    // }
    // checkDependentPasExp(i, event) {
    //   for (var j = 0; j < this.DependentAdd.length; j++) {
    //     var ele = this.DependentAdd[j];
    //     if (ele.PassportExpiryDate <= event) {
    //       this.toaster.errorToastr(" Travel Date should be on (or) before dependent passport expiry date");
    //       setTimeout(() => {
    //         this.tripDeatilsArray[i].TravelDate = null;
    //       }, 50);
    //       this.tripDeatilsArray[i].DependSixMnt = false
    //     }
    //     else {
    //       if (this.tripDeatilsArray[i].TravelDate >= ele.DepndPassportExpDate) {
    //         this.tripDeatilsArray[i].DependSixMnt = true
    //       }
    //     }
    //     const data = this.tripDeatilsArray.filter(x => x.DependSixMnt === true);
    //     this.DependSixMnt = data.length ? true : false;
    //   }
    // }
    EditTravelComponent.prototype.getClass = function () {
        if (this.userObj.TravelType === "Domestic") {
            return true;
        }
        else {
            return false;
        }
    };
    EditTravelComponent.prototype.CancelBack = function () {
        this.router.navigate(["/"]);
    };
    EditTravelComponent.prototype.getMinDate = function (i) {
        if (i == 0) {
            return this.minDate;
        }
        else {
            return this.tripDeatilsArray[i - 1].TravelDate;
        }
    };
    EditTravelComponent.prototype.onValueTriggerReportingDate = function (ev) {
        var _this = this;
        if (this.tripDeatilsArray.length > 0) {
            if (ev < this.tripDeatilsArray[0].TravelDate) {
                this.toaster.errorToastr("Reporting date should be on (or) after onward travel date ");
                setTimeout(function () {
                    _this.userObj.ReportingDate = null;
                }, 300);
            }
        }
    };
    EditTravelComponent.prototype.numberOnly = function (event) {
        var charCode = event.which ? event.which : event.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }
        return true;
    };
    EditTravelComponent.prototype.number = function (event) {
        var charCode = event.which ? event.which : event.keyCode;
        if (charCode <= 126) {
            return false;
        }
        return true;
    };
    EditTravelComponent.prototype.focusout = function (event, key, i) {
        if (key == "Project") {
            this.findProject = this.common.filter(function (a) { return a.ProjectList === event.target.value; });
            if (this.findProject.length > 0) {
            }
            else {
                this.userObj.Project = "";
            }
        }
        if (key == "TravelCategory") {
            this.findTravelCategory = this.DeliverySource.filter(function (a) { return a.name === event.target.value; });
            if (this.findTravelCategory.length > 0) {
            }
            else {
                this.userObj.TravelCategory = "";
            }
        }
        if (key == "TravelPurpose") {
            this.findTravelPurpose = this.purposeOfProject.filter(function (a) { return a.name === event.target.value; });
            if (this.findTravelPurpose.length > 0) {
            }
            else {
                this.userObj.TravelPurpose = "";
            }
        }
        if (key == "TravelMeal") {
            this.findTravelMeal = this.informService.Meal.filter(function (a) { return a.name === event.target.value; });
            if (this.findTravelMeal.length > 0) {
            }
            else {
                this.userObj.TravelMeal = "";
            }
        }
        if (key == "IdentityProof") {
            this.findIdentityProof = this.informService.Proof.filter(function (a) { return a.name === event.target.value; });
            if (this.findIdentityProof.length > 0) {
            }
            else {
                this.userObj.IdentityProof = "";
            }
        }
        if (key == "VisaStatus") {
            this.findVisaStatus = this.informService.VisaStatus.filter(function (a) { return a.name === event.target.value; });
            if (this.findVisaStatus.length > 0) {
            }
            else {
                this.userObj.VisaStatus = "";
            }
        }
        if (key == "TypeofVisa") {
            this.findTypeofVisa = this.informService.TypeofVisa.filter(function (a) { return a.name === event.target.value; });
            if (this.findTypeofVisa.length > 0) {
            }
            else {
                this.userObj.TypeofVisa = "";
            }
        }
        if (key == "Currency") {
            this.findCurency = this.CurrancyType.filter(function (a) { return a.currency_types === event.target.value; });
            if (this.findCurency.length > 0) {
            }
            else {
                this.AdvanceDetails[i].Currency = "";
            }
        }
        if (key == "Form") {
            this.findForm = this.locationArrays.filter(function (a) { return a.location === event.target.value; });
            if (this.findForm.length > 0) {
            }
            else {
                this.tripDeatilsArray[i].Form = "";
            }
        }
        if (key == "To") {
            this.findTo = this.locationArrays.filter(function (a) { return a.location === event.target.value; });
            if (this.findTo.length > 0) {
            }
            else {
                this.tripDeatilsArray[i].To = "";
            }
        }
        if (key == "FirstPreferance") {
            this.findFirstPreferance = this.informService.TimeArray.filter(function (a) { return a.name === event.target.value; });
            if (this.findFirstPreferance.length > 0) {
            }
            else {
                this.tripDeatilsArray[i].FirstPreferance = "";
            }
        }
        if (key == "SecondPreferance") {
            this.findSecondPreferance = this.informService.TimeArray.filter(function (a) { return a.name === event.target.value; });
            if (this.findSecondPreferance.length > 0) {
            }
            else {
                this.tripDeatilsArray[i].SecondPreferance = "";
            }
        }
        if (key == "DeviationReason") {
            this.findDeviationReason = this.informService.DeviationReason.filter(function (a) { return a.name === event.target.value; });
            if (this.findDeviationReason.length > 0) {
            }
            else {
                this.userObj.DeviationReason = "";
            }
        }
        if (key == "VendorName") {
            this.findVendorName = this.informService.VendorInfo.filter(function (a) { return a.name === event.target.value; });
            if (this.findVendorName.length > 0) {
            }
            else {
                this.userObj.VendorName = "";
            }
        }
        if (key == "Costfor") {
            this.findCostfor = this.informService.Action.filter(function (a) { return a.name === event.target.value; });
            if (this.findCostfor.length > 0) {
            }
            else {
                this.CostUpdate.Costfor = "";
            }
        }
    };
    EditTravelComponent.prototype.showMoreInfo = function (template, index, isUserObj) {
        isUserObj ? this.selectedDependantIndex = -1 :
            this.selectedDependantIndex = index;
        this.bsModalRef = this.modalService.show(template, this.config);
    };
    EditTravelComponent.prototype.getDateWithoutTime = function (date) {
        if (date && date !== "") {
            return new Date(date.toDateString());
        }
    };
    EditTravelComponent.prototype.onVisaValidTillChange = function (item) {
        var _this = this;
        if (!this.userObj.firstLegIndex) {
            this.userObj.firstLegIndex = 0;
        }
        if (this.getDateWithoutTime(this.tripDeatilsArray[0].TravelDate) > this.getDateWithoutTime(item.VisaValidTill)) {
            setTimeout(function () {
                _this.tripDeatilsArray[0].TravelDate = "";
            }, 300);
            this.toaster.errorToastr("Travel date should be on (or) before dependent visa valid till date");
        }
    };
    EditTravelComponent.prototype.updatePANNumber = function () {
        var _this = this;
        if (this.userObj.PANNumber.trim().length > 0) {
            this.informService.UpdateTravelProfile({ Id: this.TravelProfileArray[0].Id, PANNumber: this.userObj.PANNumber }).then(function (res) {
                if (res) {
                    _this.toaster.successToastr("PAN Number saved successfully");
                    _this.bsModalRef.hide();
                }
                else {
                    _this.toaster.errorToastr("Changes in error");
                }
            });
        }
        else {
            this.toaster.errorToastr("Enter valid PAN Number");
        }
    };
    EditTravelComponent.prototype.showPANNoUpdatePopUp = function (PANNoUpdatePopup) {
        this.bsModalRef.hide();
        if (!this.userObj.PANNumber) {
            this.bsModalRef = this.modalService.show(PANNoUpdatePopup, this.configsm);
        }
    };
    EditTravelComponent.prototype.removeUploadedFiles = function (item, i) {
        this.userObject.clientDebitSrcFiles.splice(i, 1);
        this.filesToRemove.push(item);
    };
    EditTravelComponent.prototype.DebitDocsAddClicked = function () {
        this.DebitDocs.push({});
    };
    EditTravelComponent.prototype.handleDebitDocsInput = function (files, i) {
        if (files.item(0).size < 1000000) {
            if (this.DebitDocsToUpload.find(function (item) { return item.name === files.item(0).name; }) === undefined &&
                this.userObject.clientDebitSrcFiles.find(function (item) { return item.name === files.item(0).name; }) === undefined) {
                this.DebitDocsToUpload[i] = {
                    name: files.item(0).name,
                    content: files.item(0),
                };
            }
            else {
                this.toaster.errorToastr("File name already exist");
                this.DebitDocs[i] = {};
            }
        }
        else {
            this.toaster.errorToastr("File size should be less than a MB");
            this.DebitDocs[i] = {};
        }
    };
    EditTravelComponent.prototype.DebitDocRemove = function (i) {
        if (this.DebitDocs.length > 0) {
            this.DebitDocs.splice(i, 1);
            this.DebitDocsToUpload.splice(i, 1);
        }
    };
    EditTravelComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: "app-edit-travel",
            template: __webpack_require__(/*! ./edit-travel.component.html */ "./src/app/edit-travel/edit-travel.component.html"),
            styles: [__webpack_require__(/*! ./edit-travel.component.css */ "./src/app/edit-travel/edit-travel.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_6__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_7__["Router"],
            ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_5__["BsModalService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_7__["ActivatedRoute"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_8__["ToastrManager"]])
    ], EditTravelComponent);
    return EditTravelComponent;
}());



/***/ }),

/***/ "./src/app/feedback-restriction/feedback-restriction.component.css":
/*!*************************************************************************!*\
  !*** ./src/app/feedback-restriction/feedback-restriction.component.css ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".tagBorder {\r\n    border: 2px solid #efefef !important;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZmVlZGJhY2stcmVzdHJpY3Rpb24vZmVlZGJhY2stcmVzdHJpY3Rpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLG9DQUFvQztBQUN4QyIsImZpbGUiOiJzcmMvYXBwL2ZlZWRiYWNrLXJlc3RyaWN0aW9uL2ZlZWRiYWNrLXJlc3RyaWN0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudGFnQm9yZGVyIHtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkICNlZmVmZWYgIWltcG9ydGFudDtcclxufSJdfQ== */"

/***/ }),

/***/ "./src/app/feedback-restriction/feedback-restriction.component.html":
/*!**************************************************************************!*\
  !*** ./src/app/feedback-restriction/feedback-restriction.component.html ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n  <h4 class=\"card-header\">Restricted Users</h4>\r\n  <div class=\"row\">\r\n    <div class=\"col-md-5\"></div>\r\n    <div class=\"col-md-5 mt-3 mb-3\">\r\n        <tag-input [(ngModel)]=\"itemsAsObjectsValues\" placeholder=\"Add users\" class=\"tagBorder\" secondaryPlaceholder=\"+ Add users\"\r\n            [onlyFromAutocomplete]=\"onlyFromAutocomplete\" maxItems=\"100\" \r\n            [ngModelOptions]=\"{standalone: true}\">\r\n            <tag-input-dropdown [autocompleteItems]=\"filteredData\" [showDropdownIfEmpty] =\"false\"  [appendToBody]=\"false\"> \r\n              <ng-template let-item=\"item\"><span>{{item.value.Title}} - {{item.value.full_name}}</span></ng-template>\r\n            </tag-input-dropdown>\r\n        </tag-input>\r\n    </div>\r\n    <div class=\"col-md-2 mt-3 mb-3\">\r\n      <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                  (click)=\"add()\">Restrict</button>\r\n    </div>\r\n  </div>\r\n  <div class=\"card-body\">\r\n    <div class=\"mt-5\" *ngIf=\"sourceData.length == 0\">\r\n      <h5 class=\"text-center mt-5\">No data available</h5>\r\n    </div>\r\n    <div class=\"\" *ngIf=\"sourceData.length > 0\">\r\n      <table id=\"table1\" datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th> Employee Id </th>\r\n            <th> Name </th>\r\n            <th> Email Id </th>\r\n            <th class=\"text-center\"> Action </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let x of sourceData\">\r\n            <td>{{x.Title}}</td>\r\n            <td>{{x.full_name}}</td>\r\n            <td>{{x.maveric_email_id}}</td>\r\n            \r\n            <td class=\"text-center\">\r\n              <span class=\"pl-2\">\r\n                <button id=\"btnCancel\" type=\"button\" class=\"btn btn-danger px-4\"\r\n                  (click)=\"remove(x.ID)\">Remove</button>\r\n              </span>\r\n            </td>\r\n\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/feedback-restriction/feedback-restriction.component.ts":
/*!************************************************************************!*\
  !*** ./src/app/feedback-restriction/feedback-restriction.component.ts ***!
  \************************************************************************/
/*! exports provided: FeedbackRestrictionComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FeedbackRestrictionComponent", function() { return FeedbackRestrictionComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");






var FeedbackRestrictionComponent = /** @class */ (function () {
    function FeedbackRestrictionComponent(infoService, router, toaster) {
        this.infoService = infoService;
        this.router = router;
        this.toaster = toaster;
        this.dtOptions = {};
        this.sourceData = [];
        this.filteredData = [];
        this.filterKey = 'Travel Approved';
        this.searchKey = '';
        this.filterDropdown = [
            { value: "Travel Approved", displayName: "Travel Approved" },
            { value: "Booked", displayName: "Booked" },
            { value: "Reschedule Approved", displayName: "Reschedule Approved" },
            { value: "Rescheduled", displayName: "Rescheduled" },
            { value: "Cancellation Requested", displayName: "Cancellation Requested" },
            { value: "Cancelled", displayName: "Cancelled" },
            { value: "All", displayName: "All" }
        ];
        this.itemsAsObjects = [{ value: 1, display: 'Angular' }, { value: 2, display: 'React' }, { value: 3, display: 'Vue' }, { value: 4, display: 'Flask' }];
        this.itemsAsObjectsValues = [];
        this.onlyFromAutocomplete = false;
        this.displayItem = "display";
        this.identifyBy = "value";
        this.placeholder = "Add users";
    }
    FeedbackRestrictionComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dtOptions = {
            pagingType: 'full_numbers',
            pageLength: 10,
            paging: false,
            searching: false,
            info: false,
            ordering: false
        };
        this.infoService.GetCurrentUser(function () {
            _this.infoService.GetTravelProfileDetails().then(function (response) {
                if (!(response && response.length > 0)) {
                    _this.router.navigate(['/MyProfile']);
                    _this.toaster.successToastr('Please update your profile');
                }
            });
            _this.getData();
        });
    };
    FeedbackRestrictionComponent.prototype.add = function () {
        var _this = this;
        if (this.itemsAsObjectsValues.length > 0) {
            var count_1 = 0;
            this.itemsAsObjectsValues.forEach(function (item) {
                _this.infoService.updateRestriction(item.value.ID, true).then(function (res) {
                    count_1++;
                    if (count_1 === _this.itemsAsObjectsValues.length) {
                        _this.itemsAsObjectsValues = [];
                        _this.getData();
                    }
                });
            });
        }
    };
    FeedbackRestrictionComponent.prototype.remove = function (id) {
        var _this = this;
        this.infoService.updateRestriction(id, false).then(function () {
            _this.getData();
        });
    };
    FeedbackRestrictionComponent.prototype.getData = function () {
        var _this = this;
        this.infoService.GetFeedbackRestricted().then(function (result) {
            if (result && result.length > 0) {
                _this.sourceData = result;
                _this.sourceData = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["orderBy"])(_this.sourceData, "full_name", "asc");
            }
        });
        this.infoService.GetFeedbackNonRestricted().then(function (result) {
            if (result && result.length > 0) {
                _this.filteredData = result;
                _this.filteredData.map(function (item) { item.display = item.full_name, item.value = item; });
            }
        });
    };
    FeedbackRestrictionComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-feedback-restriction',
            template: __webpack_require__(/*! ./feedback-restriction.component.html */ "./src/app/feedback-restriction/feedback-restriction.component.html"),
            styles: [__webpack_require__(/*! ./feedback-restriction.component.css */ "./src/app/feedback-restriction/feedback-restriction.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_5__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__["ToastrManager"]])
    ], FeedbackRestrictionComponent);
    return FeedbackRestrictionComponent;
}());



/***/ }),

/***/ "./src/app/manage-country/manage-country.component.css":
/*!*************************************************************!*\
  !*** ./src/app/manage-country/manage-country.component.css ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".red {\n    background-color: red;\n}\n\n.green {\n    background-color: green;\n}\n\n.white-text {\n    color: white;\n}\n\nsup {\n    color: red;\n    font-size: 100%;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbWFuYWdlLWNvdW50cnkvbWFuYWdlLWNvdW50cnkuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLFlBQVk7QUFDaEI7O0FBQ0E7SUFDSSxVQUFVO0lBQ1YsZUFBZTtBQUNuQiIsImZpbGUiOiJzcmMvYXBwL21hbmFnZS1jb3VudHJ5L21hbmFnZS1jb3VudHJ5LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucmVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XG59XG5cbi5ncmVlbiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XG59XG5cbi53aGl0ZS10ZXh0IHtcbiAgICBjb2xvcjogd2hpdGU7XG59XG5zdXAge1xuICAgIGNvbG9yOiByZWQ7XG4gICAgZm9udC1zaXplOiAxMDAlO1xufSJdfQ== */"

/***/ }),

/***/ "./src/app/manage-country/manage-country.component.html":
/*!**************************************************************!*\
  !*** ./src/app/manage-country/manage-country.component.html ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\n  <h4 class=\"card-header\">Manage Country</h4>\n  <div class=\"row\">\n    <div class=\"col-md-7 mt-3 mb-3\"></div>\n\n    <div class=\"col-md-2 mt-3 mb-3\">\n      <button class=\"btn btn-primary px-4\" type=\"button\" (click)=\"openPopUp(countryPopup)\">Add Country</button>\n    </div>\n    <div class=\"col-md-2 mt-3 mb-3 ml-5\">\n      <input type=\"text\" autocomplete=\"off\" class=\"form-control\" name=\"searchKey\" [(ngModel)]=\"searchKey\"\n        placeholder=\"Search\" (ngModelChange)=\"searchKeyChanged()\" />\n    </div>\n  </div>\n  <div class=\"card-body\">\n    <div class=\"mt-5\" *ngIf=\"sourceData.length == 0\">\n      <h5 class=\"text-center mt-5\">No data available</h5>\n    </div>\n    <div class=\"\" *ngIf=\"sourceData.length > 0\">\n      <table id=\"table1\" datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\n        <thead>\n          <tr>\n            <th> S.No. </th>\n            <th> Country </th>\n            <th> Region </th>\n            <th class=\"text-center\"> Action </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let x of filteredData;let i=index\">\n            <td>{{i+1}}</td>\n            <td>{{x.Country}}</td>\n            <td>{{x.Region}}</td>\n            <td class=\"text-center\">\n              <span class=\"pl-2\" *ngIf=\"x.IsActive\">\n                <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\n                  (click)=\"edit(x,countryPopup)\">Edit</button>\n              </span>\n              <span class=\"pl-2\">\n                <button id=\"btnCancel\" type=\"button\" [innerText]=\"x.IsActive?'Deactivate':'Activate'\"\n                  [ngClass]=\"x.IsActive?'red':'green'\" class=\"btn px-4 white-text\"\n                  (click)=\"removeConfirmation(x, confirmationPopup)\"></button>\n              </span>\n            </td>\n\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n\n\n<ng-template #confirmationPopup>\n  <div class=\"modal-body confirm\">\n    <h5 class=\"modal-title text-center\">Are you sure you want to <span\n        [innerText]=\"deletingItem.IsActive ? 'deactivate':'activate'\"></span>?</h5>\n    <div class=\"row pt-3\">\n      <div class=\"col-md-5\"> </div>\n      <div class=\"col-md-1\" style=\"margin-right: 10px\">\n        <button type=\"submit\" class=\"btn btn-primary px-4\" (click)=\"remove()\">Yes</button>\n      </div>\n      <div class=\"col-md-1\" style=\"margin-right: 10px\" >\n        <button type=\"button\" class=\"btn btn-danger px-4\" (click)=\"denyRemoval()\">No</button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n\n<ng-template #countryPopup>\n  <div class=\"modal-header popup\">\n    <h5 class=\"modal-title text-center\">Add/Edit Country</h5>\n  </div>\n  <div class=\"modal-body\">\n    <form #a=\"ngForm\">\n      <div class=\"col-md-12 form-group\">\n        <label>Country Name</label>\n        <sup>\n          <span>*</span>\n        </sup>\n      </div>\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\n            style=\"text-transform: capitalize\" name=\"countryName\" [(ngModel)]=\"country.countryName\" placeholder=\"Country Name\"\n            #countryName=\"ngModel\" [ngClass]=\"{ 'is-invalid': (a.submitted || countryName.touched) && countryName.invalid }\"\n            required />\n          <div *ngIf=\"(a.submitted || countryName.touched) && countryName.invalid\" class=\"invalid-feedback\">\n            <div *ngIf=\"countryName.errors['required']\">Country Name is required</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-12 form-group\">\n        <label>Region</label>\n        <sup>\n          <span>*</span>\n        </sup>\n      </div>\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n\n            <input autocomple=\"off\" [(ngModel)]=\"country.region\" autocomplete=\"off\" name=\"region\" [typeahead]=\"regionList\"\n            #region=\"ngModel\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"RegionName\"\n            placeholder=\"Choose region\" class=\"form-control\"\n            [ngClass]=\"{ 'is-invalid': (a.submitted || region.touched) && region.invalid }\" required>\n\n          <div *ngIf=\"(a.submitted || region.touched) && region.invalid\" class=\"invalid-feedback\">\n            <div *ngIf=\"region.errors['required']\">Region is required</div>\n          </div>\n        </div>\n      </div>\n    \n\n      <div class=\"row text-center request\">\n        <button id=\"btnsub\" type=\"submit\" class=\"btn btn-primary px-3\" \n          (click)=\"submitCountry(a)\"  [disabled]=\"a.invalid\">Submit</button>\n        <button id=\"btnClear\" type=\"submit\" class=\"btn btn-danger px-4\" (click)=\"cancel()\">Cancel</button>\n      </div>\n    </form>\n  </div>\n</ng-template>"

/***/ }),

/***/ "./src/app/manage-country/manage-country.component.ts":
/*!************************************************************!*\
  !*** ./src/app/manage-country/manage-country.component.ts ***!
  \************************************************************/
/*! exports provided: ManageCountryComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ManageCountryComponent", function() { return ManageCountryComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm5/ngx-bootstrap-modal.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");







var ManageCountryComponent = /** @class */ (function () {
    function ManageCountryComponent(infoService, router, toaster, modalService) {
        this.infoService = infoService;
        this.router = router;
        this.toaster = toaster;
        this.modalService = modalService;
        this.dtOptions = {};
        this.sourceData = [];
        this.filteredData = [];
        this.searchKey = '';
        this.config = {
            backdrop: true,
            class: "modal-xl",
            ignoreBackdropClick: true,
        };
        this.mappingData = {};
        this.country = {};
    }
    ManageCountryComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dtOptions = {
            pagingType: 'full_numbers',
            pageLength: 10,
            paging: false,
            searching: false,
            info: false,
            ordering: false
        };
        this.infoService.GetCurrentUser(function () {
            _this.infoService.GetTravelProfileDetails().then(function (response) {
                if (!(response && response.length > 0)) {
                    _this.router.navigate(['/MyProfile']);
                    _this.toaster.successToastr('Please update your profile');
                }
            });
            _this.getRegions();
            _this.getData();
        });
    };
    ManageCountryComponent.prototype.getRegions = function () {
        var _this = this;
        this.infoService.GetAllRegions().then(function (res) {
            _this.regionList = res;
        });
    };
    ManageCountryComponent.prototype.getData = function () {
        var _this = this;
        this.infoService.getCountry().then(function (result) {
            if (result && result.length > 0) {
                _this.sourceData = result;
                _this.filteredData = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["cloneDeep"])(_this.sourceData);
            }
        });
    };
    ManageCountryComponent.prototype.filterKeyChanged = function () {
        this.searchKey = '';
    };
    ManageCountryComponent.prototype.searchKeyChanged = function () {
        var _this = this;
        if (this.searchKey && this.searchKey.trim().length > 0) {
            this.filteredData = this.filteredData.filter(function (s) {
                return (s.Country && (s.Country.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.Region && (s.Region.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0));
            });
        }
        else {
            this.filteredData = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["cloneDeep"])(this.sourceData);
        }
    };
    ManageCountryComponent.prototype.openPopUp = function (templatePopup) {
        this.bsModalRef = this.modalService.show(templatePopup, this.config);
    };
    ManageCountryComponent.prototype.cancel = function () {
        this.country = {};
        this.bsModalRef.hide();
    };
    ManageCountryComponent.prototype.edit = function (item, MapOfficerPopup) {
        this.country.ID = item.ID;
        this.country.countryName = item.Country,
            this.country.region = item.Region,
            this.bsModalRef = this.modalService.show(MapOfficerPopup, this.config);
    };
    ManageCountryComponent.prototype.removeConfirmation = function (item, confirmTemplate) {
        var _this = this;
        if (item.IsActive) {
            this.infoService.getCityByCountryId(item.ID).then(function (result) {
                if (result && result.length > 0) {
                    _this.toaster.errorToastr("Please deactivate all the cities in this country");
                }
                else {
                    _this.bsModalRef = _this.modalService.show(confirmTemplate, _this.config);
                    _this.deletingItem = item;
                }
            });
        }
        else {
            this.bsModalRef = this.modalService.show(confirmTemplate, this.config);
            this.deletingItem = item;
        }
    };
    ManageCountryComponent.prototype.remove = function () {
        var _this = this;
        var payload = {
            IsActive: !this.deletingItem.IsActive
        };
        this.infoService.updateCountry(payload, this.deletingItem.ID).then(function () {
            _this.getData();
            _this.denyRemoval();
            _this.deletingItem.IsActive ? _this.toaster.successToastr('Deactivated successfully') : _this.toaster.successToastr('Activated successfully');
        });
    };
    ManageCountryComponent.prototype.denyRemoval = function () {
        this.bsModalRef.hide();
        this.id = null;
    };
    ManageCountryComponent.prototype.submitCountry = function (form) {
        var _this = this;
        var isExist = this.sourceData.find(function (item) { return item.Country.toLowerCase().trim() === _this.country.countryName.toLowerCase().trim()
            && item.Region.toLowerCase().trim() === _this.country.region.toLowerCase().trim(); });
        if (isExist) {
            this.toaster.errorToastr("Already exist");
            return;
        }
        if (form.valid) {
            var payload = {
                Country: this.country.countryName,
                Region: this.country.region,
                RegionId: this.regionList.find(function (item) { return item.RegionName === _this.country.region; }).ID,
                IsActive: true
            };
            if (this.country.ID) {
                this.infoService
                    .updateCountry(payload, this.country.ID)
                    .then(function (res) {
                    _this.getData();
                    _this.cancel();
                    _this.toaster.successToastr('Updated successfully');
                });
            }
            else {
                this.infoService
                    .InsertCountry(payload)
                    .then(function (res) {
                    _this.getData();
                    _this.cancel();
                    _this.toaster.successToastr('Added successfully');
                });
            }
        }
        ;
    };
    ManageCountryComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-manage-country',
            template: __webpack_require__(/*! ./manage-country.component.html */ "./src/app/manage-country/manage-country.component.html"),
            styles: [__webpack_require__(/*! ./manage-country.component.css */ "./src/app/manage-country/manage-country.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_6__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__["ToastrManager"],
            ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_5__["BsModalService"]])
    ], ManageCountryComponent);
    return ManageCountryComponent;
}());



/***/ }),

/***/ "./src/app/myapproval/myapproval.component.css":
/*!*****************************************************!*\
  !*** ./src/app/myapproval/myapproval.component.css ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL215YXBwcm92YWwvbXlhcHByb3ZhbC5jb21wb25lbnQuY3NzIn0= */"

/***/ }),

/***/ "./src/app/myapproval/myapproval.component.html":
/*!******************************************************!*\
  !*** ./src/app/myapproval/myapproval.component.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n    <div class=\"card-body\">\r\n        <h4 class=\"card-header\" *ngIf=\"datatable == false && MyApproval && MyApproval.length > 0\">My Approvals</h4>\r\n        <h4 class=\"card-header\" *ngIf=\"datatable == true && MyApproval && MyApproval.length == 0\">My Approvals</h4>\r\n      <div class=\"mt-5\" *ngIf=\"datatable == true && MyApproval && MyApproval.length == 0\">\r\n        <h5 class=\"text-center mt-5\">No data available</h5>\r\n      </div>\r\n      <div *ngIf=\"datatable == false && MyApproval && MyApproval.length > 0\">\r\n        <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th> Request No</th>\r\n              <th> Associate Name</th>\r\n              <th> Project Name</th>\r\n              <th> Travel Type </th>\r\n              <th> Trip Type </th>\r\n              <th> From City</th>\r\n              <th> To City</th>\r\n              <th> Reporting Date</th>\r\n              <th> Travel Purpose </th>\r\n              <th> Travel Status </th>\r\n              <th class=\"text-center\"> Action </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr *ngFor=\"let i = index ; let x of MyApproval\">\r\n              <td>{{x.Id}}</td>\r\n              <td>{{x.EmployeeName}} ({{x.EmployeeID}})</td>\r\n              <!-- <td>{{x.projectoraclecode__c}} - {{x.Project}}</td> -->\r\n              <td>{{x.Project}}</td>\r\n              <td>{{x.TravelType}}</td>\r\n              <td>{{getTripText(x.TripType)}}</td>\r\n              <td>{{x.Form}}</td>\r\n              <td>{{x.To}}</td>\r\n              <td>{{x.ReportingDate | date: 'dd-MMM-yyyy'}}</td>\r\n              <td>{{x.TravelPurpose}}</td>\r\n              <td>{{x.TravelStatus}}</td>\r\n              <td class=\"text-center\">\r\n                <span>\r\n                  <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                    (click)=\"ToViewDetails('approval',x.GUID)\">View</button>\r\n                </span>\r\n                <!-- <span *ngIf=\"x.TravelStatus == 'Pending Approval' || x.TravelStatus == 'Reschedule Requested'\">\r\n                  <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                    (click)=\"ToViewDetails('approval',x.GUID)\">View</button>\r\n                </span> -->\r\n                <!-- <span *ngIf=\"x.TravelStatus != 'Pending Approval'\">\r\n                  <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                    (click)=\"ToViewDetails('approval',x.GUID)\" disabled>View</button>\r\n                </span> -->\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n"

/***/ }),

/***/ "./src/app/myapproval/myapproval.component.ts":
/*!****************************************************!*\
  !*** ./src/app/myapproval/myapproval.component.ts ***!
  \****************************************************/
/*! exports provided: MyapprovalComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MyapprovalComponent", function() { return MyapprovalComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm5/ngx-bootstrap-modal.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");






var MyapprovalComponent = /** @class */ (function () {
    function MyapprovalComponent(informService, router, toaster, modalService) {
        this.informService = informService;
        this.router = router;
        this.toaster = toaster;
        this.modalService = modalService;
        this.dtOptions = {};
        this.bsConfig = { dateInputFormat: this.informService.DateFormate, adaptivePosition: true, showWeekNumbers: false };
        this.MyApproval = [];
        this.userObj = {};
        this.pageShow = false;
        this.comments = '';
        this.GetmyTravelById = {};
        this.GetTravelProfileInitial = [];
        this.datatable = false;
        // this.informService.GetCurrentUser(() => {
        // });
        this.ProxyEmail = this.informService.getLocalStorage('ProxyEmail');
        if (this.ProxyEmail != null || this.ProxyEmail != undefined) {
            this.ProxyName = this.ProxyEmail;
        }
    }
    MyapprovalComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.userObj = this.informService.Current;
        this.informService.GetCurrentUser(function () {
            _this.informService.GetTravelProfileDetails().then(function (res) {
                _this.GetTravelProfileInitial = res;
                if (_this.GetTravelProfileInitial.length > 0) {
                    // this.router.navigate(['/']);
                }
                else {
                    _this.router.navigate(['/MyProfile']);
                    _this.toaster.successToastr('Please update your profile');
                }
            });
            if (_this.ProxyName != null || _this.ProxyName != undefined) {
                _this.informService.GetMyApprovalDetailsProxy(_this.ProxyName).then(function (resp) {
                    _this.MyApproval = resp;
                    if (_this.MyApproval.length > 0) {
                        _this.datatable = false;
                    }
                    else {
                        _this.datatable = true;
                    }
                });
            }
            else {
                _this.informService.GetMyApprovalDetails().then(function (res) {
                    _this.MyApproval = res;
                    if (_this.MyApproval.length > 0) {
                        _this.datatable = false;
                    }
                    else {
                        _this.datatable = true;
                    }
                });
            }
        });
        this.dtOptions = {
            pagingType: 'full_numbers',
            pageLength: 10,
            paging: true,
            searching: true,
            info: true,
            ordering: false
        };
    };
    MyapprovalComponent.prototype.ToViewDetails = function (key, id) {
        // let temp = btoa(Id);
        this.router.navigate(['/NewTravelRequest', key, id]);
    };
    MyapprovalComponent.prototype.getTripText = function (type) {
        if (type == 'OneWay') {
            return 'One Way';
        }
        if (type == 'RoundTrip') {
            return 'Round Trip';
        }
        if (type == 'MultiCity') {
            return 'Multi City';
        }
    };
    MyapprovalComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-myapproval',
            template: __webpack_require__(/*! ./myapproval.component.html */ "./src/app/myapproval/myapproval.component.html"),
            styles: [__webpack_require__(/*! ./myapproval.component.css */ "./src/app/myapproval/myapproval.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_3__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_5__["ToastrManager"],
            ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_2__["BsModalService"]])
    ], MyapprovalComponent);
    return MyapprovalComponent;
}());



/***/ }),

/***/ "./src/app/myprofile/myprofile.component.css":
/*!***************************************************!*\
  !*** ./src/app/myprofile/myprofile.component.css ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "sup {\r\n    color: red;\r\n    font-size: 100%;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbXlwcm9maWxlL215cHJvZmlsZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksVUFBVTtJQUNWLGVBQWU7QUFDbkIiLCJmaWxlIjoic3JjL2FwcC9teXByb2ZpbGUvbXlwcm9maWxlLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJzdXAge1xyXG4gICAgY29sb3I6IHJlZDtcclxuICAgIGZvbnQtc2l6ZTogMTAwJTtcclxufSJdfQ== */"

/***/ }),

/***/ "./src/app/myprofile/myprofile.component.html":
/*!****************************************************!*\
  !*** ./src/app/myprofile/myprofile.component.html ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n  <h4 class=\"card-header\">My Profile</h4>\r\n  <div class=\"card-body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"EmployeeID\">Employee Id</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"EmployeeID\" [(ngModel)]=\"userObj.EmployeeID\"\r\n            placeholder=\"Employee Id\" #EmployeeID=\"ngModel\" readonly />\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"EmployeeName\">Employee Name</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"EmployeeName\" [(ngModel)]=\"userObj.EmployeeName\"\r\n            placeholder=\"Employee Name\" #EmployeeName=\"ngModel\" readonly />\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"Department\">Department</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"Department\" [(ngModel)]=\"userObj.Department\"\r\n            placeholder=\"Department\" #Department=\"ngModel\" readonly />\r\n\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"Designation\">Designation</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"Designation\" [(ngModel)]=\"userObj.Designation\"\r\n            placeholder=\"Designation\" #Designation=\"ngModel\" readonly />\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"BusinessUnit\">Business Unit</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"BusinessUnit\" [(ngModel)]=\"userObj.BusinessUnit\"\r\n            placeholder=\"Business Unit\" #BusinessUnit=\"ngModel\" readonly />\r\n\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"DeliveryUnit\">Delivery Unit</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"DeliveryUnit\" [(ngModel)]=\"userObj.DeliveryUnit\"\r\n            placeholder=\"Delivery Unit\" #DeliveryUnit=\"ngModel\" readonly />\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"Gender\">Gender</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\" style=\"text-transform: capitalize\"\r\n          name=\"Gender\" [(ngModel)]=\"userObj.Gender\" placeholder=\"Age\" #Gender=\"ngModel\" readonly />\r\n\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"Age\">Age</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"Age\" [(ngModel)]=\"userObj.Age\" placeholder=\"Age\" #Age=\"ngModel\"\r\n            readonly />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"BaseLocation\">Base Location</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n          style=\"text-transform: capitalize\" name=\"BaseLocation\" [(ngModel)]=\"userObj.BaseLocation\"\r\n          placeholder=\"Base Location\" readonly />\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"DOB\">Date Of Birth</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <input class=\"form-control\" autocomplete=\"off\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" bsDatepicker name=\"DOB\"\r\n            [(ngModel)]=\"userObj.DOB\" [bsConfig]=\"bsConfig\" placeholder=\"Date Of Birth\" disabled readonly />\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n    <form name=\"form\" #f=\"ngForm\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"PANNumber\">PAN Number</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" pattern=\"[A-Za-z]{5}\\d{4}[A-Za-z]{1}\"\r\n              class=\"form-control\" style=\"text-transform: capitalize\" name=\"PANNumber\" [(ngModel)]=\"TravelObj.PANNumber\"\r\n              placeholder=\"PAN Number\" #PANNumber=\"ngModel\"\r\n              [ngClass]=\"{ 'is-invalid': (f.submitted || PANNumber.touched) && PANNumber.invalid }\" />\r\n            <div *ngIf=\"(f.submitted || PANNumber.touched) && PANNumber.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"PANNumber.errors['required']\">Pan Number required</div>\r\n              <div *ngIf=\"PANNumber.errors['pattern']\">Enter valid pan number</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"AadhaarNumber\">Aadhaar Number</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" pattern=\"^\\d{4}\\d{4}\\d{4}$\" autocomplete=\"off\"\r\n              class=\"form-control\" style=\"text-transform: capitalize\" name=\"AadhaarNumber\"\r\n              [(ngModel)]=\"TravelObj.AadhaarNumber\" placeholder=\"Aadhaar Number\" #AadhaarNumber=\"ngModel\"\r\n              [ngClass]=\"{ 'is-invalid': (f.submitted || AadhaarNumber.touched) && AadhaarNumber.invalid }\" />\r\n            <div *ngIf=\"(f.submitted || AadhaarNumber.touched) && AadhaarNumber.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"AadhaarNumber.errors['required']\">Aadhaar Number required</div>\r\n              <div *ngIf=\"AadhaarNumber.errors['pattern']\">Allow 12 digits numbers</div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"VoterIdentity\">Voter Identity</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              pattern=\"^[a-zA-Z0-9]+$\" style=\"text-transform: capitalize\" name=\"VoterIdentity\"\r\n              [(ngModel)]=\"TravelObj.VoterIdentity\" placeholder=\"Voter Identity\" #VoterIdentity=\"ngModel\" />\r\n            <div *ngIf=\"(f.submitted || VoterIdentity.touched) && VoterIdentity.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"VoterIdentity.errors['required']\">Aadhaar Number required</div>\r\n              <div *ngIf=\"VoterIdentity.errors['pattern']\">Enter a valid voter identity</div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"DrivingLicense\">Driving License</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"DrivingLicense\" [(ngModel)]=\"TravelObj.DrivingLicense\"\r\n              placeholder=\"Driving License\" #DrivingLicense=\"ngModel\" />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"GivenName\">Given Name</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus pattern=\"[a-zA-Z\\s?]*\" autocomplete=\"off\" class=\"form-control\" name=\"GivenName\"\r\n              [(ngModel)]=\"TravelObj.GivenName\" placeholder=\"Given Name\" #GivenName=\"ngModel\"\r\n              [ngClass]=\"{ 'is-invalid': (f.submitted || GivenName.touched) && GivenName.invalid }\" />\r\n            <div *ngIf=\"(f.submitted || GivenName.touched) && GivenName.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"GivenName.errors['required']\">Given Name is required</div>\r\n              <div *ngIf=\"GivenName.errors['pattern']\">Enter a valid given name</div>\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"SurName\">Surname</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus pattern=\"[a-zA-Z\\s?]*\" autocomplete=\"off\" class=\"form-control\" name=\"SurName\"\r\n              [(ngModel)]=\"TravelObj.SurName\" placeholder=\"Surname\" #SurName=\"ngModel\"\r\n              [ngClass]=\"{ 'is-invalid': (f.submitted || SurName.touched) && SurName.invalid }\" />\r\n            <div *ngIf=\"(f.submitted || SurName.touched) && SurName.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"SurName.errors['required']\">Surname is required</div>\r\n              <div *ngIf=\"SurName.errors['pattern']\">Enter a valid surname</div>\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- ^[A-Z0-9<]{9}[0-9]{1}[A-Z]{3}[0-9]{7}[A-Z]{1}[0-9]{7}[A-Z0-9<]{14}[0-9]{2}$ -->\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"PassportNo\">Passport No</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <!-- ^[A-PR-WY][0-9]{2}\\s?[0-9]{5}[^0]$ -->\r\n            <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\" maxlength=\"75\"\r\n              style=\"text-transform: capitalize\" name=\"Gender\" [(ngModel)]=\"TravelObj.PassportNo\"\r\n              placeholder=\"Passport No\" #PassportNo=\"ngModel\" pattern=\"^[a-zA-Z0-9]+$\"\r\n              [ngClass]=\"{ 'is-invalid': (f.submitted || PassportNo.touched) && PassportNo.invalid }\" />\r\n            <div *ngIf=\"(f.submitted || PassportNo.touched) && PassportNo.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"PassportNo.errors['required']\">Passport No is required</div>\r\n              <div *ngIf=\"PassportNo.errors['pattern']\">Enter a valid passport number</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"DOBPassport\">Date of Birth (in Passport)</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" autocomplete=\"off\" bsDatepicker name=\"DOBPassport\"\r\n              [(ngModel)]=\"TravelObj.DOBPassport\" [bsConfig]=\"bsConfig\" #DOBPassport=\"ngModel\" [maxDate]=\"minDate\"\r\n              placeholder=\"Date of Birth\" [ngClass]=\"{ 'is-invalid': (f.submitted || DOBPassport.touched) && DOBPassport.invalid }\" />\r\n            <div *ngIf=\"(f.submitted || DOBPassport.touched) && DOBPassport.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"DOBPassport.errors['required']\">Date of Birth is required</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"PassportExpiryDate\">Passport Expiry Date</label>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" autocomplete=\"off\" bsDatepicker\r\n              name=\"PassportExpiryDate\" [(ngModel)]=\"TravelObj.PassportExpiryDate\" [bsConfig]=\"bsConfig\"\r\n              #PassportExpiryDate=\"ngModel\" placeholder=\"Passport Expiry Date\" [minDate]=\"minDate\"\r\n              [ngClass]=\"{ 'is-invalid': (f.submitted || PassportExpiryDate.touched) && PassportExpiryDate.invalid }\" />\r\n            <div *ngIf=\"(f.submitted || PassportExpiryDate.touched) && PassportExpiryDate.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"PassportExpiryDate.errors['required']\">Passport Expiry Date is required</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Mobile\">Mobile Number</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <!-- ^[+0-9_-]{6,20}$ -->\r\n          <!-- ^\\+(?:[0-9] ?){6,14}[0-9]$ -->\r\n          <!-- (([+][(]?[0-9]{1,3}[)]?)|([(]?[0-9]{4}[)]?))\\s*[)]?[-\\s\\.]?[(]?[0-9]{1,3}[)]?([-\\s\\.]?[0-9]{3})([-\\s\\.]?[0-9]{3,4}) -->\r\n          <!-- ^(?!(\\d)\\1+$)(?:\\(?\\+\\d{1,3}\\)?[- ]?|0)?\\d{10}$ -->\r\n          <!-- ^(?!(\\d)\\1+$)(?:\\(?\\+\\d{1,3}\\)?[- ]?|0)?\\d{6,14}[0-9]$ -->\r\n          <!-- \"^(\\+?\\d{1,3}[- ]?)?\\d{10}$\" -->\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus pattern=\"\\+?([0-9]-?\\s?){10,17}$\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Mobile\" [(ngModel)]=\"TravelObj.Mobile\"\r\n              placeholder=\"Mobile Number\" #Mobile=\"ngModel\"\r\n              [ngClass]=\"{ 'is-invalid': (f.submitted || Mobile.touched) && Mobile.invalid }\" />\r\n            <div *ngIf=\"(f.submitted || Mobile.touched) && Mobile.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"Mobile.errors['required']\">Mobile Number is required</div>\r\n              <div *ngIf=\"Mobile.errors['pattern']\">Enter a valid mobile number.</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row height pt-3\">\r\n        <div class=\"col-md-5\"></div>\r\n        <div class=\"col-md-2 text-center\">\r\n          <button type=\"submit\" class=\"btn btn-primary px-4\" (click)=\"TravelProfileUpdate(f)\">Update</button>\r\n        </div>\r\n        <div class=\"col-md-5\"></div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./src/app/myprofile/myprofile.component.ts":
/*!**************************************************!*\
  !*** ./src/app/myprofile/myprofile.component.ts ***!
  \**************************************************/
/*! exports provided: MyprofileComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MyprofileComponent", function() { return MyprofileComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_5__);






var MyprofileComponent = /** @class */ (function () {
    function MyprofileComponent(infoService, router, toaster) {
        this.infoService = infoService;
        this.router = router;
        this.toaster = toaster;
        this.TravelObj = {};
        this.minDate = new Date();
        this.TravelProfileArray = [];
        this.bsConfig = {
            dateInputFormat: this.infoService.DateFormate,
            adaptivePosition: true,
            showWeekNumbers: false,
        };
        this.userObj = Object(lodash__WEBPACK_IMPORTED_MODULE_5__["cloneDeep"])(this.infoService.Current);
        this.modifyDUBU();
    }
    MyprofileComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.infoService.GetCurrentUser(function () {
            _this.infoService.GetTravelProfileDetails().then(function (res) {
                _this.TravelProfileArray = res;
                if (_this.TravelProfileArray.length > 0) {
                    _this.TravelObj = res[0];
                    if (_this.TravelObj.DOBPassport == "") {
                        _this.TravelObj.DOBPassport = "";
                    }
                    else {
                        _this.DOBPassport = new Date(_this.TravelObj.DOBPassport);
                        _this.TravelObj.DOBPassport = _this.DOBPassport;
                    }
                    if (_this.TravelObj.PassportExpiryDate == "") {
                        _this.TravelObj.PassportExpiryDate = "";
                    }
                    else {
                        _this.PassportExpiryDate = new Date(_this.TravelObj.PassportExpiryDate);
                        _this.TravelObj.PassportExpiryDate = _this.PassportExpiryDate;
                    }
                    // this.router.navigate(["/MyProfile"]);
                }
                _this.modifyDUBU();
            });
        });
    };
    MyprofileComponent.prototype.modifyDUBU = function () {
        this.userObj.DeliveryUnit = this.infoService.Current.FullDeliveryUnit || "";
        this.userObj.BusinessUnit = this.infoService.Current.FullBusinessUnit || "";
        if (this.userObj.FullDeliveryUnit) {
            delete this.userObj.FullDeliveryUnit;
        }
        if (this.userObj.FullBusinessUnit) {
            delete this.userObj.FullBusinessUnit;
        }
    };
    // GetTravelProfile() {
    //   this.infoService.GetTravelProfileDetails().then((res: any) => {
    //     this.TravelProfileArray = res;
    //   });
    // }
    MyprofileComponent.prototype.TravelProfileUpdate = function (form) {
        var _this = this;
        if (form.valid && form.touched) {
            if (this.TravelProfileArray.length > 0) {
                if (this.TravelObj.GivenName && this.TravelObj.SurName) {
                    var Obj = {
                        Id: this.TravelProfileArray[0].Id,
                        PANNumber: this.TravelObj.PANNumber,
                        AadhaarNumber: this.TravelObj.AadhaarNumber,
                        VoterIdentity: this.TravelObj.VoterIdentity,
                        DrivingLicense: this.TravelObj.DrivingLicense,
                        GivenName: this.TravelObj.GivenName.toUpperCase(),
                        SurName: this.TravelObj.SurName.toUpperCase(),
                        PassportNo: this.TravelObj.PassportNo,
                        DOBPassport: new Date(this.TravelObj.DOBPassport),
                        PassportExpiryDate: new Date(this.TravelObj.PassportExpiryDate),
                        Mobile: this.TravelObj.Mobile,
                    };
                    this.infoService.UpdateTravelProfile(Obj).then(function (res) {
                        if (res) {
                            _this.toaster.successToastr("Profile saved successfully");
                        }
                        else {
                            _this.toaster.errorToastr("Changes in error");
                        }
                        _this.ngOnInit();
                    });
                }
                else {
                    var Obj = {
                        Id: this.TravelProfileArray[0].Id,
                        PANNumber: this.TravelObj.PANNumber,
                        AadhaarNumber: this.TravelObj.AadhaarNumber,
                        VoterIdentity: this.TravelObj.VoterIdentity,
                        DrivingLicense: this.TravelObj.DrivingLicense,
                        GivenName: this.TravelObj.GivenName,
                        SurName: this.TravelObj.SurName,
                        PassportNo: this.TravelObj.PassportNo,
                        DOBPassport: new Date(this.TravelObj.DOBPassport),
                        PassportExpiryDate: new Date(this.TravelObj.PassportExpiryDate),
                        Mobile: this.TravelObj.Mobile,
                    };
                    this.infoService.UpdateTravelProfile(Obj).then(function (res) {
                        if (res) {
                            _this.toaster.successToastr("Profile saved successfully");
                        }
                        else {
                            _this.toaster.errorToastr("Changes in error");
                        }
                        _this.ngOnInit();
                    });
                }
            }
            else {
                if (this.TravelObj.GivenName && this.TravelObj.SurName) {
                    var Obj = {
                        PANNumber: this.TravelObj.PANNumber,
                        AadhaarNumber: this.TravelObj.AadhaarNumber,
                        VoterIdentity: this.TravelObj.VoterIdentity,
                        DrivingLicense: this.TravelObj.DrivingLicense,
                        GivenName: this.TravelObj.GivenName.toUpperCase(),
                        SurName: this.TravelObj.SurName.toUpperCase(),
                        PassportNo: this.TravelObj.PassportNo,
                        DOBPassport: new Date(this.TravelObj.DOBPassport),
                        PassportExpiryDate: new Date(this.TravelObj.PassportExpiryDate),
                        Mobile: this.TravelObj.Mobile,
                    };
                    this.infoService.InsertTravelProfile(Obj).then(function (res) {
                        if (res) {
                            _this.ngOnInit();
                            _this.toaster.successToastr("Profile saved successfully");
                        }
                        else {
                            _this.toaster.errorToastr("Changes in error");
                        }
                    });
                }
                else {
                    var Obj = {
                        PANNumber: this.TravelObj.PANNumber,
                        AadhaarNumber: this.TravelObj.AadhaarNumber,
                        VoterIdentity: this.TravelObj.VoterIdentity,
                        DrivingLicense: this.TravelObj.DrivingLicense,
                        GivenName: this.TravelObj.GivenName,
                        SurName: this.TravelObj.SurName,
                        PassportNo: this.TravelObj.PassportNo,
                        DOBPassport: new Date(this.TravelObj.DOBPassport),
                        PassportExpiryDate: new Date(this.TravelObj.PassportExpiryDate),
                        Mobile: this.TravelObj.Mobile,
                    };
                    this.infoService.InsertTravelProfile(Obj).then(function (res) {
                        if (res) {
                            _this.ngOnInit();
                            _this.toaster.successToastr("Profile saved successfully");
                        }
                        else {
                            _this.toaster.errorToastr("Changes in error");
                        }
                    });
                }
            }
        }
        else {
            this.toaster.errorToastr("update profile information");
        }
    };
    MyprofileComponent.prototype.number = function (event) {
        var charCode = event.which ? event.which : event.keyCode;
        if (charCode <= 126) {
            return false;
        }
        return true;
    };
    MyprofileComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: "app-myprofile",
            template: __webpack_require__(/*! ./myprofile.component.html */ "./src/app/myprofile/myprofile.component.html"),
            styles: [__webpack_require__(/*! ./myprofile.component.css */ "./src/app/myprofile/myprofile.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_2__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__["ToastrManager"]])
    ], MyprofileComponent);
    return MyprofileComponent;
}());



/***/ }),

/***/ "./src/app/newtravel-request/newtravel-request.component.css":
/*!*******************************************************************!*\
  !*** ./src/app/newtravel-request/newtravel-request.component.css ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "sup {\r\n    color: red;\r\n    font-size: 100%;\r\n}\r\n\r\n.col-md-2.endtext {\r\n    text-align: end;\r\n    justify-content: end;\r\n}\r\n\r\ntr.Space {\r\n    color: blue;\r\n    /* white-space: pre; */\r\n}\r\n\r\n.f-w {\r\n    background: brown;\r\n}\r\n\r\n.f-b {\r\n    background: green;\r\n}\r\n\r\n.f-c {\r\n    background: red;\r\n}\r\n\r\n.f-r {\r\n    background: greenyellow;\r\n}\r\n\r\n.hides {\r\n    color: white;\r\n}\r\n\r\n/* input.ng-pristine.ng-valid.ng-touched {\r\n    color: white;\r\n} */\r\n\r\nli:active {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #007bff;\r\n}\r\n\r\nul.custom-list-group.ng-star-inserted.ng-untouched.ng-pristine.ng-valid {\r\n    list-style: none;\r\n    padding-left: 12px;\r\n}\r\n\r\n/* .transparent {\r\n    opacity: 0.3;\r\n    background: transparent;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 10px;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    position: relative;\r\n    pointer-events: none;\r\n}\r\n\r\n.spinner {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    height: 60px;\r\n    width: 60px;\r\n    margin: 0px auto;\r\n    -webkit-animation: rotation .6s infinite linear;\r\n    -moz-animation: rotation .6s infinite linear;\r\n    -o-animation: rotation .6s infinite linear;\r\n    animation: rotation .6s infinite linear;\r\n    border-left: 6px solid rgba(0, 174, 239, .15);\r\n    border-right: 6px solid rgba(0, 174, 239, .15);\r\n    border-bottom: 6px solid rgba(0, 174, 239, .15);\r\n    border-top: 6px solid rgba(0, 174, 239, .8);\r\n    border-radius: 100%;\r\n    background-size: 100% auto;\r\n    color: rgb(94, 95, 91);\r\n    pointer-events: none;\r\n}\r\n\r\n@-webkit-keyframes rotation {\r\n    from {\r\n        -webkit-transform: rotate(0deg);\r\n    }\r\n\r\n    to {\r\n        -webkit-transform: rotate(359deg);\r\n    }\r\n}\r\n\r\n@-moz-keyframes rotation {\r\n    from {\r\n        -moz-transform: rotate(0deg);\r\n    }\r\n\r\n    to {\r\n        -moz-transform: rotate(359deg);\r\n    }\r\n}\r\n\r\n@-o-keyframes rotation {\r\n    from {\r\n        -o-transform: rotate(0deg);\r\n    }\r\n\r\n    to {\r\n        -o-transform: rotate(359deg);\r\n    }\r\n}\r\n\r\n@keyframes rotation {\r\n    from {\r\n        transform: rotate(0deg);\r\n    }\r\n\r\n    to {\r\n        transform: rotate(359deg);\r\n    }\r\n} */\r\n\r\n.displayNone {\r\ndisplay: none;\r\n}\r\n\r\n.fitWidth {\r\n    width: -webkit-fit-content !important;\r\n    width: -moz-fit-content !important;\r\n    width: fit-content !important;\r\n}\r\n\r\n.displayFlex {\r\n    display: flex;\r\n}\r\n\r\n.width-100 {\r\n    width: 100% !important;\r\n}\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbmV3dHJhdmVsLXJlcXVlc3QvbmV3dHJhdmVsLXJlcXVlc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFVBQVU7SUFDVixlQUFlO0FBQ25COztBQUVBO0lBQ0ksZUFBZTtJQUNmLG9CQUFvQjtBQUN4Qjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTs7R0FFRzs7QUFDSDtJQUNJLFdBQVc7SUFDWCxxQkFBcUI7SUFDckIseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGtCQUFrQjtBQUN0Qjs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0VHOztBQUVIO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0lBQ0kscUNBQTZCO0lBQTdCLGtDQUE2QjtJQUE3Qiw2QkFBNkI7QUFDakM7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksc0JBQXNCO0FBQzFCIiwiZmlsZSI6InNyYy9hcHAvbmV3dHJhdmVsLXJlcXVlc3QvbmV3dHJhdmVsLXJlcXVlc3QuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInN1cCB7XHJcbiAgICBjb2xvcjogcmVkO1xyXG4gICAgZm9udC1zaXplOiAxMDAlO1xyXG59XHJcblxyXG4uY29sLW1kLTIuZW5kdGV4dCB7XHJcbiAgICB0ZXh0LWFsaWduOiBlbmQ7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGVuZDtcclxufVxyXG5cclxudHIuU3BhY2Uge1xyXG4gICAgY29sb3I6IGJsdWU7XHJcbiAgICAvKiB3aGl0ZS1zcGFjZTogcHJlOyAqL1xyXG59XHJcblxyXG4uZi13IHtcclxuICAgIGJhY2tncm91bmQ6IGJyb3duO1xyXG59XHJcblxyXG4uZi1iIHtcclxuICAgIGJhY2tncm91bmQ6IGdyZWVuO1xyXG59XHJcblxyXG4uZi1jIHtcclxuICAgIGJhY2tncm91bmQ6IHJlZDtcclxufVxyXG5cclxuLmYtciB7XHJcbiAgICBiYWNrZ3JvdW5kOiBncmVlbnllbGxvdztcclxufVxyXG5cclxuLmhpZGVzIHtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuLyogaW5wdXQubmctcHJpc3RpbmUubmctdmFsaWQubmctdG91Y2hlZCB7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn0gKi9cclxubGk6YWN0aXZlIHtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcclxufVxyXG5cclxudWwuY3VzdG9tLWxpc3QtZ3JvdXAubmctc3Rhci1pbnNlcnRlZC5uZy11bnRvdWNoZWQubmctcHJpc3RpbmUubmctdmFsaWQge1xyXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcclxuICAgIHBhZGRpbmctbGVmdDogMTJweDtcclxufVxyXG5cclxuLyogLnRyYW5zcGFyZW50IHtcclxuICAgIG9wYWNpdHk6IDAuMztcclxuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB0b3A6IDEwcHg7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgcmlnaHQ6IDA7XHJcbiAgICBib3R0b206IDA7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcclxufVxyXG5cclxuLnNwaW5uZXIge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogNTAlO1xyXG4gICAgdG9wOiA1MCU7XHJcbiAgICBoZWlnaHQ6IDYwcHg7XHJcbiAgICB3aWR0aDogNjBweDtcclxuICAgIG1hcmdpbjogMHB4IGF1dG87XHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbjogcm90YXRpb24gLjZzIGluZmluaXRlIGxpbmVhcjtcclxuICAgIC1tb3otYW5pbWF0aW9uOiByb3RhdGlvbiAuNnMgaW5maW5pdGUgbGluZWFyO1xyXG4gICAgLW8tYW5pbWF0aW9uOiByb3RhdGlvbiAuNnMgaW5maW5pdGUgbGluZWFyO1xyXG4gICAgYW5pbWF0aW9uOiByb3RhdGlvbiAuNnMgaW5maW5pdGUgbGluZWFyO1xyXG4gICAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCByZ2JhKDAsIDE3NCwgMjM5LCAuMTUpO1xyXG4gICAgYm9yZGVyLXJpZ2h0OiA2cHggc29saWQgcmdiYSgwLCAxNzQsIDIzOSwgLjE1KTtcclxuICAgIGJvcmRlci1ib3R0b206IDZweCBzb2xpZCByZ2JhKDAsIDE3NCwgMjM5LCAuMTUpO1xyXG4gICAgYm9yZGVyLXRvcDogNnB4IHNvbGlkIHJnYmEoMCwgMTc0LCAyMzksIC44KTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgYXV0bztcclxuICAgIGNvbG9yOiByZ2IoOTQsIDk1LCA5MSk7XHJcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcclxufVxyXG5cclxuQC13ZWJraXQta2V5ZnJhbWVzIHJvdGF0aW9uIHtcclxuICAgIGZyb20ge1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICB9XHJcblxyXG4gICAgdG8ge1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzU5ZGVnKTtcclxuICAgIH1cclxufVxyXG5cclxuQC1tb3ota2V5ZnJhbWVzIHJvdGF0aW9uIHtcclxuICAgIGZyb20ge1xyXG4gICAgICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICB9XHJcblxyXG4gICAgdG8ge1xyXG4gICAgICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoMzU5ZGVnKTtcclxuICAgIH1cclxufVxyXG5cclxuQC1vLWtleWZyYW1lcyByb3RhdGlvbiB7XHJcbiAgICBmcm9tIHtcclxuICAgICAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgIH1cclxuXHJcbiAgICB0byB7XHJcbiAgICAgICAgLW8tdHJhbnNmb3JtOiByb3RhdGUoMzU5ZGVnKTtcclxuICAgIH1cclxufVxyXG5cclxuQGtleWZyYW1lcyByb3RhdGlvbiB7XHJcbiAgICBmcm9tIHtcclxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgIH1cclxuXHJcbiAgICB0byB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzU5ZGVnKTtcclxuICAgIH1cclxufSAqL1xyXG5cclxuLmRpc3BsYXlOb25lIHtcclxuZGlzcGxheTogbm9uZTtcclxufVxyXG5cclxuLmZpdFdpZHRoIHtcclxuICAgIHdpZHRoOiBmaXQtY29udGVudCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4uZGlzcGxheUZsZXgge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuLndpZHRoLTEwMCB7XHJcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG59XHJcbiJdfQ== */"

/***/ }),

/***/ "./src/app/newtravel-request/newtravel-request.component.html":
/*!********************************************************************!*\
  !*** ./src/app/newtravel-request/newtravel-request.component.html ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n\r\n  <h4 class=\"card-header\">Travel Request</h4>\r\n\r\n  <div class=\"card-body\">\r\n    <div class=\"row\" *ngIf=\"isEdit\">\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"EmployeeID\">Travel Request Id</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"Id\" [(ngModel)]=\"userObj.ID\" placeholder=\"Travel Request Id\"\r\n            readonly />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <form name=\"form\" #f=\"ngForm\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"EmployeeID\">Employee Id</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"EmployeeID\" [(ngModel)]=\"userObj.EmployeeID\"\r\n              placeholder=\"Employee Id\" #EmployeeID=\"ngModel\" readonly required />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"EmployeeName\">Employee Name</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"EmployeeName\" [(ngModel)]=\"userObj.EmployeeName\"\r\n              placeholder=\"Employee Name\" #EmployeeName=\"ngModel\" readonly required />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Department\">Department</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Department\" [(ngModel)]=\"userObj.Department\"\r\n              placeholder=\"Department\" #Department=\"ngModel\" readonly required />\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Designation\">Designation</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Designation\" [(ngModel)]=\"userObj.Designation\"\r\n              placeholder=\"Designation\" #Designation=\"ngModel\" readonly required />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"BusinessUnit\">Business Unit</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"BusinessUnit\" [(ngModel)]=\"userObj.BusinessUnit\"\r\n              placeholder=\"Business Unit\" #BusinessUnit=\"ngModel\" readonly />\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"DeliveryUnit\">Delivery Unit</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"DeliveryUnit\" [(ngModel)]=\"userObj.DeliveryUnit\"\r\n              placeholder=\"Delivery Unit\" #DeliveryUnit=\"ngModel\" readonly />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Gender\">Gender</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"Gender\" [(ngModel)]=\"userObj.Gender\" placeholder=\"Age\"\r\n            #Gender=\"ngModel\" readonly required />\r\n\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Age\">Age</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Age\" [(ngModel)]=\"userObj.Age\" placeholder=\"Age\" #Age=\"ngModel\"\r\n              readonly required />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"BaseLocation\">Base Location</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"BaseLocation\" [(ngModel)]=\"userObj.BaseLocation\"\r\n            placeholder=\"Base Location\" readonly required />\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"DOB\">Date Of Birth</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input class=\"form-control\" autocomplete=\"off\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n              bsDatepicker name=\"DOB\" [(ngModel)]=\"userObj.DOB\" [bsConfig]=\"bsConfig\" placeholder=\"Date Of Birth\"\r\n              disabled readonly required />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <accordion>\r\n        <accordion-group heading=\"Travel Details\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelType\">Travel For</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <select name=\"Travel_x0020_For\" [(ngModel)]=\"userObj.Travel_x0020_For\" class=\"form-control\"\r\n                #Travel_x0020_For=\"ngModel\" (change)=\"onChangeTravelFor($event)\" [disabled]=\"IsEditMode\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || Travel_x0020_For.touched) && Travel_x0020_For.invalid }\"\r\n                required>\r\n                <option value=\"Self\">Self</option>\r\n                <option value=\"Self along with Dependents\">Self along with Dependents</option>\r\n                <option value=\"Dependent\">Dependent</option>\r\n              </select>\r\n              <div *ngIf=\"(f.submitted || Travel_x0020_For.touched) && Travel_x0020_For.invalid\"\r\n                class=\"invalid-feedback\">\r\n                <div *ngIf=\"Travel_x0020_For.errors['required']\">Travel Type is required</div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelType\">Travel Type</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <select name=\"TravelType\" [(ngModel)]=\"userObj.TravelType\" class=\"form-control\" #TravelType=\"ngModel\"\r\n                (change)=\"onChangeTravelType($event)\" [disabled]=\"IsEditMode\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TravelType.touched) && TravelType.invalid }\" required>\r\n                <option value=\"International\">International</option>\r\n                <option value=\"Domestic\">Domestic</option>\r\n              </select>\r\n              <div *ngIf=\"(f.submitted || TravelType.touched) && TravelType.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TravelType.errors['required']\">Travel Type is required</div>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"Project\">Project</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input name=\"Project\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.Project\"\r\n                [typeahead]=\"common\" [typeaheadOptionsLimit]=\"15\" [typeaheadMinLength]=\"0\"\r\n                (typeaheadNoResults)=\"typeaheadNoResults($event,'Project')\" typeaheadOptionField=\"ProjectList\"\r\n                placeholder=\"Project\" #Project=\"ngModel\" [disabled]=\"IsEditMode\"\r\n                (typeaheadOnSelect)=\"onLoadApproval($event)\" (focusout)=\"focusout($event,'Project')\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || Project.touched) && Project.invalid }\" required />\r\n              <div *ngIf=\"(f.submitted || Project.touched) && Project.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"Project.errors['required']\">Project is required</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"Project\">Project Id</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" class=\"form-control\" style=\"text-transform: capitalize\" name=\"projectoraclecode__c\"\r\n                #project_id=\"ngModel\" [(ngModel)]=\"userObj.projectoraclecode__c\" placeholder=\"Project Id\" readonly\r\n                required />\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ApprovalAuthority\">Client Name</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                style=\"text-transform: capitalize\" name=\"clientname__c\" [(ngModel)]=\"userObj.clientname__c\"\r\n                #clientname__c=\"ngModel\" placeholder=\"Client Name\" readonly required />\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ApproversSuperior\">Client Id</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" class=\"form-control\" style=\"text-transform: capitalize\" name=\"clientprismcode__c\"\r\n                #clientprismcode__c=\"ngModel\" [(ngModel)]=\"userObj.clientprismcode__c\" placeholder=\"Client Id\" readonly\r\n                required />\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ApprovalAuthority\">Approval Authority</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                style=\"text-transform: capitalize\" name=\"ApprovalAuthority\" [(ngModel)]=\"userObj.ApprovalAuthority\"\r\n                #ApprovalAuthority=\"ngModel\" placeholder=\"Approval Authority\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || ApprovalAuthority.touched) && ApprovalAuthority.invalid }\"\r\n                readonly required />\r\n              <div *ngIf=\"(f.submitted || ApprovalAuthority.touched) && ApprovalAuthority.invalid\"\r\n                class=\"invalid-feedback\">\r\n                <div *ngIf=\"ApprovalAuthority.errors['required']\">Approval Authority is required</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ApproversSuperior\">Approver's Superior</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" class=\"form-control\" style=\"text-transform: capitalize\" name=\"ApproversSuperior\"\r\n                #ApproversSuperior=\"ngModel\" [(ngModel)]=\"userObj.ApproversSuperior\" placeholder=\"Approvers Superior\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || ApproversSuperior.touched) && ApproversSuperior.invalid }\"\r\n                readonly required />\r\n              <div *ngIf=\"(f.submitted || ApproversSuperior.touched) && ApproversSuperior.invalid\"\r\n                class=\"invalid-feedback\">\r\n                <div *ngIf=\"ApproversSuperior.errors['required']\">Approver's Superior is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelCategory\">Travel Category</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input name=\"TravelCategory\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.TravelCategory\"\r\n                [typeahead]=\"DeliverySource\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                (focusout)=\"focusout($event,'TravelCategory')\" typeaheadOptionField=\"name\" #TravelCategory=\"ngModel\"\r\n                (typeaheadOnSelect)=\"onTravelCategory($event)\"\r\n                (typeaheadNoResults)=\"typeaheadNoResults($event,'TravelCategory')\"\r\n                [disabled]=\"IsEditMode || userObj.Travel_x0020_For=='Dependent'\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TravelCategory.touched) && TravelCategory.invalid }\"\r\n                placeholder=\"Travel Category\" class=\"form-control\" required>\r\n              <div *ngIf=\"(f.submitted || TravelCategory.touched) && TravelCategory.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TravelCategory.errors['required']\">Travel Category is required</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"Mobile\">Mobile Number</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" autofocus spellcheck=\"false\" pattern=\"\\+?([0-9]-?\\s?){10,17}$\" autocomplete=\"off\"\r\n                class=\"form-control\" style=\"text-transform: capitalize\" name=\"Mobile\" [(ngModel)]=\"userObj.Mobile\"\r\n                placeholder=\"Mobile Number\" #Mobile=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || Mobile.touched) && Mobile.invalid }\" [disabled]=\"IsEditMode\"\r\n                required />\r\n              <div *ngIf=\"(f.submitted || Mobile.touched) && Mobile.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"Mobile.errors['required']\">Mobile Number is required</div>\r\n                <div *ngIf=\"Mobile.errors['pattern']\">Enter a valid mobile number</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelPurpose\">Travel Purpose</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input name=\"TravelPurpose\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.TravelPurpose\"\r\n                [typeahead]=\"purposeOfProject\" [typeaheadOptionsLimit]=\"20\" [typeaheadMinLength]=\"0\"\r\n                typeaheadOptionField=\"name\" #TravelPurpose=\"ngModel\"\r\n                [disabled]=\"IsEditMode || userObj.Travel_x0020_For=='Dependent'\"\r\n                (focusout)=\"focusout($event,'TravelPurpose')\"\r\n                (typeaheadNoResults)=\"typeaheadNoResults($event,'TravelPurpose')\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TravelPurpose.touched) && TravelPurpose.invalid }\"\r\n                placeholder=\"Travel Purpose\" class=\"form-control\" required>\r\n              <div *ngIf=\"(f.submitted || TravelPurpose.touched) && TravelPurpose.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TravelPurpose.errors['required']\">Travel Purpose is required</div>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelMeal\">Travel Meal</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input class=\"form-control\" autocomplete=\"off\" name=\"TravelMeal\" [(ngModel)]=\"userObj.TravelMeal\"\r\n                [typeahead]=\"informService.Meal\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                (focusout)=\"focusout($event,'TravelMeal')\"\r\n                (typeaheadNoResults)=\"typeaheadNoResults($event,'TravelMeal')\" typeaheadOptionField=\"name\"\r\n                #TravelMeal=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TravelMeal.touched) && TravelMeal.invalid }\"\r\n                placeholder=\"Travel Meal\" class=\"form-control\" [disabled]=\"IsEditMode\" required />\r\n              <div *ngIf=\"(f.submitted || TravelMeal.touched) && TravelMeal.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TravelMeal.errors['required']\">Travel Meal is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\" *ngIf=\"isEdit\">\r\n                <label for=\"AccommodationRequired\">Accommodation Required?</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n              <div class=\"form-group\" *ngIf=\"!isEdit\">\r\n                <label for=\"AccommodationRequired\">Accommodation Required?</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\" *ngIf=\"isEdit\">\r\n\r\n\r\n              <input type=\"radio\" name=\"AccommodationRequired\" [(ngModel)]=\"userObj.AccommodationRequired\" value=\"true\"\r\n                [checked]=\"userObj.AccommodationRequired\" #AccommodationRequired=\"ngModel\" [attr.disabled]=\"IsEditMode\"\r\n                name=\"AccommodationRequired\" required />\r\n              Yes\r\n              <input type=\"radio\" name=\"AccommodationRequired\" [(ngModel)]=\"userObj.AccommodationRequired\"\r\n                name=\"AccommodationRequired\" value=\"false\" [checked]=\"!userObj.AccommodationRequired\"\r\n                #AccommodationRequired=\"ngModel\" [attr.disabled]=\"IsEditMode\" required />\r\n              No\r\n            </div>\r\n            <div class=\"col-md-3\" *ngIf=\"!isEdit\">\r\n              <input type=\"radio\" name=\"AccommodationRequired\" [(ngModel)]=\"userObj.AccommodationRequired\" value=\"true\"\r\n                [checked]=\"userObj.AccommodationRequired\" #AccommodationRequired=\"ngModel\" name=\"AccommodationRequired\"\r\n                (change)=\"handleChange($event)\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || AccommodationRequired.touched) && AccommodationRequired.invalid }\"\r\n                required />\r\n              Yes\r\n              <input type=\"radio\" name=\"AccommodationRequired\" [(ngModel)]=\"userObj.AccommodationRequired\"\r\n                name=\"AccommodationRequired\" value=\"false\" [checked]=\"!userObj.AccommodationRequired\"\r\n                #AccommodationRequired=\"ngModel\" (change)=\"handleChange($event)\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || AccommodationRequired.touched) && AccommodationRequired.invalid }\"\r\n                required />\r\n              No\r\n              <div *ngIf=\"(f.submitted || AccommodationRequired.touched) && AccommodationRequired.invalid\"\r\n                class=\"invalid-feedback\">\r\n                <div *ngIf=\"AccommodationRequired.errors['required']\">Accommodation is required</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ClientDebit\">Client Debit?</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\" *ngIf=\"isEdit\">\r\n              <input type=\"radio\" name=\"ClientDebit\" [(ngModel)]=\"userObj.ClientDebit\" value=\"true\"\r\n                [checked]=\"userObj.ClientDebit\" #ClientDebit=\"ngModel\" [attr.disabled]=\"IsEditMode\" name=\"ClientDebit\"\r\n                required />\r\n              Yes\r\n              <input type=\"radio\" name=\"ClientDebit\" [(ngModel)]=\"userObj.ClientDebit\" value=\"false\"\r\n                [checked]=\"!userObj.ClientDebit\" #ClientDebit=\"ngModel\" [attr.disabled]=\"IsEditMode\" name=\"ClientDebit\"\r\n                required />\r\n              No\r\n            </div>\r\n            <div class=\"col-md-3\" *ngIf=\"!isEdit\">\r\n              <input type=\"radio\" name=\"ClientDebit\" [(ngModel)]=\"userObj.ClientDebit\" value=\"true\"\r\n                [checked]=\"userObj.ClientDebit\" #ClientDebit=\"ngModel\" name=\"ClientDebit\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || ClientDebit.touched) && ClientDebit.invalid }\" required />\r\n              Yes\r\n              <input type=\"radio\" name=\"ClientDebit\" [(ngModel)]=\"userObj.ClientDebit\" value=\"false\"\r\n                [checked]=\"!userObj.ClientDebit\" #ClientDebit=\"ngModel\" name=\"ClientDebit\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || ClientDebit.touched) && ClientDebit.invalid }\" required />\r\n              No\r\n              <div *ngIf=\"(f.submitted || ClientDebit.touched) && ClientDebit.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"ClientDebit.errors['required']\">Client Debit is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row mb-3\" style=\"color: brown;\">\r\n            <div class=\"col-md-6\" *ngIf=\"!isEdit && NoAccomdation\">\r\n              Please be informed that the option chosen would mean that the accommodation would be managed on your own\r\n              and not by Maveric.\r\n            </div>\r\n\r\n            <div class=\"col-md-6\"\r\n              *ngIf=\"!isEdit && userObj.AccommodationRequired === 'true' && userObj.Travel_x0020_For !== 'Self' \">\r\n              Accommodation for Dependents is subject to availability. Please raise separate request to\r\n              \"traveldesk@maveric-systems.com\" mail ID to check availability.\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"userObj.ClientDebit=='true' && !userObj.TravelStatus\">\r\n              <div class=\"col-md-6\" *ngIf=\"isEdit || (!NoAccomdation && userObj.AccommodationRequired === '') || (userObj.AccommodationRequired === 'true' && userObj.Travel_x0020_For === 'Self')\"></div>\r\n              <div class=\"col-md-6\">\r\n                Please attach the supporting document from Client Debit if available. File size should be less than 1 MB.\r\n              </div>\r\n            </ng-container>\r\n\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n\r\n\r\n\r\n\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label>Cost Center / Cluster</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                style=\"text-transform: capitalize\" name=\"CostCenterOrCluster\" [(ngModel)]=\"userObj.CostCenterOrCluster\"\r\n                #CostCenterOrCluster=\"ngModel\" placeholder=\"Cost Center / Cluster\" required readonly\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || CostCenterOrCluster.touched) && CostCenterOrCluster.invalid }\" />\r\n              <div *ngIf=\"(f.submitted || CostCenterOrCluster.touched) && CostCenterOrCluster.invalid\"\r\n                class=\"invalid-feedback\">\r\n                <div *ngIf=\"CostCenterOrCluster.errors['required']\">Cost Center Or Cluster is required</div>\r\n              </div>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"!userObj.TravelStatus\">\r\n              <div class=\"col-md-3\" *ngIf=\"userObj.ClientDebit=='true'\">\r\n                <label for=\"file\">Upload Client Debit</label>\r\n              </div>\r\n              <div class=\"col-md-3\" *ngIf=\"userObj.ClientDebit=='true'\">\r\n                <div class=\"form-group\">\r\n                  <button type=\"btn\" class=\"btn btn-primary px-4\" (click)=\"DebitDocsAddClicked()\"\r\n                    [disabled]=\"userObj.TravelStatus\">Add</button>\r\n                </div>\r\n              </div>\r\n            </ng-container>\r\n\r\n            <div class=\"col-md-3\" *ngIf=\"userObject?.clientDebitSrcFiles?.length > 0 && Appkey !== 'VisaProcess' && Appkey !== 'VisaProcessView'\">\r\n              <div class=\"form-group\">\r\n                <label>Client Debit Files</label>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-3\" *ngIf=\"userObject?.clientDebitSrcFiles?.length > 0 && Appkey !== 'VisaProcess' && Appkey !== 'VisaProcessView'\">\r\n              <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n                <tbody>\r\n                  <tr *ngFor=\"let item of userObject.clientDebitSrcFiles; let i = index\">\r\n                    <td (click)=\"download(item.ServerRelativePath.DecodedUrl, item.FileName)\">\r\n                      <a\r\n                        href=\"https://mavericsystems.sharepoint.com/{{item.ServerRelativePath.DecodedUrl}}\">\r\n                        {{item.FileName}}\r\n                      </a>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n          </div>\r\n\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\" *ngIf=\"DebitDocs && DebitDocs.length > 0\">\r\n              <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Choose File</th>\r\n                    <th>Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let item of DebitDocs; let i = index\">\r\n                    <td class=\"form-group\">\r\n                      <input type=\"file\" [(ngModel)]=\"item\" name=\"File - {{i}}\" #file title=\"\" placeholder=\"Choose file\"\r\n                        (change)=\"handleDebitDocsInput($event.target.files,i)\">\r\n                      <span *ngIf=\"DebitDocsToUpload[i] && DebitDocsToUpload[i].content.size\">({{DebitDocsToUpload[i].content.size/1000}} Kb)</span>\r\n                    </td>\r\n                    <td class=\"form-group\">\r\n                      <button type=\"btn\" class=\"btn btn-danger px-4\" (click)=\"DebitDocRemove(i)\">Remove</button>\r\n                      <button type=\"btn\" class=\"btn btn-primary px-4 ml-2\" (click)=\"DebitDocsAddClicked()\"\r\n                        *ngIf=\"i===DebitDocs.length-1\">Add more</button>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row mb-2\">\r\n            <div class=\"col-md-12\" style=\"color: brown;\" *ngIf=\"DependentArrayView && DependentArrayView.length == 0\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\"></div>\r\n                <div class=\"col-md-8\" *ngIf=\"!isEdit && isDependent\">\r\n                  Please add dependent information in dependents tab and proceed further.\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-12\" *ngIf=\"DependentArrayView && DependentArrayView.length > 0\">\r\n              <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered width-100\" *ngIf=\"isDependent\">\r\n                <thead>\r\n                  <tr>\r\n                    <th></th>\r\n                    <th>Given Name</th>\r\n                    <th>Passport Expiry</th>\r\n                    <th>Relationship</th>\r\n                    <th [ngClass]=\"isShow ? '':'displayNone'\">Visa Status <sup>*</sup></th>\r\n                    <th [ngClass]=\"isShow ? '':'displayNone'\">Visa Valid Till </th>\r\n                    <th [ngClass]=\"isShow ? '':'displayNone'\">Visa No </th>\r\n                    <th [ngClass]=\"isShow ? '':'displayNone'\">Type of Visa <sup>*</sup></th>\r\n                    <th>Actions</th>\r\n\r\n                  </tr>\r\n                </thead>\r\n                <tbody *ngIf=\"userObj.Travel_x0020_For == 'Self along with Dependents'\">\r\n                  <tr [ngClass]=\"userObj.VisaStatus === 'Rejected' ? 'f-c':''\">\r\n                    <td>\r\n                    </td>\r\n                    <td>{{userObj.GivenName}}</td>\r\n                    <td>{{userObj.PassportExpiryDate| date: 'dd-MMM-yyyy'}}</td>\r\n                    <td>Self</td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <input name=\"VisaStatus\" style=\"width: fit-content;\" class=\"form-control\" autocomplete=\"off\"\r\n                        [(ngModel)]=\"userObj.VisaStatus\"\r\n                        [typeahead]=\"Appkey ==='VisaProcess' ? informService.VisaProcessVisaStatus : informService.VisaStatus\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                        #VisaStatus=\"ngModel\" (focusout)=\"focusout($event,'VisaStatus')\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'VisaStatus')\"\r\n                        (typeaheadOnSelect)=\"visaStatus($event, RejectionPopup)\"\r\n                        [disabled]=\"(!isShow || IsEditMode) && Appkey !== 'VisaProcess'\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || VisaStatus.touched) && VisaStatus.invalid }\"\r\n                        placeholder=\"Visa Status\" class=\"form-control\"\r\n                        [required]=\"TravelType.value === 'International'\" />\r\n                      <div *ngIf=\"(f.submitted || VisaStatus.touched) && VisaStatus.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaStatus.errors['required']\">Visa Status is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <span class=\"displayFlex\">\r\n                        <input class=\"form-control fitWidth\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                          autocomplete=\"off\" bsDatepicker\r\n                          [ngClass]=\"{ 'is-invalid': (f.submitted || VisaValidTill.touched) && VisaValidTill.invalid }\"\r\n                          [minDate]=\"today\" name=\"VisaValidTill\" [(ngModel)]=\"userObj.VisaValidTill\"\r\n                          [bsConfig]=\"bsConfig\" #VisaValidTill=\"ngModel\" placeholder=\"Visa Valid Till\"\r\n                          (ngModelChange)=\"onVisaValidTillChange(userObj)\"\r\n                          [disabled]=\"!isShow || updateEdit || isVisaSubmitted || userObj.VisaStatus === 'Rejected'\"\r\n                          [required]=\"(TravelType.value === 'International' && (userObj.VisaStatus === 'Obtained'))\" />\r\n                        <span *ngIf=\"!isVisaSubmitted && userObj.VisaStatus !== 'Rejected'\"><sup>&nbsp;*</sup></span>\r\n                      </span>\r\n                      <div *ngIf=\"(f.submitted || VisaValidTill.touched) && VisaValidTill.invalid\"\r\n                        style=\"display: block;\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaValidTill.errors['required']\">Visa Valid Till is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <span class=\"displayFlex\">\r\n                        <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control fitWidth\"\r\n                          style=\"text-transform: capitalize\" name=\"VisaNo\" [(ngModel)]=\"userObj.VisaNo\"\r\n                          placeholder=\"Visa No\" #VisaNo=\"ngModel\"\r\n                          [disabled]=\"!isShow || updateEdit || isVisaSubmitted || userObj.VisaStatus === 'Rejected'\"\r\n                          [ngClass]=\"{ 'is-invalid': (f.submitted || VisaNo.touched) && VisaNo.invalid }\"\r\n                          [required]=\"(TravelType.value === 'International' && (userObj.VisaStatus === 'Obtained' ))\" />\r\n                        <span *ngIf=\"!isVisaSubmitted && userObj.VisaStatus !== 'Rejected'\"><sup>&nbsp;*</sup></span>\r\n                      </span>\r\n                      <div *ngIf=\"(f.submitted || VisaNo.touched) && VisaNo.invalid\" style=\"display: block;\"\r\n                        class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaNo.errors['required']\">Visa No is required</div>\r\n                      </div>\r\n\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <input name=\"typevisa\" style=\"width: fit-content;\" class=\"form-control\" autocomplete=\"off\"\r\n                        [(ngModel)]=\"userObj.TypeofVisa\"\r\n                        [typeahead]=\"Appkey === 'VisaProcess' ? informService.VisaProcessTypeofVisa : informService.TypeofVisa\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                        #TypeofVisa=\"ngModel\" placeholder=\"Type of Visa\" #TypeofVisa=\"ngModel\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'TypeofVisa')\" class=\"form-control\"\r\n                        (focusout)=\"focusout($event,'TypeofVisa')\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || TypeofVisa.touched) && TypeofVisa.invalid }\"\r\n                        [disabled]=\"!isShow || updateEdit || userObj.VisaStatus === 'On-arrival' || userObj.VisaStatus === 'Rejected' || userObj.VisaStatus === 'Return to home country'\"\r\n                        [required]=\"TravelType.value === 'International'\" (typeaheadOnSelect)=\"OnOnewayCheck()\" />\r\n                      <div *ngIf=\"(f.submitted || TypeofVisa.touched) && TypeofVisa.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"TypeofVisa.errors['required']\">Visa Type is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                        (click)=\"showMoreInfo(MoreInfo, i, userObj)\">View</button>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n                <tbody>\r\n                  <tr *ngFor=\"let temp of DependentArrayView; let i = index\" [ngClass]=\"temp.VisaStatus === 'Rejected' ? 'f-c':''\">\r\n                    <td>\r\n                      <div class=\"form-check\">\r\n                        <label>\r\n                          <input type=\"checkbox\" name=\"trades - {{i}}\" [(ngModel)]=\"temp.Selected\"\r\n                            (change)=\"checkedItems(temp, i)\" [checked]=\"temp.Selected == true\" [disabled]=\"IsEditMode\">\r\n                        </label>\r\n                      </div>\r\n                    </td>\r\n                    <td>{{temp.GivenName}}</td>\r\n                    <td>{{temp.PassportExpiryDate| date: 'dd-MMM-yyyy'}}</td>\r\n                    <td>{{temp.Relationship}}</td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <input name=\"VisaStatus - {{i}}\" style=\"width: fit-content;\" class=\"form-control\"\r\n                        autocomplete=\"off\" [(ngModel)]=\"temp.VisaStatus\"\r\n                        [typeahead]=\"userObj.Travel_x0020_For == 'Self along with Dependents' ? Appkey ==='VisaProcess' ? informService.VisaProcessVisaStatus  : informService.VisaStatus  : informService.DependentsVisaStatus\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                        #VisaStatus=\"ngModel\" (focusout)=\"focusout($event,'VisaStatus'+i)\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'VisaStatus'+i)\"\r\n                        (typeaheadOnSelect)=\"dependentVisaStatus(temp, RejectionPopup, i)\"\r\n                        [disabled]=\"(!isShow || IsEditMode || !temp.Selected) && (Appkey !== 'VisaProcess' || (Appkey === 'VisaProcess' && (!temp.Selected || !temp.haveToChange)))\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || VisaStatus.touched) && VisaStatus.invalid }\"\r\n                        placeholder=\"Visa Status\" class=\"form-control\"\r\n                        [required]=\"TravelType.value === 'International'\" />\r\n                      <div *ngIf=\"(f.submitted || VisaStatus.touched) && VisaStatus.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaStatus.errors['required']\">Visa Status is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <span class=\"displayFlex\">\r\n                        <input class=\"form-control fitWidth\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                          autocomplete=\"off\" bsDatepicker\r\n                          [ngClass]=\"{ 'is-invalid': (f.submitted || VisaValidTill.touched) && VisaValidTill.invalid }\"\r\n                          [minDate]=\"today\" name=\"VisaValidTill - {{i}}\" [(ngModel)]=\"temp.VisaValidTill\"\r\n                          [bsConfig]=\"bsConfig\" #VisaValidTill=\"ngModel\" placeholder=\"Visa Valid Till\"\r\n                          (ngModelChange)=\"onVisaValidTillChange(temp)\"\r\n                          [disabled]=\"!isShow || updateEdit || !temp.Selected || (Appkey && Appkey === 'VisaProcess' && !temp.haveToChange) ||\r\n                             (temp.VisaStatus && (temp.VisaStatus === 'Submitted' || temp.VisaStatus === 'On-arrival' || temp.VisaStatus === 'Rejected' || temp.VisaStatus === 'Return to home country'))\"\r\n                          [required]=\"(TravelType.value === 'International' && (temp.VisaStatus === 'Obtained'))\" />\r\n                        <span\r\n                          *ngIf=\"!(temp.VisaStatus && (temp.VisaStatus === 'Submitted' || temp.VisaStatus === 'On-arrival' || temp.VisaStatus === 'Return to home country' || temp.VisaStatus === 'Rejected'))\"><sup>&nbsp;*</sup></span>\r\n                      </span>\r\n                      <div *ngIf=\"(f.submitted || VisaValidTill.touched) && VisaValidTill.invalid\"\r\n                        style=\"display: block;\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaValidTill.errors['required']\">Visa Valid Till is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <span class=\"displayFlex\">\r\n                        <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control fitWidth\"\r\n                          style=\"text-transform: capitalize\" name=\"VisaNo - {{i}}\" [(ngModel)]=\"temp.VisaNo\"\r\n                          placeholder=\"Visa No\" #VisaNo=\"ngModel\"\r\n                          [disabled]=\"!isShow || updateEdit || !temp.Selected || (Appkey && Appkey === 'VisaProcess' && !temp.haveToChange) ||\r\n                            (temp.VisaStatus && (temp.VisaStatus === 'Submitted' || temp.VisaStatus === 'On-arrival' || temp.VisaStatus === 'Rejected' || temp.VisaStatus === 'Return to home country'))\"\r\n                          [ngClass]=\"{ 'is-invalid': (f.submitted || VisaNo.touched) && VisaNo.invalid }\"\r\n                          [required]=\"(TravelType.value === 'International' && (temp.VisaStatus === 'Obtained' ))\" />\r\n                        <span\r\n                          *ngIf=\"!(temp.VisaStatus && (temp.VisaStatus === 'Submitted' || temp.VisaStatus === 'On-arrival' || temp.VisaStatus === 'Return to home country' || temp.VisaStatus === 'Rejected'))\"><sup>&nbsp;*</sup></span>\r\n                      </span>\r\n                      <div *ngIf=\"(f.submitted || VisaNo.touched) && VisaNo.invalid\" style=\"display: block;\"\r\n                        class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaNo.errors['required']\">Visa No is required</div>\r\n                      </div>\r\n\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <input name=\"typevisa - {{i}}\" style=\"width: fit-content;\" class=\"form-control\" autocomplete=\"off\"\r\n                        [(ngModel)]=\"temp.TypeofVisa\" [typeahead]=\"informService.DependentTypeofVisa\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                        #TypeofVisa=\"ngModel\" placeholder=\"Type of Visa\" #TypeofVisa=\"ngModel\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'TypeofVisa'+i)\" class=\"form-control\"\r\n                        (focusout)=\"focusout($event,'TypeofVisa'+i)\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || TypeofVisa.touched) && TypeofVisa.invalid }\" disabled\r\n                        [required]=\"TravelType.value === 'International'\" (typeaheadOnSelect)=\"OnOnewayCheck()\" />\r\n                      <div *ngIf=\"(f.submitted || TypeofVisa.touched) && TypeofVisa.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"TypeofVisa.errors['required']\">Visa Type is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                        (click)=\"showMoreInfo(MoreInfo, i, null)\">View</button>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n          <div *ngIf=\"userObj.Travel_x0020_For == 'Self' || userObj.Travel_x0020_For == 'Self along with Dependents'\">\r\n            <div *ngIf=\"isShowDomestic\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"IdentityProof\">Identity Proof</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <input name=\"IdentityProof\" autocomplete=\"off\" [(ngModel)]=\"userObj.IdentityProof\"\r\n                    [typeahead]=\"informService.Proof\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                    typeaheadOptionField=\"name\" placeholder=\"Identity Proof\" [disabled]=\"IsEditMode\"\r\n                    (focusout)=\"focusout($event,'IdentityProof')\" #IdentityProof=\"ngModel\"\r\n                    [ngClass]=\"{ 'is-invalid': (f.submitted || IdentityProof.touched) && IdentityProof.invalid }\"\r\n                    (typeaheadNoResults)=\"typeaheadNoResults($event,'IdentityProof')\" class=\"form-control\"\r\n                    [required]=\"TravelType.value === 'Domestic'\" (typeaheadOnSelect)=\"OnIdProof($event)\" />\r\n                  <div *ngIf=\"(f.submitted || IdentityProof.touched) && IdentityProof.invalid\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"IdentityProof.errors['required']\">Identity Proof is required</div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"IDProofNumber\">Id Proof Number</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autocomplete=\"off\" class=\"form-control\" style=\"text-transform: capitalize\"\r\n                      name=\"IDProofNumber\" [(ngModel)]=\"userObj.IDProofNumber\" placeholder=\"Id Proof Number\"\r\n                      #IDProofNumber=\"ngModel\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || IDProofNumber.touched) && IDProofNumber.invalid }\"\r\n                      [disabled]=\"IsEditMode\" [required]=\"TravelType.value === 'Domestic'\" />\r\n                    <div *ngIf=\"(f.submitted || IDProofNumber.touched) && IDProofNumber.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"IDProofNumber.errors['required']\">Identity Proof Number is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div *ngIf=isShow>\r\n\r\n            <div *ngIf=\"userObj.Travel_x0020_For == 'Self'\">\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"GivenName\">Given Name</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      style=\"text-transform: capitalize\" name=\"GivenName\" [(ngModel)]=\"userObj.GivenName\"\r\n                      placeholder=\"Given Name\" #GivenName=\"ngModel\" [disabled]=\"IsEditMode\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || GivenName.touched) && GivenName.invalid }\" readonly\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || GivenName.touched) && GivenName.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"GivenName.errors['required']\">Given Name is required</div>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"SurName\">Surname</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      style=\"text-transform: capitalize\" name=\"SurName\" [(ngModel)]=\"userObj.SurName\"\r\n                      placeholder=\"Surname\" #SurName=\"ngModel\" [disabled]=\"IsEditMode\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || SurName.touched) && SurName.invalid }\" readonly\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || SurName.touched) && SurName.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"SurName.errors['required']\">Surname is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"PassportNo\">Passport No</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      pattern=\"^[a-zA-Z0-9]+$\" style=\"text-transform: capitalize\" name=\"PassportNo\" maxlength=\"75\"\r\n                      [(ngModel)]=\"userObj.PassportNo\" placeholder=\"Passport No\" #PassportNo=\"ngModel\"\r\n                      [disabled]=\"IsEditMode\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || PassportNo.touched) && PassportNo.invalid }\" readonly\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || PassportNo.touched) && PassportNo.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"PassportNo.errors['required']\">Passport No is required</div>\r\n                      <div *ngIf=\"PassportNo.errors['pattern']\">Enter a valid passport number</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"PassportExpiryDate\">Passport Expiry Date</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input class=\"form-control\" autocomplete=\"off\" #datepickerYMD=\"bsDatepicker\" bsDatepicker\r\n                      name=\"PassportExpiryDate\" [(ngModel)]=\"userObj.PassportExpiryDate\" [bsConfig]=\"bsConfig\"\r\n                      #PassportExpiryDate=\"ngModel\" [minDate]=\"minDate\" disabled (keydown)=\"number($event)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || PassportExpiryDate.touched) && PassportExpiryDate.invalid }\"\r\n                      placeholder=\"Passport Expiry Date\" readonly [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || PassportExpiryDate.touched) && PassportExpiryDate.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"PassportExpiryDate.errors['required']\">Passport Expiry is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"DateofBirth\">Date of Birth (in Passport)</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" autocomplete=\"off\"\r\n                      (keydown)=\"number($event)\" bsDatepicker name=\"DateofBirth\" [(ngModel)]=\"userObj.DateofBirth\"\r\n                      [bsConfig]=\"bsConfig\" #DateofBirth=\"ngModel\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || DateofBirth.touched) && DateofBirth.invalid }\"\r\n                      [maxDate]=\"minDate\" placeholder=\"Date of Birth (in Passport)\" readonly disabled\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || DateofBirth.touched) && DateofBirth.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"DateofBirth.errors['required']\">Date of Birth is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"VisaStatus\">Visa Status</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input name=\"VisaStatus\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.VisaStatus\"\r\n                      [typeahead]=\"Appkey ==='VisaProcess' ? informService.VisaProcessVisaStatus : informService.VisaStatus\"\r\n                      [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                      #VisaStatus=\"ngModel\" (focusout)=\"focusout($event,'VisaStatus')\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'VisaStatus')\"\r\n                      [disabled]=\"IsEditMode && Appkey !== 'VisaProcess'\"\r\n                      (typeaheadOnSelect)=\"visaStatus($event, RejectionPopup)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || VisaStatus.touched) && VisaStatus.invalid }\"\r\n                      placeholder=\"Visa Status\" class=\"form-control\"\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || VisaStatus.touched) && VisaStatus.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"VisaStatus.errors['required']\">Visa Status is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"VisaValidTill\">Visa Valid Till</label>\r\n                    <sup>\r\n                      <span *ngIf=\"!isVisaSubmitted && userObj.VisaStatus !== 'Rejected'\">*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                      autocomplete=\"off\" bsDatepicker\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || VisaValidTill.touched) && VisaValidTill.invalid }\"\r\n                      [minDate]=\"today\" name=\"VisaValidTill\" [(ngModel)]=\"userObj.VisaValidTill\" [bsConfig]=\"bsConfig\"\r\n                      #VisaValidTill=\"ngModel\" placeholder=\"Visa Valid Till\"\r\n                      [disabled]=\"updateEdit || isVisaSubmitted || userObj.VisaStatus === 'Rejected'\"\r\n                      (ngModelChange)=\"onVisaValidTillChange(userObj)\"\r\n                      [required]=\"(TravelType.value === 'International' && (userObj.VisaStatus === 'Obtained'))\" />\r\n                    <div *ngIf=\"(f.submitted || VisaValidTill.touched) && VisaValidTill.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"VisaValidTill.errors['required']\">Visa Valid Till is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"TypeofVisa\">Type of Visa</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input name=\"typevisa\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.TypeofVisa\"\r\n                      [typeahead]=\"Appkey === 'VisaProcess' ? informService.VisaProcessTypeofVisa : informService.TypeofVisa\"\r\n                      [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                      #TypeofVisa=\"ngModel\" placeholder=\"Type of Visa\" #TypeofVisa=\"ngModel\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'TypeofVisa')\" class=\"form-control\"\r\n                      (focusout)=\"focusout($event,'TypeofVisa')\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || TypeofVisa.touched) && TypeofVisa.invalid }\"\r\n                      [disabled]=\"updateEdit || userObj.VisaStatus === 'On-arrival' || userObj.VisaStatus === 'Rejected' || userObj.VisaStatus === 'Return to home country'\"\r\n                      [required]=\"TravelType.value === 'International'\" (typeaheadOnSelect)=\"OnOnewayCheck()\" />\r\n                    <div *ngIf=\"(f.submitted || TypeofVisa.touched) && TypeofVisa.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"TypeofVisa.errors['required']\">Visa Type is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"VisaNo\">Visa No</label>\r\n                    <sup *ngIf=\"!isVisaSubmitted && userObj.VisaStatus !== 'Rejected'\">\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      style=\"text-transform: capitalize\" name=\"VisaNo\" [(ngModel)]=\"userObj.VisaNo\"\r\n                      placeholder=\"Visa No\" #VisaNo=\"ngModel\"\r\n                      [disabled]=\"updateEdit || isVisaSubmitted || userObj.VisaStatus === 'Rejected'\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || VisaNo.touched) && VisaNo.invalid }\"\r\n                      [required]=\"(TravelType.value === 'International' && (userObj.VisaStatus === 'Obtained' ))\" />\r\n                    <div *ngIf=\"(f.submitted || VisaNo.touched) && VisaNo.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"VisaNo.errors['required']\">Visa No is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n\r\n                <ng-container *ngIf=\"(userObj.TravelStatus === 'Visa Rejected' || userObj.TravelStatus === 'Void')\">\r\n                  <div class=\"col-md-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"VisaNo\">Rejected Reason</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-md-3\">\r\n                    <div class=\"form-group\">\r\n                      <input type=\"text\" readonly class=\"form-control\" style=\"text-transform: capitalize\"\r\n                        name=\"RejectedReason\" [(ngModel)]=\"userObj.CancellationComments\" placeholder=\"Rejected Reason\"\r\n                        #RejectedReason=\"ngModel\">\r\n                    </div>\r\n                  </div>\r\n                </ng-container>\r\n\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-md-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"AdvanceRequired\">Advance Required?</label>\r\n                  <sup>\r\n                    <span>*</span>\r\n                  </sup>\r\n                </div>\r\n              </div>\r\n              <ng-container *ngIf=\"Appkey !== 'VisaProcess'\">\r\n              <div class=\"col-md-3\" *ngIf=\"isEdit && !updateEdit \">\r\n                <input type=\"radio\" [(ngModel)]=\"userObj.AdvanceRequired\" value=\"true\" name=\"AdvanceRequired\"\r\n                  [checked]=\"userObj.AdvanceRequired\" (change)=\"onAdvance('true', PANNoNotification)\"\r\n                  #AdvanceRequired=\"ngModel\" \r\n                  [ngClass]=\"{ 'is-invalid': (f.submitted || AdvanceRequired.touched) && AdvanceRequired.invalid }\"\r\n                  required />\r\n                Yes\r\n                <input type=\"radio\" [(ngModel)]=\"userObj.AdvanceRequired\" value=\"false\"\r\n                [checked]=\"!userObj.AdvanceRequired\" (change)=\"onAdvance('false', PANNoNotification)\"\r\n                name=\"AdvanceRequired\" #AdvanceRequired=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || AdvanceRequired.touched) && AdvanceRequired.invalid }\"\r\n                required />\r\n                No\r\n              </div>\r\n              <div class=\"col-md-3\" *ngIf=\"updateEdit && isEdit\">\r\n                <input type=\"radio\" [(ngModel)]=\"userObj.AdvanceRequired\" value=\"true\" name=\"AdvanceRequired\"\r\n                  [checked]=\"userObj.AdvanceRequired\" (change)=\"onAdvance('true', PANNoNotification)\"\r\n                  [attr.disabled]=\"IsEditMode\"\r\n                  [ngClass]=\"{ 'is-invalid': (f.submitted || AdvanceRequired.touched) && AdvanceRequired.invalid }\"\r\n                  required #AdvanceRequired=\"ngModel\" />\r\n                Yes\r\n                <input type=\"radio\" [(ngModel)]=\"userObj.AdvanceRequired\" value=\"false\"\r\n                  [attr.disabled]=\"IsEditMode\" [checked]=\"!userObj.AdvanceRequired\"\r\n                  (change)=\"onAdvance('false', PANNoNotification)\" name=\"AdvanceRequired\" #AdvanceRequired=\"ngModel\"\r\n                  [ngClass]=\"{ 'is-invalid': (f.submitted || AdvanceRequired.touched) && AdvanceRequired.invalid }\"\r\n                  required />\r\n                No\r\n              </div>\r\n              <div class=\"col-md-3\" *ngIf=\"!isEdit && !updateEdit\">\r\n                <input type=\"radio\" name=\"AdvanceRequired\" [(ngModel)]=\"userObj.AdvanceRequired\" value=\"true\"\r\n                  (change)=\"onAdvance('true', PANNoNotification)\" #AdvanceRequired=\"ngModel\" name=\"AdvanceRequired\"\r\n                  [ngClass]=\"{ 'is-invalid': (f.submitted || AdvanceRequired.touched) && AdvanceRequired.invalid }\"\r\n                  required />\r\n                Yes\r\n                <input type=\"radio\" name=\"AdvanceRequired\" [(ngModel)]=\"userObj.AdvanceRequired\" value=\"false\"\r\n                  (change)=\"onAdvance('false', PANNoNotification)\" #AdvanceRequired=\"ngModel\" name=\"AdvanceRequired\"\r\n                  [ngClass]=\"{ 'is-invalid': (f.submitted || AdvanceRequired.touched) && AdvanceRequired.invalid }\"\r\n                  required />\r\n                No\r\n                <div *ngIf=\"(f.submitted || AdvanceRequired.touched) && AdvanceRequired.invalid\"\r\n                  class=\"invalid-feedback\">\r\n                  <div *ngIf=\"AdvanceRequired.errors['required']\">Advance Required is required</div>\r\n                </div>\r\n              </div>\r\n              </ng-container>\r\n\r\n              <ng-container *ngIf=\"Appkey === 'VisaProcess'\">\r\n                <div class=\"col-md-3\">\r\n                  <input type=\"radio\" value=\"true\" name=\"AdvanceRequired\"\r\n                    [checked]=\"userObj.AdvanceRequired\" disabled\r\n                      />\r\n                  Yes\r\n                  <input type=\"radio\"  value=\"false\" disabled\r\n                  [checked]=\"!userObj.AdvanceRequired\" \r\n                  name=\"AdvanceRequired\" />\r\n                  No\r\n                </div>\r\n              </ng-container>\r\n            </div>\r\n            <div *ngIf=\"isAdvance\">\r\n              <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Currency</th>\r\n                    <th>Card</th>\r\n                    <th>Cash</th>\r\n                    <th>Amount</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let money of AdvanceDetails; let i = index\">\r\n                    <td class=\"form-group\">\r\n                      <input [(ngModel)]=\"money.Currency\" name=\"Currency - {{i}}\" [typeahead]=\"CurrancyType\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"currency_types\"\r\n                        placeholder=\"Currency\" class=\"form-control\" [disabled]=\"updateEdit || Appkey==='VisaProcess'\"\r\n                        (typeaheadOnSelect)=\"OnCurrencyCheck($event,money,i)\" (focusout)=\"focusout($event,'Currency',i)\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || Currency.touched) && Currency.invalid }\"\r\n                        #Currency=\"ngModel\" [required]=\"userObj.AdvanceRequired == 'true'\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'Currency',i)\" />\r\n                      <div *ngIf=\"(f.submitted || Currency.touched) && Currency.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"Currency.errors['required']\">Currency is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td class=\"form-group\">\r\n                      <input type=\"number\" autocomplete=\"off\" (keydown)=\"numberOnly($event)\" class=\"form-control\"\r\n                        [(ngModel)]=\"money.Card\" name=\"Card - {{i}}\" #Card=\"ngModel\" [disabled]=\"updateEdit || Appkey==='VisaProcess'\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || Card.touched) && Card.invalid }\"\r\n                        [required]=\"userObj.AdvanceRequired == 'true'\">\r\n                      <div *ngIf=\"(f.submitted || Card.touched) && Card.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"Card.errors['required']\">Card is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td class=\"form-group\">\r\n                      <input type=\"number\" autocomplete=\"off\" (keydown)=\"numberOnly($event)\" class=\"form-control\"\r\n                        [(ngModel)]=\"money.Cash\" name=\"Cash - {{i}}\" #Cash=\"ngModel\" [disabled]=\"updateEdit || Appkey==='VisaProcess'\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || Cash.touched) && Cash.invalid }\"\r\n                        [required]=\"userObj.AdvanceRequired == 'true'\">\r\n                      <div *ngIf=\"(f.submitted || Cash.touched) && Cash.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"Cash.errors['required']\">Cash is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td class=\"form-group\">\r\n                      <input type=\"number\" autocomplete=\"off\" class=\"form-control\" value=\"{{money.Cash+money.Card}}\"\r\n                        name=\"Amount - {{i}}\" [disabled]=\"IsEditMode\" readonly\r\n                        [required]=\"userObj.AdvanceRequired == 'true'\" />\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n\r\n              <ng-container *ngIf=\"Appkey != 'VisaProcess'\">\r\n              <div class=\"ml-2 mb-3 mt-2\" *ngIf=\"!isEdit && AdvanceDetails.length > 1\" style=\"float: right;\">\r\n                <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteNeRowCurrency()\">Delete</button>\r\n              </div>\r\n              <div class=\"ml-2 mb-3 mt-2\" *ngIf=\"!isEdit && AdvanceDetails.length >= 1\" style=\"float: right;\">\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"addNeRowCurrency()\">Add</button>\r\n              </div>\r\n              <div class=\"ml-2 mb-3 mt-2\"\r\n                *ngIf=\"isEdit && AdvanceDetails.length > 1 && Appkey !== 'approval' && Appkey !== 'UpdateTicket'\"\r\n                style=\"float: right;\">\r\n                <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteNeRowCurrency()\">Delete</button>\r\n              </div>\r\n              <div class=\"ml-2 mb-3 mt-2\"\r\n                *ngIf=\"isEdit && AdvanceDetails.length >= 1 && Appkey !== 'approval' && Appkey !== 'UpdateTicket'\"\r\n                style=\"float: right;\">\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"addNeRowCurrency()\">Add</button>\r\n              </div>\r\n              </ng-container>\r\n\r\n            </div>\r\n\r\n\r\n          </div>\r\n\r\n\r\n\r\n\r\n        </accordion-group>\r\n      </accordion>\r\n\r\n\r\n\r\n      <accordion>\r\n        <accordion-group heading=\"Trip Details\">\r\n          <div class=\"form-group row\" *ngIf=\"isEdit\">\r\n            <div>\r\n              <input type=\"radio\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory1\" value=\"OneWay\"\r\n                (change)=\"onRadioChange($event)\" [checked]=\"userObj.TripType === 'OneWay'\"\r\n                [attr.disabled]=\"IsEditMode\" />\r\n              One Way\r\n              <input type=\"radio\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory2\" value=\"RoundTrip\"\r\n                (change)=\"onRadioChange($event)\" [checked]=\"userObj.TripType === 'RoundTrip'\"\r\n                [attr.disabled]=\"IsEditMode\" />\r\n              Round Trip\r\n              <input type=\"radio\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory3\" value=\"MultiCity\"\r\n                (change)=\"onRadioChange($event)\" [checked]=\"userObj.TripType === 'MultiCity'\"\r\n                [attr.disabled]=\"IsEditMode\" />\r\n              Multicity\r\n\r\n            </div>\r\n          </div>\r\n          <div class=\"form-group row\" *ngIf=\"!isEdit\">\r\n            <div>\r\n              <input type=\"radio\" name=\"TripType\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory1\"\r\n                value=\"OneWay\" (change)=\"onRadioChange($event)\" #TripType=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TripType.touched) && TripType.invalid }\" required\r\n                *ngIf=\"showOneWay\" />\r\n              <span *ngIf=\"showOneWay\">&nbsp;One Way&nbsp;</span>\r\n              <input type=\"radio\" name=\"TripType\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory2\"\r\n                value=\"RoundTrip\" (change)=\"onRadioChange($event)\" #TripType=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TripType.touched) && TripType.invalid }\" required />\r\n              Round Trip\r\n              <input type=\"radio\" name=\"TripType\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory3\"\r\n                value=\"MultiCity\" (change)=\"onRadioChange($event)\" #TripType=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TripType.touched) && TripType.invalid }\" required />\r\n              Multicity\r\n              <div *ngIf=\"(f.submitted || TripType.touched) && TripType.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TripType.errors['required']\">Trip Type is required</div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"OnewayTripVisaType && ( userObj.TypeofVisa || DependentArrayView.length > 0 )\">\r\n            <div class=\"row mb-3\" style=\"color: brown;\">\r\n              <div class=\"col-md-12\">\r\n                One way not allowed for the type of visa selected.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"isTableShow\">\r\n            <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n              <thead>\r\n                <tr>\r\n                  <th>From City</th>\r\n                  <th>To City</th>\r\n                  <th>Date</th>\r\n                  <th>First Preference</th>\r\n                  <th>Second Preference</th>\r\n                  <th\r\n                    *ngIf=\"Appkey == 'Reschedule' || Appkey == 'VisaProcess' || Appkey == 'Mytravel' || Appkey == 'VisaProcessView' || Appkey == 'approval'\">\r\n                    Ticket Status</th>\r\n                  <th *ngIf=\"Appkey == 'Reschedule'\">Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let temp of tripDeatilsArray; let i = index\"\r\n                  [ngClass]=\"{ 'f-w': temp.Actions == 'Delete', 'f-c': temp.Actions == 'Cancel'}\">\r\n                  <td class=\"form-group\">\r\n                    <input style=\"width: unset;\" [(ngModel)]=\"temp.Form\" autocomplete=\"temp.Form\" name=\"Form - {{i}}\"\r\n                      [typeahead]=\"locationArrays\" #Form=\"ngModel\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                      typeaheadOptionField=\"location\" placeholder=\"From City\" class=\"form-control\"\r\n                      [disabled]=\"IsEditMode\" (typeaheadNoResults)=\"typeaheadNoResults($event,'Form',i)\"\r\n                      (focusout)=\"focusout($event,'Form',i)\"\r\n                      (typeaheadOnSelect)=\"onFromCityChange($event,tripDeatilsArray, i)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || Form.touched) && Form.invalid }\"\r\n                      [disabled]=\"updateEdit\" #Form=\"ngModel\" required>\r\n                    <div *ngIf=\"(f.submitted || Form.touched) && Form.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"Form.errors['required']\">From City is required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input style=\"width: unset;\" [(ngModel)]=\"temp.To\" autocomplete=\"temp.To\" name=\"To - {{i}}\"\r\n                      [typeahead]=\"locationArrays\" #To=\"ngModel\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                      typeaheadOptionField=\"location\" placeholder=\"To City\" class=\"form-control\" [disabled]=\"IsEditMode\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'To',i)\" (focusout)=\"focusout($event,'To',i)\"\r\n                      (typeaheadOnSelect)=\"onToCityChange($event,tripDeatilsArray , i)\"\r\n                      [disabled]=\"temp.toDisable || updateEdit\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || To.touched) && To.invalid }\" required>\r\n                    <div *ngIf=\"(f.submitted || To.touched) && To.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"To.errors['required']\">To City is required</div>\r\n                    </div>\r\n\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input style=\"width: unset;\" class=\"form-control\" #datepickerYMD=\"bsDatepicker\"\r\n                      (keydown)=\"number($event)\" autocomplete=\"off\" bsDatepicker #date=\"ngModel\"\r\n                      name=\"TravelDate - {{i}}\" [(ngModel)]=\"temp.TravelDate\" [bsConfig]=\"bsConfig\"\r\n                      [maxDate]=\"getMaxDate(i)\" [minDate]=\"getMinDate(i)\" placeholder=\"Travel Date\"\r\n                      [disabled]=\"updateEdit || temp.TicketStatus == 'Rescheduled' || temp.TicketStatus == 'Cancelled' || Appkey === 'VisaProcess' || temp.TicketStatus == 'Reschedule Requested' || ((temp.TicketStatus == 'Rescheduled' || temp.TicketStatus == 'Booked') && temp.ActualDate && getDateWithoutTime(temp.ActualDate) < getDateWithoutTime(minDate))\"\r\n                      #TravelDate=\"ngModel\" (ngModelChange)=\"onValueChange($event,tripDeatilsArray , i)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || TravelDate.touched) && TravelDate.invalid }\" required>\r\n                    <div *ngIf=\"(f.submitted || TravelDate.touched) && TravelDate.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"TravelDate.errors['required']\">Travel Date is required</div>\r\n                    </div>\r\n\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input style=\"width: unset;\" [(ngModel)]=\"temp.FirstPreferance\" autocomplete=\"temp.FirstPreferance\"\r\n                      name=\"FirstPreferance - {{i}}\" [typeahead]=\"informService.TimeArray\" #FirstPreferance=\"ngModel\"\r\n                      [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                      class=\"form-control\" (typeaheadNoResults)=\"typeaheadNoResults($event,'FirstPreferance',i)\"\r\n                      placeholder=\"First Preference\" [disabled]=\"updateEdit || Appkey === 'VisaProcess'\"\r\n                      (focusout)=\"focusout($event,'FirstPreferance',i)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || FirstPreferance.touched) && FirstPreferance.invalid }\"\r\n                      required (typeaheadOnSelect)=\"onFirstChange($event,tripDeatilsArray , i)\" />\r\n                    <div *ngIf=\"(f.submitted || FirstPreferance.touched) && FirstPreferance.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"FirstPreferance.errors['required']\">First Preference is required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input style=\"width: unset;\" [(ngModel)]=\"temp.SecondPreferance\"\r\n                      autocomplete=\"temp.SecondPreferance\" name=\"SecondPreferance - {{i}}\"\r\n                      [typeahead]=\"informService.TimeArray\" #SecondPreferance=\"ngModel\" [typeaheadOptionsLimit]=\"7\"\r\n                      [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\" class=\"form-control\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'SecondPreferance',i)\"\r\n                      (typeaheadOnSelect)=\"onSecondChange($event,tripDeatilsArray , i)\" placeholder=\"Second Preference\"\r\n                      [disabled]=\"updateEdit || temp.fromDisable || Appkey === 'VisaProcess'\"\r\n                      (focusout)=\"focusout($event,'SecondPreferance',i)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || SecondPreferance.touched) && SecondPreferance.invalid }\"\r\n                      required />\r\n                    <div *ngIf=\"(f.submitted || SecondPreferance.touched) && SecondPreferance.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"SecondPreferance.errors['required']\">Second Preference is required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td class=\"form-group\"\r\n                    *ngIf=\"Appkey == 'Reschedule' || Appkey == 'VisaProcess' || Appkey == 'Mytravel' || Appkey == 'VisaProcessView' || Appkey == 'approval'\">\r\n                    <input style=\"width: unset;\" type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\"\r\n                      class=\"form-control\" name=\"TicketStatus - {{i}}\" [(ngModel)]=\"temp.TicketStatus\" readonly />\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <span *ngIf=\"Appkey !== 'VisaProcess' && Appkey !== 'VisaProcessView' && Appkey == 'Mytravel' && getDateWithoutTime(tripDeatilsArray[i].TravelDate) >= todayWithoutTime && userObj.TravelStatus != 'Pending Approval' \r\n                        && (temp.TicketStatus != 'Cancelled' && temp.TicketStatus != 'Cancel Requested' && temp.TicketStatus != 'Rescheduled' && temp.TicketStatus != 'Reschedule Requested')\r\n                           && (userObj.TripType === 'OneWay' || userObj.TripType === 'MultiCity' ||\r\n                           ( userObj.TripType == 'RoundTrip' &&\r\n                            (\r\n                              i != userObj.firstLegIndex &&\r\n                              (temp.TicketStatus == 'Booked' || temp.TicketStatus == 'Open' || temp.TicketStatus == 'Partially Booked')  &&\r\n                              ( getDateWithoutTime(tripDeatilsArray[userObj.firstLegIndex].ActualDate) <= todayWithoutTime )\r\n                            )\r\n                            )\r\n                            )\">\r\n                      <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\" (click)=\"TravelCancelUpdate(i)\"\r\n                        [innerText]=\"tripDeatilsArray[i].Actions=='Cancel'?'Clear':'Cancel'\"></button>\r\n                    </span>\r\n                    <span *ngIf=\"temp.ReferenceLeg != null || temp.ReferenceLeg != undefined\">\r\n                      <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                        (click)=\"ViewPrevious(Previous,temp)\">View Previous</button>\r\n                    </span>\r\n\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div class=\"row mt-3 mb-3\" *ngIf=\"isDeviation\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"DeviationReason\">Deviation Reason</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <input autocomplete=\"off\" [disabled]=\"updateEdit || Appkey === 'VisaProcess'\"\r\n                  [typeahead]=\"informService.DeviationReason\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                  name=\"DeviationReason\" (focusout)=\"focusout($event,'DeviationReason')\"\r\n                  [(ngModel)]=\"userObj.DeviationReason\" typeaheadOptionField=\"name\" #DeviationReason=\"ngModel\"\r\n                  placeholder=\"Deviation Reason\" (typeaheadNoResults)=\"typeaheadNoResults($event,'DeviationReason')\"\r\n                  class=\"form-control\"\r\n                  [ngClass]=\"{ 'is-invalid': (f.submitted || DeviationReason.touched) && DeviationReason.invalid }\"\r\n                  [required]=\"isDeviation === true\" />\r\n                <div *ngIf=\"(f.submitted || DeviationReason.touched) && DeviationReason.invalid\"\r\n                  class=\"invalid-feedback\">\r\n                  <div *ngIf=\"DeviationReason.errors['required']\">Deviation Reason is required</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row mt-3 mb-3\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ReportingDate\">Reporting Date\r\n                </label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" autocomplete=\"off\"\r\n                bsDatepicker name=\"ReportingDate\" [(ngModel)]=\"userObj.ReportingDate\" [bsConfig]=\"bsConfig\"\r\n                #ReportingDate=\"ngModel\" placeholder=\"Reporting Date\"\r\n                [minDate]=\"userObj.firstLegIndex ? tripDeatilsArray[userObj.firstLegIndex].TravelDate : tripDeatilsArray[0].TravelDate ? tripDeatilsArray[0].TravelDate : today\"\r\n                [maxDate]=\"userObj.TripType === 'OneWay' ? '':tripDeatilsArray[tripDeatilsArray.length-1].TravelDate\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || ReportingDate.touched) && ReportingDate.invalid }\" required\r\n                [disabled]=\"updateEdit || Appkey === 'VisaProcess'\"\r\n                (ngModelChange)=\"onValueTriggerReportingDate($event)\" required />\r\n              <div *ngIf=\"(f.submitted || ReportingDate.touched) && ReportingDate.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"ReportingDate.errors['required']\">Reporting Date is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"ml-2 mb-3 mt-3\" *ngIf=\"isDelete && tripDeatilsArray.length > 1\" style=\"float: right;\">\r\n            <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteNeRow($event,tripDeatilsArray,i)\">Remove\r\n              Itinerary</button>\r\n          </div>\r\n          <div class=\"ml-2 mb-3 mt-3\" *ngIf=\"isShowBtn\" style=\"float: right;\">\r\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"addNeRow($event,tripDeatilsArray,i)\">Add\r\n              Itinerary</button>\r\n          </div>\r\n        </accordion-group>\r\n      </accordion>\r\n\r\n      <accordion\r\n        *ngIf=\"(Appkey == 'Mytravel' || Appkey == 'UpdateTicket' || Appkey == 'VisaProcessView') && userObject.VisaValidityLog && userObject.VisaValidityLog.length > 0\">\r\n        <accordion-group heading=\"Visa Tracker\">\r\n          <div *ngIf=\"userObject.VisaValidityLog && userObject.VisaValidityLog.length > 0\">\r\n            <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Given Name</th>\r\n                  <th>Sur Name</th>\r\n                  <th>Modified On</th>\r\n                  <th>Visa Valid Till</th>\r\n                  <th>Visa Number</th>\r\n                  <th>Type Of Visa</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let log of userObject.VisaValidityLog\">\r\n                  <td class=\"form-group\">\r\n                    {{log.GivenName}}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{log.SurName}}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{log.ModifiedOn | date: 'dd-MMM-yyyy HH:mm:ss' }}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{log.VisaValidTill | date: 'dd-MMM-yyyy' }}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{log.VisaNumber}}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{log.TypeOfVisa}}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </accordion-group>\r\n      </accordion>\r\n\r\n      <accordion *ngIf=\"isEdit && (Appkey == 'Mytravel' || Appkey == 'VisaProcessView') && TicketFiles && TicketFiles.length > 0 \">\r\n        <accordion-group heading=\"Ticket Details\">\r\n          <div class=\"row mt-2\">\r\n            <div class=\"col-md-9\" *ngIf=\"TicketFiles && TicketFiles.length > 0\">\r\n              <table class=\"table table-bordered\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>File Name</th>\r\n                    <th>Created Date</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let temp of TicketFiles; let i = index\">\r\n                    <td>\r\n                      <a\r\n                      href=\"https://mavericsystems.sharepoint.com/{{temp.ServerRelativePath.DecodedUrl}}\">{{temp.FileName}}</a>\r\n                        <!-- href=\"https://mavericsystems.sharepoint.com/sites/app_data_center/_layouts/Download.aspx?sourceurl={{temp.ServerRelativePath.DecodedUrl}}\"></a>{{temp.FileName}}</a> -->\r\n                    </td>\r\n                    <td>\r\n                      {{temp.CreatedTime | date:'dd-MMM-yyyy HH:mm:ss'}}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </accordion-group>\r\n      </accordion>\r\n\r\n      <accordion\r\n        *ngIf=\"isEdit && Appkey == 'UpdateTicket' && (informService.UserType =='Admin' || informService.UserType =='Travel Desk')\">\r\n        <accordion-group heading=\"Admin Use\">\r\n          <div class=\"row mb-4\" *ngIf=\"isDependentVisaRejected\">\r\n            <div class=\"col-md-3\">\r\n            </div>\r\n            <div class=\"col-md-6 \" style=\"color:red;padding-top: 8px; border: 1px solid;\">\r\n              <div>\r\n                <h5>Dependent's Visa Status Rejected Alert</h5>\r\n                <div>\r\n                  One of the travellers' visa status is rejected.\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row mb-4\" *ngIf=\"isPasswordExpireInSixMnt && updateEdit\">\r\n            <div class=\"col-md-3\">\r\n            </div>\r\n            <div class=\"col-md-6 \" style=\"color:red;padding-top: 8px; border: 1px solid;\">\r\n              <div>\r\n\r\n                <h5>Passport Expiry Alert</h5>\r\n\r\n                <div>\r\n                  Your Passport expiry date is less than 6-months against your Travel date. Kindy get in\r\n                  touch with \"traveldesk@maveric-systems.com\" to take guidance whether it is advisable to travel on the\r\n                  requested date.\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-3\">\r\n            </div>\r\n          </div>\r\n          <div class=\"row  mb-4\" *ngIf=\"DependSixMnt   && updateEdit\">\r\n            <div class=\"col-md-3\">\r\n            </div>\r\n            <div class=\"col-md-6 \" style=\"color:red;padding-top: 8px; border: 1px solid;\">\r\n              <div>\r\n\r\n                <h5>Passport Expiry Alert - Dependent</h5>\r\n\r\n                <div>\r\n\r\n                  <label for=\"\"> Dependent Passport expiry date is less than 6-months against your Travel date.\r\n                    Kindy\r\n                    get\r\n                    in touch with \"traveldesk@maveric-systems.com\" to take guidance whether it is advisable to travel on\r\n                    the\r\n                    requested date.</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n            </div>\r\n          </div>\r\n          <div class=\"row mb-4\" *ngIf=\"userObject?.clientDebitSrcFiles?.length > 0\">\r\n            <div class=\"col-md-3\">\r\n            </div>\r\n            <div class=\"col-md-6 \" style=\"color:orangered;padding-top: 8px; border: 1px solid;\">\r\n              <div>\r\n                <h5>Client Debit Attachment Alert</h5>\r\n                <div>\r\n                  Please check and validate attached client debit files\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"tripDeatilsArray && tripDeatilsArray.length > 0\">\r\n            <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n              <thead>\r\n                <tr>\r\n                  <th>From City</th>\r\n                  <th>To City</th>\r\n                  <th>Date</th>\r\n                  <th>Ticket Status</th>\r\n                  <th>Actual Departure Date</th>\r\n                  <th>Actual Arrival Date</th>\r\n                  <th class=\"text-center\"> Action </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let admin of tripDeatilsArray; let i = index\"\r\n                  [ngClass]=\"{ 'f-b': admin.Actions == 'Book' , 'f-c': admin.Actions == 'Cancel','f-r': admin.Actions == 'Reschedule'}\">\r\n                  <td class=\"form-group\">\r\n                    {{admin.Form}}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{admin.To}}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{admin.TravelDate | date: 'dd-MM-yyyy' }}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{admin.TicketStatus}}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                      autocomplete=\"off\" bsDatepicker #date=\"ngModel\" name=\"ActualDate - {{i}}\"\r\n                      [(ngModel)]=\"admin.ActualDate\" [bsConfig]=\"bsConfig\" placeholder=\"Actual Date\"\r\n                      #ActualDate=\"ngModel\" (ngModelChange)=\"onActualDateChange($event,tripDeatilsArray,i)\"\r\n                      [disabled]=\"getDisabled(i,tripDeatilsArray) || userObj.TravelStatus === 'Visa Pending' || userObj.TravelStatus === 'Visa Rejected' || userObj.TravelStatus === 'Void'\"\r\n                      [maxDate]=\"maxArrivalDate\"\r\n                      [ngClass]=\"{ 'is-invalid': (af.submitted || ActualDate.touched) && ActualDate.invalid }\" required>\r\n                    <div *ngIf=\"(af.submitted || ActualDate.touched) && ActualDate.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"ActualDate.errors['required']\">Actual Date is required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                      autocomplete=\"off\" bsDatepicker #date=\"ngModel\" name=\"ArrivalDate - {{i}}\"\r\n                      [(ngModel)]=\"admin.ArrivalDate\" [bsConfig]=\"bsConfig\" placeholder=\"Arrival Date\"\r\n                      #ArrivalDate=\"ngModel\" (ngModelChange)=\"onArrivalDateChange($event,tripDeatilsArray,i)\"\r\n                      [minDate]=\"admin.ActualDate\"\r\n                      [disabled]=\"admin.TicketStatus == 'Booked' || userObj.TravelStatus === 'Visa Pending' || userObj.TravelStatus === 'Visa Rejected' || userObj.TravelStatus === 'Void'\"\r\n                      [ngClass]=\"{ 'is-invalid': (af.submitted || ArrivalDate.touched) && ArrivalDate.invalid }\"\r\n                      required>\r\n                    <div *ngIf=\"(af.submitted || ArrivalDate.touched) && ArrivalDate.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"ArrivalDate.errors['required']\">Arrival Date is required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td class=\"text-center\">\r\n                    <span>\r\n                      <button type=\"button\" id=\"btnCancel\" class=\"btn btn-primary\"\r\n                        *ngIf=\"informService.UserType ==='Travel Desk' || informService.UserType ==='Admin'\"\r\n                        (click)=\"BookedStatus($event,tripDeatilsArray,i,admin)\"\r\n                        [disabled]=\"admin.TicketStatus != 'Open' || userObj.TravelStatus === 'Visa Pending' || userObj.TravelStatus === 'Visa Rejected' || userObj.TravelStatus === 'Void' || userObj.TravelStatus === 'Reschedule Required'\">Book</button>\r\n                    </span>\r\n                    <span>\r\n                      <button type=\"button\" id=\"btnCancel\" class=\"btn btn-primary\"\r\n                        *ngIf=\"informService.UserType ==='Travel Desk' || informService.UserType ==='Admin'\"\r\n                        (click)=\"CancelStatus($event,tripDeatilsArray,i,admin)\"\r\n                        [disabled]=\"(admin.TicketStatus == 'Open' || admin.TicketStatus == 'Booked'|| admin.TicketStatus == 'Cancelled'|| admin.TicketStatus == 'Rescheduled') || userObj.TravelStatus === 'Visa Pending' || userObj.TravelStatus === 'Visa Rejected' || userObj.TravelStatus === 'Void' || userObj.TravelStatus === 'Reschedule Required'\">Cancel</button>\r\n\r\n                    </span>\r\n                    <span>\r\n                      <button type=\"button\" id=\"btnCancel\" class=\"btn btn-danger px-4\"\r\n                        (click)=\"AdminView(LegView,admin)\">View Changes</button>\r\n                    </span>\r\n                    <span>\r\n                      <button type=\"btn\" class=\"btn btn-primary px-4 ml-1  mt-1\" [disabled]=\"!userObj.TravelMode\"\r\n                        (click)=\"AddCost(UpdateCosts, admin)\"\r\n                        *ngIf=\"userObj.TravelStatus !== 'Visa Pending' && userObj.TravelStatus !== 'Visa Rejected' && userObj.TravelStatus !== 'Void' && userObj.TravelStatus !== 'Pending Approval' && userObj.TravelStatus !== 'Rejected' && userObj.TravelStatus !== 'Cancelled' && (admin.TicketStatus === 'Open' || admin.TicketStatus === 'Reschedule Requested' || admin.TicketStatus === 'Cancel Requested')\">\r\n                        Update Cost</button>\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div class=\"mt-4\">\r\n            <form #af=\"ngForm\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"TravelMode\">Travel Mode</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input name=\"TravelMode\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.TravelMode\"\r\n                      [typeahead]=\"informService.TravelMode\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                      typeaheadOptionField=\"name\" #TravelMode=\"ngModel\" (focusout)=\"focusout($event,'TravelMode')\"\r\n                      [ngClass]=\"{ 'is-invalid': (af.submitted || TravelMode.touched) && TravelMode.invalid }\"\r\n                      placeholder=\"Travel Mode\" class=\"form-control\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'TravelMode')\"\r\n                      (typeaheadOnSelect)=\"OnTravelMode($event)\" required\r\n                      [disabled]=\"userObj.TravelStatus === 'Visa Pending' || userObj.TravelStatus === 'Visa Rejected' || userObj.TravelStatus === 'Void' || userObj.TravelStatus === 'Reschedule Required'\" />\r\n                    <div *ngIf=\"(af.submitted || TravelMode.touched) && TravelMode.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"TravelMode.errors['required']\">Travel Mode is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"InvoiceNo\">Invoice No</label>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      style=\"text-transform: capitalize\" name=\"InvoiceNo\" [(ngModel)]=\"userObj.InvoiceNo\"\r\n                      placeholder=\"Invoice No\"\r\n                      [disabled]=\"userObj.TravelStatus === 'Visa Pending' || userObj.TravelStatus === 'Visa Rejected' || userObj.TravelStatus === 'Void'\" />\r\n\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"InvoiceDate\">Invoice Date</label>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                      autocomplete=\"off\" bsDatepicker name=\"InvoiceDate\" [(ngModel)]=\"userObj.InvoiceDate\"\r\n                      [bsConfig]=\"bsConfig\" placeholder=\"Invoice Date\"\r\n                      [disabled]=\"userObj.TravelStatus === 'Visa Pending' || userObj.TravelStatus === 'Visa Rejected' || userObj.TravelStatus === 'Void'\">\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"VendorName\">Vendor Name</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input name=\"VendorName\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.VendorName\"\r\n                      [typeahead]=\"informService.VendorInfo\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                      typeaheadOptionField=\"name\" #VendorName=\"ngModel\" (focusout)=\"focusout($event,'VendorName')\"\r\n                      [ngClass]=\"{ 'is-invalid': (af.submitted || VendorName.touched) && VendorName.invalid }\"\r\n                      placeholder=\"Vendor Name\" (typeaheadNoResults)=\"typeaheadNoResults($event,'VendorName')\" required\r\n                      [disabled]=\"userObj.TravelStatus === 'Visa Pending' || userObj.TravelStatus === 'Visa Rejected' || userObj.TravelStatus === 'Void' || userObj.TravelStatus === 'Reschedule Required'\" />\r\n                    <div *ngIf=\"(af.submitted || VendorName.touched) && VendorName.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"VendorName.errors['required']\">Vendor Name is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"Remarks\">Remarks</label>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autocomplete=\"off\" class=\"form-control\" style=\"text-transform: capitalize\"\r\n                      name=\"Remarks\" [(ngModel)]=\"userObj.TravelDeskRemarks\" placeholder=\"Remarks\"\r\n                      [disabled]=\"userObj.TravelStatus === 'Visa Pending' || userObj.TravelStatus === 'Visa Rejected' || userObj.TravelStatus === 'Void'\" />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\"\r\n                *ngIf=\"(AdmincostArray && AdmincostArray.length>0) || (Costdetails && Costdetails.length>0)\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"Remarks\">Cost Update</label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\"></div>\r\n                <div class=\"col-md-9\">\r\n                  <div class=\"mb-2\" *ngIf=\"AdmincostArray && AdmincostArray.length > 0\">\r\n                    <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Cost For</th>\r\n                          <th>From</th>\r\n                          <th>To</th>\r\n                          <th>Airline Provider</th>\r\n                          <th>Remarks</th>\r\n                          <th>Travel Cost</th>\r\n                          <th>Agent Cost</th>\r\n                          <th>Total Cost</th>\r\n                          <th>Action</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr *ngFor=\"let admin of AdmincostArray; let i = index\">\r\n                          <td class=\"form-group\">\r\n                            {{admin.CostFor}}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.From}}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.To}}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.Flight === \"\" ? 'Nil' : admin.Flight}}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.Remarks === \"\" ? 'Nil' : admin.Remarks }}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.TravelCost}}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.AgentCost}}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.TotalCost}}\r\n                          </td>\r\n                          <td> <button type=\"button\" class=\"btn btn-danger\"\r\n                              (click)=\"deleteAdminCostArray(i)\">Remove</button></td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  <div class=\"mt-4\" *ngIf=\"Costdetails && Costdetails.length > 0\">\r\n                    <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Travel Agent</th>\r\n                          <th>From</th>\r\n                          <th>To</th>\r\n                          <th>Modified</th>\r\n                          <th>Remarks</th>\r\n                          <th>Airline Provider</th>\r\n                          <th>Cost For</th>\r\n                          <th>Amount</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr *ngFor=\"let admin of Costdetails; let i = index\">\r\n                          <td class=\"form-group\">\r\n                            {{admin.Author.Title}}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.From}}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.To}}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.Modified | date: 'dd-MMM-yyyy' }}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.Remarks === null ? 'Nil' : admin.Remarks}}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.Flight === null ? 'Nil' : admin.Flight}}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.CostFor}}\r\n                          </td>\r\n                          <td class=\"form-group\">\r\n                            {{admin.TotalCost}}\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row mt-1\" *ngIf=\"Costdetails && Costdetails.length > 0\">\r\n                <div class=\"col-md-10\"></div>\r\n                <div class=\"col-md-1\">Total</div>\r\n                <div class=\"col-md-1\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autocomplete=\"off\" class=\"form-control\" name=\"Cost\" [(ngModel)]=\"userObj.Cost\"\r\n                      placeholder=\"Cost\" readonly />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row mt-2\">\r\n                <div class=\"col-md-3\">\r\n                  <label for=\"file\">Upload</label>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <button type=\"btn\" class=\"btn btn-primary px-4\" (click)=\"AddMoreTicket()\"\r\n                      [disabled]=\"userObj.TravelStatus == 'Pending Approval' || userObj.TravelStatus == 'Rejected' || userObj.TravelStatus == 'Cancelled' || userObj.TravelStatus === 'Visa Pending' || userObj.TravelStatus === 'Visa Rejected' || userObj.TravelStatus === 'Void'\">Add</button>\r\n\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\"></div>\r\n                <div class=\"col-md-6\" *ngIf=\"FilesArray && FilesArray.length > 0\">\r\n                  <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Choose File</th>\r\n                        <th>Action</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr *ngFor=\"let item of FilesArray; let i = index\">\r\n                        <td class=\"form-group\">\r\n                          <input type=\"file\" [(ngModel)]=\"item.File\" name=\"File - {{i}}\" #file title=\"\"\r\n                            placeholder=\"Choose file\" (change)=\"handleFileInput($event.target.files,i)\">\r\n                        </td>\r\n                        <td class=\"form-group\">\r\n                          <button type=\"btn\" class=\"btn btn-primary px-4\" (click)=\"AddTicket(item)\">Send</button>\r\n                          <button type=\"btn\" class=\"btn btn-danger px-4 ml-2\"\r\n                            (click)=\"TicketRemove(item,i)\">Remove</button>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n              <div class=\"row mt-4\">\r\n                <div class=\"col-md-3\"></div>\r\n                <div class=\"col-md-6\" *ngIf=\"TicketFiles && TicketFiles.length > 0\">\r\n                  <table class=\"table table-bordered\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>File Name</th>\r\n                        <th>Created Date</th>\r\n                        <th>Delete</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr *ngFor=\"let temp of GetDisplayableFiles(TicketFiles); let i = index\">\r\n                        <td>\r\n                          Demo<a\r\n                          href=\"https://mavericsystems.sharepoint.com/{{temp.ServerRelativePath.DecodedUrl}}\">{{temp.FileName}}</a>\r\n                            <!-- href=\"https://mavericsystems.sharepoint.com/sites/app_data_center/_layouts/Download.aspx?sourceurl={{temp.ServerRelativePath.DecodedUrl}}\">{{temp.FileName}}</a> -->\r\n                        </td>\r\n                        <td>\r\n                          {{temp.CreatedTime | date:'dd-MMM-yyyy HH:mm:ss'}}\r\n                        </td>\r\n                        <td *ngIf=\"temp?.CanRemove\">\r\n                          <button type=\"btn\" class=\"btn btn-primary px-4 ml-2\"\r\n                            (click)=\"RemoveTicket(temp,i)\">Delete</button>\r\n                        </td>\r\n                        <td *ngIf=\"!temp?.CanRemove\" class=\"text-center\">\r\n                          --\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n              <div class=\"row mt-3 mb-3\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"Cost\">Cost</label>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      style=\"text-transform: capitalize\" name=\"Cost\" [(ngModel)]=\"userObj.Cost\" placeholder=\"Cost\"\r\n                      readonly />\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"TicketStatus\">Ticket Status</label>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      name=\"ticket\" [(ngModel)]=\"userObj.TicketStatus\" placeholder=\"Ticket Status\" readonly />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row height text-center pt-3 mb-3\">\r\n\r\n                <button type=\"submit\" class=\"btn btn-primary px-3\" (click)=\"addAdminTravel(af)\" id=\"btnsub\"\r\n                  [disabled]=\"userObj.TravelStatus === 'Visa Pending' || userObj.TravelStatus === 'Visa Rejected' || userObj.TravelStatus === 'Void' || userObj.TravelStatus == 'Pending Approval' || userObj.TravelStatus == 'Rejected' || userObj.TravelStatus == 'Reschedule Requested' || userObj.TravelStatus == 'Cancelled' || clicked || userObj.TravelStatus == 'Reschedule Required'\">Update</button>\r\n                <button type=\"button\" id=\"btnsub\" class=\"btn btn-danger px-3\"\r\n                  (click)=\"AdminViewCancel()\">Cancel</button>\r\n                <button type=\"button\" id=\"btnsub\" class=\"btn btn-primary px-3 ml-2\"\r\n                  (click)=\"viewUpdateTicket(viewUpdateTickett)\">View</button>\r\n                <button type=\"button\" id=\"btnsub\" class=\"btn btn-primary px-3 ml-2\" (click)=\"updateAsVoid()\"\r\n                  *ngIf=\"userObj.TravelStatus === 'Visa Rejected'\">Void</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </accordion-group>\r\n      </accordion>\r\n\r\n      <div class=\"row   mt-5 mb-4\"\r\n        *ngIf=\"(isPasswordExpireInSixMnt &&  (Appkey == 'Reschedule' || Appkey == 'VisaProcess')) || (isPasswordExpireInSixMnt &&  (Appkey == 'Mytravel' || Appkey == 'VisaProcessView')) || (isPasswordExpireInSixMnt &&  Appkey == 'approval')\">\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n        <div class=\"col-md-6 \" style=\"color:red;padding-top: 8px; border: 1px solid;\">\r\n\r\n          <h5>Passport Expiry Alert</h5>\r\n\r\n          <div>\r\n            Your Passport expiry date is less than 6-months against your Travel date. Kindy get in\r\n            touch with \"traveldesk@maveric-systems.com\" to take guidance whether it is advisable to travel on the\r\n            requested date.\r\n          </div>\r\n\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n      </div>\r\n      <div class=\"row   mt-5 mb-4\"\r\n        *ngIf=\"(DependSixMnt &&  (Appkey == 'Reschedule' || Appkey == 'VisaProcess')) || (DependSixMnt &&  (Appkey == 'Mytravel' || Appkey == 'VisaProcessView')) || (DependSixMnt &&  Appkey == 'approval') \">\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n        <div class=\"col-md-6 \" style=\"color:red;padding-top: 8px; border: 1px solid;\">\r\n\r\n          <h5>Passport Expiry Alert - Dependent</h5>\r\n\r\n          <div>\r\n\r\n            <label for=\"\"> Dependent Passport expiry date is less than 6-months against your Travel date. Kindy\r\n              get\r\n              in touch with \"traveldesk@maveric-systems.com\" to take guidance whether it is advisable to travel on the\r\n              requested date.</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <div class=\"row   mt-5 mb-4\"\r\n        *ngIf=\"(isPasswordExpireInSixMnt &&  !updateEdit &&  (Appkey == !'Reschedule' && Appkey == !'VisaProcess')) || (isPasswordExpireInSixMnt &&  !updateEdit &&  Appkey == undefined) \">\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n        <div class=\"col-md-6 \" style=\"color:red;padding-top: 8px; border: 1px solid;\">\r\n\r\n          <h5>Passport Expiry Alert</h5>\r\n\r\n          <div>\r\n            Your Passport expiry date is less than 6-months against your Travel date. Kindy get in\r\n            touch with \"traveldesk@maveric-systems.com\" to take guidance whether it is advisable to travel on the\r\n            requested date.\r\n          </div>\r\n\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n      </div>\r\n      <div class=\"row   mt-5 mb-4\"\r\n        *ngIf=\"(DependSixMnt  &&  !updateEdit &&  (Appkey == !'Reschedule' && Appkey == !'VisaProcess')) ||  (DependSixMnt &&  !updateEdit &&  Appkey == undefined) \">\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n        <div class=\"col-md-6 \" style=\"color:red;padding-top: 8px ; border: 1px solid;\">\r\n\r\n          <h5>Passport Expiry Alert - Dependent</h5>\r\n\r\n          <div>\r\n\r\n            <label for=\"\"> Dependent Passport expiry date is less than 6-months against your Travel date. Kindy\r\n              get\r\n              in touch with \"traveldesk@maveric-systems.com\" to take guidance whether it is advisable to travel on the\r\n              requested date.</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n      </div>\r\n      <div class=\"row height text-center pt-3\">\r\n\r\n        <button id=\"btnsub\" type=\"submit\" class=\"btn btn-primary px-4\"\r\n          *ngIf=\"(Appkey ==='Mytravel' || Appkey === 'VisaProcessView') && IsCancellingChosen()\"\r\n          (click)=\"ProceedCancellation(CancelPopup)\">Submit</button>\r\n\r\n        <button id=\"btncan\" class=\"btn btn-danger px-3\"\r\n          *ngIf=\"Appkey ==='Mytravel' || Appkey === 'VisaProcessView' || (Appkey ==='approval' && userObj.TravelStatus !='Reschedule Requested') || (Appkey == 'approval' && userObj.TravelStatus !='Pending Approval')\"\r\n          (click)=\"CancelBack()\">Cancel</button>\r\n\r\n        <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\"\r\n          *ngIf=\"(Appkey === 'approval' && userObj.TravelStatus === 'Pending Approval') && (informService.UserType === 'Admin' || ProxyName === userObj.TravelApprover || userObj.TravelApprover === LoginTitle)\"\r\n          (click)=\"TravelRequestApprovedPopup(ApprovePopup)\">Approve</button>\r\n\r\n        <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\"\r\n          *ngIf=\"(Appkey === 'approval' && userObj.TravelStatus === 'Pending Approval') && (informService.UserType === 'Admin' || ProxyName === userObj.TravelApprover || userObj.TravelApprover === LoginTitle)\"\r\n          (click)=\"TravelRequestRejectedPopup(RejectPopup)\">Reject</button>\r\n\r\n        <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\"\r\n          *ngIf=\"(Appkey === 'approval' && userObj.TravelStatus === 'Reschedule Requested') && (informService.UserType === 'Admin' || ProxyName === userObj.TravelApprover || userObj.TravelApprover === LoginTitle)\"\r\n          (click)=\"TravelRequestReschedulePopup(ApproveReschedulePopup)\">Approve</button>\r\n        <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\"\r\n          *ngIf=\"(Appkey === 'approval' && userObj.TravelStatus === 'Reschedule Requested') && (informService.UserType === 'Admin' || ProxyName === userObj.TravelApprover || userObj.TravelApprover === LoginTitle)\"\r\n          (click)=\"TravelRequestRejectedReschedulePopup(RejectReschedulePopup)\">Reject</button>\r\n        <button id=\"btnsub\" *ngIf=\"Appkey == 'Reschedule'\" type=\"submit\" class=\"btn btn-primary px-3\"\r\n          (click)=\"ReschedulePopup(RescheduleReasonPopup,f, PANNumberUpdatePopUp)\">Submit</button>\r\n        <button id=\"btnsub\" *ngIf=\"Appkey == 'VisaProcess'\" type=\"submit\" class=\"btn btn-primary px-3\"\r\n          (click)=\"updateVisaDetails(f, RejectionPopup)\">Submit</button>\r\n        <button id=\"btncan\" *ngIf=\"Appkey == 'Reschedule' || Appkey == 'VisaProcess'\" type=\"button\"\r\n          class=\"btn btn-danger px-3\" (click)=\"cancelRequest()\">Cancel</button>\r\n\r\n        <button id=\"btnsub\" *ngIf=\"!isEdit\" type=\"submit\" class=\"btn btn-primary px-3\"\r\n          (click)=\"add(f,template, PANNumberUpdatePopUp)\">Submit</button>\r\n        <button id=\"btncan\" *ngIf=\"!isEdit\" type=\"button\" class=\"btn btn-danger px-3\" (click)=\"cancel()\">Cancel</button>\r\n      </div>\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"IsSpinnerShow\">\r\n  <div class=\"spinner\"></div>\r\n</div>\r\n<ng-template #template>\r\n  <div class=\"modal-header popup\" style=\"display: unset;\">\r\n    <button type=\"button\" class=\"close pull-right popup\" aria-label=\"Close\" tooltip=\"close\" (click)=\"bsModalRef.hide()\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n    <h5 class=\"modal-title text-center\" style=\"margin: 0 !important;\">Confirm Travel Request?</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Employee Id</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.EmployeeID}}</div>\r\n      <div class=\"col-md-2\"><label>Employee Name</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.EmployeeName}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Department</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Department}}</div>\r\n      <div class=\"col-md-2\"><label>Designation </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Designation}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Business Unit</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.BusinessUnit === null ? 'Nil' : userObj.BusinessUnit }}</div>\r\n      <div class=\"col-md-2\"><label>Delivery Unit </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.DeliveryUnit === null ? 'Nil' : userObj.DeliveryUnit}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Gender</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Gender}}</div>\r\n      <div class=\"col-md-2\"><label>Age </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Age}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Date of Birth</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.DOB | date: 'dd-MMM-yyyy'}}</div>\r\n      <div class=\"col-md-2\"><label>Base Location</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.BaseLocation}}</div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Travel For </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Travel_x0020_For}}</div>\r\n      <div class=\"col-md-2\"><label>Travel Type</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.TravelType}}</div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Project Id </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.projectoraclecode__c}}</div>\r\n      <div class=\"col-md-2\"><label>Project </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Project}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Client Id</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.clientprismcode__c}}</div>\r\n      <div class=\"col-md-2\"><label>Client Name </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.clientname__c}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Approval Authority</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.ApprovalAuthority}}</div>\r\n      <div class=\"col-md-2\"><label>Approvers Superior </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.ApproversSuperior}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Travel Category</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.TravelCategory}}</div>\r\n      <div class=\"col-md-2\"><label>Travel Purpose </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.TravelPurpose}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Mobile Number </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.Mobile}}</div>\r\n      <div class=\"col-md-2\"><label>Travel Meal</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.TravelMeal}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Accommodation</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.AccommodationRequired == 'true'?'Yes':'No'}}</div>\r\n      <div class=\"col-md-2\"><label>Client Debit </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.ClientDebit == 'true'?'Yes':'No'}}</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Advance</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.AdvanceRequired == 'true'?'Yes':'No'}}</div>\r\n      <div class=\"col-md-2\"><label>Cost Center / Cluster</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.CostCenterOrCluster || 'Nil'}}</div>\r\n    </div>\r\n    <div class=\"row mt-2\" *ngIf=\"AdvanceDetails && AdvanceDetails.length > 0 \">\r\n      <div class=\"col-md-12\">\r\n        <table datatable [dtOptions]=\"dtOptionsPop\" class=\"table table-bordered\" *ngIf=\"isAdvance\">\r\n          <thead>\r\n            <tr>\r\n              <th>Currency</th>\r\n              <th>Card</th>\r\n              <th>Cash</th>\r\n              <th>Amount</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr *ngFor=\"let temp of AdvanceDetails; let i = index\">\r\n              <td>{{temp.Currency}}</td>\r\n              <td>{{temp.Card}}</td>\r\n              <td>{{temp.Cash}}</td>\r\n              <td>{{temp.Card + temp.Cash}}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mt-2\" *ngIf=\"DependentAdd && DependentAdd.length > 0 \">\r\n      <div class=\"col-md-12\">\r\n        <table datatable [dtOptions]=\"dtOptionsPop\" class=\"table table-bordered\" *ngIf=\"isDependent\">\r\n          <thead>\r\n            <tr>\r\n              <th>Given Name</th>\r\n              <th *ngIf=\"TravelType.value != 'International'\">Surname</th>\r\n              <th *ngIf=\"TravelType.value != 'International'\">Passport No</th>\r\n              <th *ngIf=\"TravelType.value != 'International'\">DOB</th>\r\n              <th>Passport Expiry</th>\r\n              <th *ngIf=\"TravelType.value != 'International'\">Gender</th>\r\n              <th>Relationship</th>\r\n              <th *ngIf=\"TravelType.value === 'International'\">Visa Status</th>\r\n              <th *ngIf=\"TravelType.value === 'International'\">Visa Valid Till</th>\r\n              <th *ngIf=\"TravelType.value === 'International'\">Visa No</th>\r\n              <th *ngIf=\"TravelType.value === 'International'\">Type of Visa</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr *ngFor=\"let temp of DependentAdd; let i = index\">\r\n\r\n              <td *ngIf=\"temp.Selected === true\">{{temp.GivenName}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value != 'International'\">{{temp.SurName}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value != 'International'\">{{temp.PassportNo}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value != 'International'\">{{temp.DOBPassport | date:\r\n                'dd-MMM-yyyy'}}</td>\r\n              <td *ngIf=\"temp.Selected === true\">{{temp.PassportExpiryDate | date: 'dd-MMM-yyyy'}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value != 'International'\">{{temp.Gender}}</td>\r\n              <td *ngIf=\"temp.Selected === true\">{{temp.Relationship}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value === 'International'\">{{temp.VisaStatus}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value === 'International'\">{{temp.VisaValidTill | date:\r\n                'dd-MMM-yyyy'}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value === 'International'\">{{temp.VisaNo}}</td>\r\n              <td *ngIf=\"temp.Selected === true && TravelType.value === 'International'\">{{temp.TypeofVisa}}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"TravelType.value === 'Domestic' && userObj.Travel_x0020_For != 'Dependent'\">\r\n      <div class=\"col-md-2\"><label>Identity Proof </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.IdentityProof}}</div>\r\n      <div class=\"col-md-2\"><label>IDProof Number</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.IDProofNumber}}</div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"TravelType.value === 'International' && userObj.Travel_x0020_For != 'Dependent'\">\r\n\r\n      <div class=\"col-md-2\"><label>Given Name </label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.GivenName}}</div>\r\n      <div class=\"col-md-2\"><label>Surname</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.SurName}}</div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"TravelType.value === 'International' && userObj.Travel_x0020_For != 'Dependent'\">\r\n      <div class=\"col-md-2\"><label>Passport No</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.PassportNo}}</div>\r\n      <div class=\"col-md-2\"><label>Visa No</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.VisaNo === \"\" ? 'Nil' :userObj.VisaNo}}</div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"TravelType.value === 'International' && userObj.Travel_x0020_For != 'Dependent'\">\r\n      <div class=\"col-md-2\"><label>Passport Expiry Date</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.PassportExpiryDate| date: 'dd-MMM-yyyy'}}</div>\r\n      <div class=\"col-md-2\"><label>Date of Birth</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.DateofBirth| date: 'dd-MMM-yyyy'}}</div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"TravelType.value === 'International' && userObj.Travel_x0020_For != 'Dependent'\">\r\n      <div class=\"col-md-2\"><label>Visa Status</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.VisaStatus}}</div>\r\n      <div class=\"col-md-2\"><label>Visa Valid Till</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.VisaValidTill === null ? 'Nil' :userObj.VisaValidTill | date: 'dd-MMM-yyyy'}}\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\" *ngIf=\"TravelType.value === 'International' && userObj.Travel_x0020_For != 'Dependent'\">\r\n        <label>Visa Type</label>\r\n      </div>\r\n      <div class=\"col-md-4\" *ngIf=\"TravelType.value === 'International' && userObj.Travel_x0020_For != 'Dependent'\"> :\r\n        {{userObj.TypeofVisa}}</div>\r\n      <div class=\"col-md-2\"><label>Trip Type</label> </div>\r\n      <div class=\"col-md-4\"> : {{getTripText(userObj.TripType)}}</div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"tripDeatilsArray && tripDeatilsArray.length > 0 \">\r\n      <div class=\"col-md-12\">\r\n        <table datatable [dtOptions]=\"dtOptionsPop\" class=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>From City</th>\r\n              <th>To City</th>\r\n              <th>Date</th>\r\n              <th>First Preference</th>\r\n              <th>Second Preference</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr *ngFor=\"let temp of tripDeatilsArray; let i = index\">\r\n              <td>{{temp.Form}}</td>\r\n              <td>{{temp.To}} </td>\r\n              <td>{{temp.TravelDate | date: 'dd-MMM-yyyy'}} </td>\r\n              <td>{{temp.FirstPreferance}} </td>\r\n              <td>{{temp.SecondPreferance}}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <div class=\"row mt-2\">\r\n      <div class=\"col-md-2\" *ngIf=\"isDeviation == true\"><label>Deviation Reason</label> </div>\r\n      <div class=\"col-md-4\" *ngIf=\"isDeviation == true\"> : {{userObj.DeviationReason}}</div>\r\n      <div class=\"col-md-2\"><label>Reporting Date</label> </div>\r\n      <div class=\"col-md-4\"> : {{userObj.ReportingDate| date: 'dd-MMM-yyyy'}}</div>\r\n    </div>\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btns\" type=\"submit\" class=\"btn btn-primary px-4 mt-2\" [disabled]=\"clicked\"\r\n        (click)=\"TravelRequestAdd(Traveld)\">Submit</button>\r\n      <button id=\"btnClear\" type=\"submit\" class=\"btn btn-danger px-4 mt-2\"\r\n        (click)=\"TravelRequestCancel()\">Cancel</button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #templateAdmin>\r\n  <div class=\"modal-header\">\r\n    <h5 class=\"modal-title text-center\">Admin Use</h5>\r\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"bsModalRef.hide()\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <form #af=\"ngForm\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"FromCity\">From City</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input name=\"FromCity\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"adminUse.Trobj.FromCity\"\r\n              [typeahead]=\"locationArrays\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n              typeaheadOptionField=\"location\" #FromCity=\"ngModel\" required\r\n              [ngClass]=\"{ 'is-invalid': (af.submitted || FromCity.touched) && FromCity.invalid }\"\r\n              placeholder=\"From City\" class=\"form-control\" [disabled]=\"Appkey == 'UpdateTicket'\">\r\n            <div *ngIf=\"(af.submitted || FromCity.touched) && FromCity.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"FromCity.errors['required']\">From City is required</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"ToCity\">To City</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input name=\"ToCity\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"adminUse.Trobj.ToCity\"\r\n              [typeahead]=\"locationArrays\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n              typeaheadOptionField=\"location\" #ToCity=\"ngModel\" required [disabled]=\"Appkey == 'UpdateTicket'\"\r\n              [ngClass]=\"{ 'is-invalid': (af.submitted || ToCity.touched) && ToCity.invalid }\" placeholder=\"To City\"\r\n              class=\"form-control\">\r\n            <div *ngIf=\"(af.submitted || ToCity.touched) && ToCity.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"ToCity.errors['required']\">To City is required</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"date\">Date</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" autocomplete=\"off\"\r\n              bsDatepicker name=\"date\" [(ngModel)]=\"adminUse.Trobj.date\" [bsConfig]=\"bsConfig\" #date=\"ngModel\"\r\n              placeholder=\"Date\">\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"time\">Time</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input name=\"time\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"adminUse.Trobj.time\"\r\n              [typeahead]=\"informService.TimeArray\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n              typeaheadOptionField=\"name\" #time=\"ngModel\"\r\n              [ngClass]=\"{ 'is-invalid': (af.submitted || time.touched) && time.invalid }\" placeholder=\"Time\"\r\n              class=\"form-control\" required>\r\n            <div *ngIf=\"(af.submitted || time.touched) && time.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"time.errors['required']\">Time is required</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"mode\">Travel Mode</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input name=\"mode\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"adminUse.Trobj.mode\"\r\n              [typeahead]=\"informService.TravelMode\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n              typeaheadOptionField=\"name\" #mode=\"ngModel\"\r\n              [ngClass]=\"{ 'is-invalid': (af.submitted || mode.touched) && mode.invalid }\" placeholder=\"Travel Mode\"\r\n              class=\"form-control\" (typeaheadNoResults)=\"typeaheadNoResults($event,'mode')\">\r\n            <div *ngIf=\"(af.submitted || mode.touched) && mode.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"mode.errors['required']\">Travel Mode is required</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Provider\">Travel Provider</label>\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Provider\" [(ngModel)]=\"adminUse.Trobj.Provider\"\r\n              placeholder=\"Travel Provider\" />\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"ticketStatus\">Ticket Status</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input name=\"ticketStatus\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"adminUse.Trobj.ticketStatus\"\r\n              [typeahead]=\"informService.TravelStatus\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n              typeaheadOptionField=\"name\" #ticketStatus=\"ngModel\" readonly\r\n              [ngClass]=\"{ 'is-invalid': (af.submitted || ticketStatus.touched) && ticketStatus.invalid }\"\r\n              placeholder=\"Ticket Status\" class=\"form-control\" required>\r\n            <div *ngIf=\"(af.submitted || ticketStatus.touched) && ticketStatus.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"ticketStatus.errors['required']\">Ticket Status is required</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"ticketIssue\">Ticket Issue Date</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" autocomplete=\"off\"\r\n              bsDatepicker name=\"ticketIssue\" [(ngModel)]=\"adminUse.Trobj.ticketIssue\" [bsConfig]=\"bsConfig\"\r\n              #ticketIssue=\"ngModel\" placeholder=\"Ticket Issue Date\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"invoiceNo\">Invoice No</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"invoiceNo\" [(ngModel)]=\"adminUse.Trobj.invoiceNo\"\r\n              placeholder=\"Invoice No\" />\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"invoiceDate\">Invoice Date</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" autocomplete=\"off\"\r\n              bsDatepicker name=\"invoiceDate\" [(ngModel)]=\"adminUse.Trobj.invoiceDate\" [bsConfig]=\"bsConfig\"\r\n              #invoiceDate=\"ngModel\" placeholder=\"Invoice Date\">\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <label for=\"departureDate\">Departure Date</label>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" bsDatepicker\r\n              autocomplete=\"off\" name=\"departureDate\" [(ngModel)]=\"adminUse.Trobj.departureDate\" [bsConfig]=\"bsConfig\"\r\n              #departureDate=\"ngModel\" placeholder=\"Departure Date\">\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"vendorName\">Vendor Name</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"vendorName\" [(ngModel)]=\"adminUse.Trobj.vendorName\"\r\n              placeholder=\"Vendor Name\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Action\">Action</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input name=\"Action\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"adminUse.Action\"\r\n              [typeahead]=\"informService.Action\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n              (typeaheadOnSelect)=\"OnAction($event)\" typeaheadOptionField=\"name\" #Action=\"ngModel\"\r\n              [ngClass]=\"{ 'is-invalid': (af.submitted || Action.touched) && Action.invalid }\" placeholder=\"Action\"\r\n              class=\"form-control\" (typeaheadNoResults)=\"typeaheadNoResults($event)\" required />\r\n            <div *ngIf=\"(af.submitted || Action.touched) && Action.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"Action.errors['required']\">Action is required</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\" *ngIf=\"amountPaid\">\r\n          <div class=\"form-group\">\r\n            <label for=\"pay\">Amount Paid</label>\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\" *ngIf=\"amountPaid\">\r\n          <div class=\"form-group\">\r\n            <input type=\"number\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"pay\" [(ngModel)]=\"adminUse.pay\" placeholder=\"Amount Paid\"\r\n              (change)=\"Amountpaids($event)\" (ondblclick)=\"doubleClick($event)\" [readonly]=\"amoRepay\" />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\" *ngIf=\"amountrefunded\">\r\n          <div class=\"form-group\">\r\n            <label for=\"repay\">Amount Refunded</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\" *ngIf=\"amountrefunded\">\r\n          <div class=\"form-group\">\r\n            <input type=\"number\" autocomplete=\"off\" class=\"form-control\" style=\"text-transform: capitalize\" name=\"repay\"\r\n              [(ngModel)]=\"adminUse.repay\" (change)=\"Amountrefunds($event)\" placeholder=\"Refund Amount\"\r\n              (ondblclick)=\"doubleClickRepay($event)\" [readonly]=\"amoPay\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Remarks\">Remarks</label>\r\n            <sup>\r\n              <span>*</span>\r\n            </sup>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autocomplete=\"off\" class=\"form-control\" style=\"text-transform: capitalize\" name=\"Remarks\"\r\n              [(ngModel)]=\"adminUse.Remarks\" placeholder=\"Remarks\" #Remarks=\"ngModel\"\r\n              [ngClass]=\"{ 'is-invalid': (af.submitted || Remarks.touched) && Remarks.invalid }\" required />\r\n            <div *ngIf=\"(af.submitted || Remarks.touched) && Remarks.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"Remarks.errors['required']\">Remarks is required</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"AmPaid\">Amount Paid</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\" name=\"AmPaid\"\r\n              [(ngModel)]=\"adminUse.Trobj.amountPaid\" placeholder=\"Amount Paid\" readonly />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"AmRefund\">Amount Refund</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\" name=\"AmRefund\"\r\n              [(ngModel)]=\"adminUse.Trobj.Refund\" placeholder=\"Amount Refund\" readonly />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Cost\">Cost</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Cost\" [(ngModel)]=\"adminUse.Cost\" placeholder=\"Cost\" readonly />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <label for=\"file\">Upload</label>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"file\" name=\"file\" id=\"file\" placeholder=\"Choose\"\r\n              (change)=\"handleFileInput($event.target.files)\">\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\"></div>\r\n        <div class=\"col-md-6\" *ngIf=\"TicketFiles && TicketFiles.length > 0\">\r\n          <table class=\"table table-bordered\">\r\n            <thead>\r\n              <tr>\r\n                <th>File Name</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr *ngFor=\"let temp of TicketFiles; let i = index\">\r\n                <td>\r\n                  <a\r\n                  href=\"https://mavericsystems.sharepoint.com/{{temp.ServerRelativePath.DecodedUrl}}\">{{temp.FileName}}</a>\r\n                    <!-- href=\"https://mavericsystems.sharepoint.com/sites/app_data_center/_layouts/Download.aspx?sourceurl={{temp.ServerRelativePath.DecodedUrl}}\">{{temp.FileName}}</a> -->\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n      <div class=\"row height pt-3 mb-3\">\r\n        <div class=\"col-md-4\"> </div>\r\n        <div class=\"col-md-2 endtext\">\r\n          <button type=\"submit\" class=\"btn btn-primary px-4\" (click)=\"addAdmin(af)\">Update</button>\r\n        </div>\r\n        <div class=\"col-md-1\">\r\n          <button type=\"submit\" class=\"btn btn-primary px-4\" (click)=\"AdminCancelStatus(af)\"\r\n            [disabled]=\"buttonHide\">Cancel</button>\r\n        </div>\r\n        <div class=\"col-md-2 ml-5\">\r\n          <button type=\"submit\" class=\"btn btn-danger px-4\" (click)=\"cancelAdmin()\">Back</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n\r\n</ng-template>\r\n\r\n<ng-template #ApprovePopup>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center\">Approve Travel?</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btnsub\" type=\"submit\" class=\"btn btn-primary px-3\" [disabled]=\"clicked\"\r\n        (click)=\"TravelRequestApprovedUpdate()\">Confirm</button>\r\n      <button id=\"btnClear\" type=\"submit\" class=\"btn btn-danger px-4\" (click)=\"TravelRequestCancel()\">Cancel</button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-template #RejectPopup>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center\">Reject Travel?</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <form #a=\"ngForm\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"form-group\">\r\n          <label for=\"comment\">Reject Reason</label>\r\n          <sup>\r\n            <span>*</span>\r\n          </sup>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-12\" *ngIf=\"userObj.IsProjectTravel == true\">\r\n        <div class=\"form-group\">\r\n          <input name=\"comment\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"comments\"\r\n            (focusout)=\"focusout($event,'isProject')\" [typeahead]=\"informService.commentArray\"\r\n            [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\" #comment=\"ngModel\"\r\n            [ngClass]=\"{ 'is-invalid': a.submitted && comment.invalid }\" placeholder=\"Reject Reason\" required />\r\n          <div *ngIf=\"a.submitted && comment.invalid\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"comment.errors['required']\">Reject Reason is required</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-12\" *ngIf=\"userObj.IsProjectTravel == false\">\r\n        <div class=\"form-group\">\r\n          <input name=\"comment\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"comments\"\r\n            (focusout)=\"focusout($event,'isNonProject')\" [typeahead]=\"informService.commentsnon\"\r\n            [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\" #comment=\"ngModel\"\r\n            [ngClass]=\"{ 'is-invalid': a.submitted && comment.invalid }\" placeholder=\"Reject Reason\" required />\r\n          <div *ngIf=\"a.submitted && comment.invalid\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"comment.errors['required']\">Reject Reason is required</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row text-center request\">\r\n        <button id=\"btnsub\" type=\"submit\" class=\"btn btn-primary px-3\" [disabled]=\"clicked\"\r\n          (click)=\"TravelRequestRejectedUpdate(a)\">Confirm</button>\r\n        <button id=\"btnClear\" type=\"submit\" class=\"btn btn-danger px-4\" (click)=\"TravelRequestCancel()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</ng-template>\r\n<ng-template #ApproveReschedulePopup>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center\">Approve Reschedule Travel?</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\" [disabled]=\"clicked\"\r\n        (click)=\"TravelRequestRescheduleUpdate()\">Confirm</button>\r\n      <button id=\"btnClear\" type=\"submit\" class=\"btn btn-danger px-4\" (click)=\"TravelRequestCancel()\">Cancel</button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-template #RejectReschedulePopup>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center\">Reject Reschedule Travel?</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <form #a=\"ngForm\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"form-group\">\r\n          <label for=\"comment\">Reschedule Reject Travel</label>\r\n          <sup>\r\n            <span>*</span>\r\n          </sup>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-12\" *ngIf=\"userObj.IsProjectTravel == true\">\r\n        <div class=\"form-group\">\r\n          <input name=\"comment\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"comments\"\r\n            (focusout)=\"focusout($event,'isProject')\" [typeahead]=\"informService.commentArray\"\r\n            [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\" #comment=\"ngModel\"\r\n            [ngClass]=\"{ 'is-invalid': a.submitted && comment.invalid }\" placeholder=\"Reschedule Reject Travel\" required\r\n            (typeaheadNoResults)=\"typeaheadNoResults($event,'comments')\" />\r\n          <div *ngIf=\"a.submitted && comment.invalid\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"comment.errors['required']\">Reschedule Reject Reason is Required</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-12\" *ngIf=\"userObj.IsProjectTravel == false\">\r\n        <div class=\"form-group\">\r\n          <input name=\"comment\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"comments\"\r\n            (focusout)=\"focusout($event,'isNonProject')\" [typeahead]=\"informService.commentsnon\"\r\n            [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\" #comment=\"ngModel\"\r\n            [ngClass]=\"{ 'is-invalid': a.submitted && comment.invalid }\" placeholder=\"Reschedule Reject Travel\" required\r\n            (typeaheadNoResults)=\"typeaheadNoResults($event,'comments')\" />\r\n          <div *ngIf=\"a.submitted && comment.invalid\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"comment.errors['required']\">Reschedule Reject is required</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row text-center request\">\r\n        <button id=\"btnsub\" type=\"submit\" class=\"btn btn-primary px-3\" [disabled]=\"clicked\"\r\n          (click)=\"TravelRequestRejectedRescheduleUpdate(a)\">Confirm</button>\r\n        <button id=\"btnClear\" type=\"button\" class=\"btn btn-danger px-4\" (click)=\"TravelRequestCancel()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</ng-template>\r\n<ng-template #UpdateCosts>\r\n  <div>\r\n    <div class=\"modal-header popup\">\r\n      <h5 class=\"modal-title text-center\">Cost Update</h5>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n      <form #costForm=\"ngForm\">\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-3\">\r\n            <div class=\"form-group\">\r\n              <label for=\"From\">Actual From City</label>\r\n              <sup>\r\n                <span>*</span>\r\n              </sup>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-9\">\r\n            <div class=\"form-group\">\r\n              <input [(ngModel)]=\"CostUpdate.CostActualFrom\" autocomplete=\"CostUpdate.CostActualFrom\"\r\n                name=\"CostActualFrom\" [typeahead]=\"locationArrays\" #CostActualFrom=\"ngModel\" [typeaheadOptionsLimit]=\"7\"\r\n                [typeaheadMinLength]=\"0\" typeaheadOptionField=\"location\" placeholder=\"From City\" class=\"form-control\"\r\n                (typeaheadNoResults)=\"typeaheadNoResults($event,'CostActualFrom',null)\"\r\n                (focusout)=\"focusout($event,'CostActualFrom',null)\" (typeaheadOnSelect)=\"onCostACtualFromChange()\"\r\n                [ngClass]=\"{ 'is-invalid': costForm.submitted && CostActualFrom.invalid }\" required>\r\n              <div *ngIf=\"costForm.submitted && CostActualFrom.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"CostActualFrom.errors['required']\">Actual From City is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-3\">\r\n            <div class=\"form-group\">\r\n              <label for=\"To\">Actual To City</label>\r\n              <sup>\r\n                <span>*</span>\r\n              </sup>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-9\">\r\n            <div class=\"form-group\">\r\n              <input [(ngModel)]=\"CostUpdate.CostActualTo\" autocomplete=\"CostUpdate.CostActualTo\" name=\"CostActualTo\"\r\n                [typeahead]=\"locationArrays\" #CostActualTo=\"ngModel\" [typeaheadOptionsLimit]=\"7\"\r\n                [typeaheadMinLength]=\"0\" typeaheadOptionField=\"location\" placeholder=\"To City\" class=\"form-control\"\r\n                (typeaheadNoResults)=\"typeaheadNoResults($event,'CostActualTo',null)\"\r\n                (focusout)=\"focusout($event,'CostActualTo',null)\" (typeaheadOnSelect)=\"onCostActualToChange()\"\r\n                [ngClass]=\"{ 'is-invalid': costForm.submitted && CostActualTo.invalid }\" required>\r\n              <div *ngIf=\"costForm.submitted && CostActualTo.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"CostActualTo.errors['required']\">Actual To City is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-3\" *ngIf=\"flight\">\r\n            <div class=\"form-group\">\r\n              <label for=\"Flight\">Airline Provider</label>\r\n              <sup>\r\n                <span>*</span>\r\n              </sup>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-9\" *ngIf=\"flight\">\r\n            <div class=\"form-group\">\r\n              <input name=\"Flight\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"CostUpdate.Flight\"\r\n                [typeahead]=\"informService.AirWay\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                (focusout)=\"focusout($event,'Flight')\" typeaheadOptionField=\"name\" #Flight=\"ngModel\" required\r\n                [ngClass]=\"{ 'is-invalid': costForm.submitted && Flight.invalid }\" placeholder=\"Airline Provider\"\r\n                class=\"form-control\" (typeaheadNoResults)=\"typeaheadNoResults($event,'Flight')\" />\r\n              <div *ngIf=\"costForm.submitted && Flight.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"Flight.errors['required']\">Airline provider is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-md-3\">\r\n            <div class=\"form-group\">\r\n              <label for=\"Costfor\">Cost for</label>\r\n              <sup>\r\n                <span>*</span>\r\n              </sup>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-9\">\r\n            <div class=\"form-group\">\r\n              <input name=\"Costfor\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"CostUpdate.Costfor\"\r\n                [typeahead]=\"informService.Action\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                (focusout)=\"focusout($event,'Costfor')\" typeaheadOptionField=\"name\"\r\n                (typeaheadNoResults)=\"typeaheadNoResults($event,'Costfor')\" #Costfor=\"ngModel\" placeholder=\"Cost for\"\r\n                [ngClass]=\"{ 'is-invalid': costForm.submitted && Costfor.invalid }\" required />\r\n              <div *ngIf=\"costForm.submitted && Costfor.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"Costfor.errors['required']\">Cost for is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-md-3\">\r\n            <div class=\"form-group\">\r\n              <label for=\"Costing\">Travel Cost</label>\r\n              <sup>\r\n                <span>*</span>\r\n              </sup>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-9\">\r\n            <div class=\"form-group\">\r\n              <input type=\"number\" name=\"Costing\" class=\"form-control\" autocomplete=\"off\"\r\n                [(ngModel)]=\"CostUpdate.Costing\" placeholder=\"Cost\"\r\n                [ngClass]=\"{ 'is-invalid': costForm.submitted && Costing.invalid }\" #Costing=\"ngModel\" required />\r\n              <div *ngIf=\"costForm.submitted && Costing.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"Costing.errors['required']\">Travel Cost is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-md-3\">\r\n            <div class=\"form-group\">\r\n              <label for=\"AgentCosting\">Agent Cost</label>\r\n              <sup>\r\n                <span>*</span>\r\n              </sup>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-9\">\r\n            <div class=\"form-group\">\r\n              <input type=\"number\" name=\"AgentCosting\" class=\"form-control\" autocomplete=\"off\" #AgentCosting=\"ngModel\"\r\n                [(ngModel)]=\"CostUpdate.AgentCosting\" placeholder=\"Agent Cost\"\r\n                [ngClass]=\"{ 'is-invalid': costForm.submitted && AgentCosting.invalid }\" required />\r\n              <div *ngIf=\"costForm.submitted && AgentCosting.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"AgentCosting.errors['required']\">Agent Cost is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-md-3\">\r\n            <div class=\"form-group\">\r\n              <label for=\"CostRemarks\">Remarks</label>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-9\">\r\n            <div class=\"form-group\">\r\n              <input type=\"text\" autocomplete=\"off\" class=\"form-control\" style=\"text-transform: capitalize\"\r\n                name=\"CostRemarks\" [(ngModel)]=\"CostUpdate.CostRemarks\" placeholder=\"Cost Remarks\"\r\n                #CostRemarks=\"ngModel\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row text-center request\">\r\n          <button id=\"btnsub\" type=\"submit\" class=\"btn btn-primary px-3\" [disabled]=\"clicked\"\r\n            (click)=\"TravelCostUpdate(costForm)\">Confirm</button>\r\n          <button id=\"btnClear\" type=\"button\" class=\"btn btn-danger px-4\"\r\n            (click)=\"TravelRequestCancel()\">Cancel</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-template #BookingPurpose>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center request\">Book</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row text-center request\">\r\n      <label for=\"comments\">Confirm Action?</label>\r\n    </div>\r\n    <div class=\"row mt-3 mb-2\">\r\n      <div class=\"col-md-12\">\r\n        <label for=\"ActualDate\">Actual Date</label>\r\n      </div>\r\n      <div class=\"col-md-12\">\r\n        <div class=\"form-group\">\r\n          <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" bsDatepicker\r\n            autocomplete=\"off\" name=\"ActualDate\" [(ngModel)]=\"adminUse.ActualDate\" [bsConfig]=\"bsConfig\"\r\n            #ActualDate=\"ngModel\" placeholder=\"Actual Date\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\" (click)=\"bookingYes()\">Yes</button>\r\n      <button id=\"btnClear\" type=\"button\" class=\"btn btn-danger px-3\" (click)=\"bookingCancel()\">No</button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-template #ReschedulePurpose>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center request\">Reschedule</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row text-center request\">\r\n      <label for=\"comments\">Confirm Action?</label>\r\n    </div>\r\n    <div class=\"row mt-3 mb-2\">\r\n      <div class=\"col-md-12\">\r\n        <label for=\"ActualDate\">Actual Date</label>\r\n      </div>\r\n      <div class=\"col-md-12\">\r\n        <div class=\"form-group\">\r\n          <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" bsDatepicker (keydown)=\"number($event)\"\r\n            autocomplete=\"off\" name=\"ActualDate\" [(ngModel)]=\"adminUse.ActualDate\" [bsConfig]=\"bsConfig\"\r\n            #ActualDate=\"ngModel\" placeholder=\"Actual Date\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\" (click)=\"RescheduleYes()\">Yes</button>\r\n      <button id=\"btnClear\" type=\"button\" class=\"btn btn-danger px-3\" (click)=\"bookingCancel()\">No</button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-template #CancelPurpose>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center request\">Cancel</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row text-center request\">\r\n      <label for=\"comments\">Confirm Action?</label>\r\n    </div>\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\" (click)=\"CancelYes()\">Yes</button>\r\n      <button id=\"btnClear\" type=\"button\" class=\"btn btn-danger px-3\" (click)=\"bookingCancel()\">No</button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-template #Traveld>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row text-center request\">\r\n      <label for=\"comments\">Your Travel Request ID is {{idnumber}}</label>\r\n    </div>\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\" (click)=\"navigate()\">Ok</button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-template #LegView>\r\n  <div class=\"modal-header popup\">\r\n    <h4 class=\"modal-title text-center request\">Version History</h4>\r\n  </div>\r\n  <div class=\"modal-body\" *ngIf=\"FullDetails && FullDetails.length > 0\">\r\n    <table style=\"width: 95%; margin-left: 3%;\">\r\n      <tr class=\"Space\" style=\"width: 100%;\">\r\n        <td style=\"width: 8%;margin-left: 2%;\">Modified By</td>\r\n        <td style=\"width: 10%;\">Modified On</td>\r\n      </tr>\r\n      <tr *ngFor=\"let i = index ; let version of FullDetails\"\r\n        style=\"vertical-align: top; margin-bottom: 10px;margin-top: 10px; width:90%; margin-left: 2%;\">\r\n        <td>\r\n      <tr class=\"Space\">\r\n        {{version.Editor.LookupValue}}\r\n      </tr>\r\n      <table>\r\n        <tr>\r\n          <td>From City</td>\r\n          <td>: {{version.Form}}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>To City</td>\r\n          <td>: {{version.To}}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Travel Status</td>\r\n          <td>: {{version.TicketStatus}} </td>\r\n        </tr>\r\n        <tr>\r\n          <td>Actual Date</td>\r\n          <td>: {{version.ActualDate | date:'dd-MMM-yyyy'}}</td>\r\n        </tr>\r\n      </table>\r\n      </td>\r\n      <td style=\"vertical-align: top; margin-bottom: 10px;margin-top: 10px;width:30%; margin-left: 2%;\">\r\n        <tr>\r\n          {{version.Created | date:'dd-MMM-yyyy'}}\r\n        </tr>\r\n      </td>\r\n      </tr>\r\n    </table>\r\n  </div>\r\n  <div class=\"row mb-3  text-center request\">\r\n    <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\" (click)=\"navigateBack(null)\">Ok</button>\r\n  </div>\r\n</ng-template>\r\n<ng-template #RescheduleReasonPopup>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center\">Reschedule Travel?</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <form #a=\"ngForm\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"form-group\">\r\n          <label for=\"comment\">Reschedule Reason</label>\r\n          <sup>\r\n            <span>*</span>\r\n          </sup>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-12\" *ngIf=\"userObj.IsProjectTravel == true\">\r\n        <div class=\"form-group\">\r\n          <input name=\"comment\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"comments\"\r\n            (focusout)=\"focusout($event,'isProjectReschedule')\"\r\n            [typeahead]=\"userObj.TravelType==='Domestic' ? informService.DomesticRescheduleArray:informService.RescheduleArray\"\r\n            [typeaheadOptionsLimit]=\"10\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\" #comment=\"ngModel\"\r\n            [ngClass]=\"{ 'is-invalid': a.submitted && comment.invalid }\" placeholder=\"Reschedule Reason\"\r\n            (typeaheadNoResults)=\"typeaheadNoResults($event,'comments',i)\" required />\r\n          <div *ngIf=\"a.submitted && comment.invalid\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"comment.errors['required']\">Reschedule Reason is required</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-12\" *ngIf=\"userObj.IsProjectTravel == false\">\r\n        <div class=\"form-group\">\r\n          <input name=\"comment\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"comments\"\r\n            (focusout)=\"focusout($event,'isNonProjectReschedule')\"\r\n            [typeahead]=\"userObj.TravelType==='Domestic' ? informService.DomesticRescheduleNonArray:informService.RescheduleNonArray\"\r\n            [typeaheadOptionsLimit]=\"10\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\" #comment=\"ngModel\"\r\n            [ngClass]=\"{ 'is-invalid': a.submitted && comment.invalid }\" placeholder=\"Reschedule Reason\"\r\n            (typeaheadNoResults)=\"typeaheadNoResults($event,'comments',i)\" required />\r\n          <div *ngIf=\"a.submitted && comment.invalid\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"comment.errors['required']\">Reschedule Reason is required</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row text-center request\">\r\n        <button id=\"btnsub\" type=\"submit\" class=\"btn btn-primary px-3\" [disabled]=\"clicked\"\r\n          (click)=\"RescheduleRequest(a)\">Confirm</button>\r\n        <button id=\"btnClear\" type=\"submit\" class=\"btn btn-danger px-4\" (click)=\"TravelRequestCancel()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</ng-template>\r\n<ng-template #Previous>\r\n  <div class=\"modal-header popup\">\r\n    <h4 class=\"modal-title text-center request\">Previous Information</h4>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div *ngIf=\"PreviousDetails && PreviousDetails.length > 0\">\r\n      <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th>From</th>\r\n            <th>To</th>\r\n            <th>Travel Date</th>\r\n            <th>First Preferance</th>\r\n            <th>Second Preferance</th>\r\n            <th>Ticket Status</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let admin of PreviousDetails; let i = index\">\r\n            <td class=\"form-group\">\r\n              {{admin.Form}}\r\n            </td>\r\n            <td class=\"form-group\">\r\n              {{admin.To}}\r\n            </td>\r\n            <td class=\"form-group\">\r\n              {{admin.TravelDate | date: 'dd-MMM-yyyy' }}\r\n            </td>\r\n            <td class=\"form-group\">\r\n              {{admin.FirstPreferance}}\r\n            </td>\r\n            <td class=\"form-group\">\r\n              {{admin.SecondPreferance}}\r\n            </td>\r\n            <td class=\"form-group\">\r\n              {{admin.TicketStatus}}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n  <div class=\"row mb-3  text-center request\">\r\n    <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\" (click)=\"navigateBack(null)\">Ok</button>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #viewUpdateTickett>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title \">View Ticket</h5>\r\n    <button type=\"button\" class=\"close pull-right popup\" aria-label=\"Close\" tooltip=\"close\" (click)=\"close()\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n\r\n    <table class=\"table table-bordered\">\r\n      <tr>\r\n        <td>Ticket Number </td>\r\n        <td class=\"\"> {{userObj.ID}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Employee Id</td>\r\n        <td class=\"\"> {{userObj.EmployeeID}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Employee Name</td>\r\n        <td class=\"\">{{userObj.EmployeeName}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Employee Maveric Email ID </td>\r\n        <td>{{userObj.Title}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Department</td>\r\n        <td class=\"\">{{userObj.Department}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Designation</td>\r\n        <td>{{userObj.Designation}}</td>\r\n      </tr>\r\n\r\n      <tr>\r\n        <td>Gender</td>\r\n        <td>{{userObj.Gender}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Mobile Number</td>\r\n        <td> {{userObj.Mobile === null ? 'Nil' :userObj.Mobile}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Date of Birth</td>\r\n        <td>{{userObj.DOB | date: 'dd-MMM-yyyy'}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Business Unit</td>\r\n        <td>{{userObj.BusinessUnit === null ? 'Nil' :userObj.BusinessUnit}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Delivery Unit</td>\r\n        <td>{{userObj.DeliveryUnit === null ? 'Nil' :userObj.DeliveryUnit}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Travel For</td>\r\n        <td> {{userObj.Travel_x0020_For}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>\r\n          Travel Type\r\n        </td>\r\n        <td>{{userObj.TravelType}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Project Id</td>\r\n        <td>{{userObj.projectoraclecode__c }}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Project</td>\r\n        <td>{{userObj.Project }}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Cost Center / Cluster</td>\r\n        <td>{{userObj.CostCenterOrCluster === null ? 'Nil' : userObj.CostCenterOrCluster}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Client Id</td>\r\n        <td>{{userObj.clientprismcode__c === null ? 'Nil' :userObj.clientprismcode__c}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Client Name</td>\r\n        <td>{{userObj.clientname__c === null ? 'Nil' :userObj.clientname__c}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Travel Purpose</td>\r\n        <td>{{userObj.TravelPurpose}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Accommodation Required</td>\r\n        <td>{{userObj.AccommodationRequired === 'true' ?'Yes':'No'}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Travel Meal</td>\r\n        <td>{{userObj.TravelMeal}}</td>\r\n      </tr>\r\n      <tr *ngIf=\"TravelType.value === 'International'\">\r\n        <td>Given Name </td>\r\n        <td>{{userObj.GivenName}}</td>\r\n      </tr>\r\n\r\n      <tr *ngIf=\"TravelType.value === 'International'\">\r\n        <td>Surname</td>\r\n        <td> {{userObj.SurName}}</td>\r\n      </tr>\r\n      <tr *ngIf=\"TravelType.value === 'International'\">\r\n        <td>Passport No </td>\r\n        <td>{{userObj.PassportNo}}</td>\r\n      </tr>\r\n\r\n      <tr *ngIf=\"TravelType.value === 'International'\">\r\n        <td>Passport Expiry Date </td>\r\n        <td>{{userObj.PassportExpiryDate| date: 'dd-MMM-yyyy'}}</td>\r\n      </tr>\r\n      <tr *ngIf=\"TravelType.value === 'International'\">\r\n        <td>\r\n          Date of Birth\r\n        </td>\r\n        <td> {{userObj.DateofBirth| date: 'dd-MMM-yyyy'}}</td>\r\n      </tr>\r\n      <tr *ngIf=\"TravelType.value === 'International'\">\r\n        <td>Visa No</td>\r\n        <td> {{userObj.VisaNo}}</td>\r\n      </tr>\r\n      <tr *ngIf=\"TravelType.value === 'International'\">\r\n        <td>Visa Valid Till</td>\r\n        <td>{{userObj.VisaValidTill === null ? 'Nil' : userObj.VisaValidTill | date: 'dd-MMM-yyyy'}}</td>\r\n      </tr>\r\n      <tr *ngIf=\"TravelType.value === 'International'\">\r\n        <td>Visa Type </td>\r\n        <td>{{userObj.TypeofVisa}}</td>\r\n      </tr>\r\n      <tr *ngIf=\"TravelType.value === 'Domestic'\">\r\n        <td>Identity Proof </td>\r\n        <td>{{userObj.IdentityProof}}</td>\r\n      </tr>\r\n      <tr *ngIf=\"TravelType.value === 'Domestic'\">\r\n        <td>ID Proof Number </td>\r\n        <td>{{userObj.IDProofNumber}}</td>\r\n      </tr>\r\n\r\n\r\n      <tr>\r\n        <td>Travel Mode</td>\r\n        <td>{{userObj.TravelMode === null ? 'Nil' :userObj.TravelMode}}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Reporting Date</td>\r\n        <td> {{userObj.ReportingDate | date: 'dd-MMM-yyyy'}}</td>\r\n      </tr>\r\n      <tr *ngIf=\"TravelType.value === 'International'\">\r\n        <td>Trip Type </td>\r\n        <td> {{getTripText(userObj.TripType)}}</td>\r\n      </tr>\r\n\r\n\r\n\r\n    </table>\r\n\r\n    <div class=\"row mt-5\" *ngIf=\"DependentAdd && DependentAdd.length > 0 \">\r\n      <h5 class=\"ml-3\"><strong> Dependant Details</strong></h5>\r\n\r\n      <div class=\"col-md-12\">\r\n        <table datatable [dtOptions]=\"dtOptionsPop\" class=\"table table-bordered\" *ngIf=\"isDependent\">\r\n          <thead>\r\n            <tr>\r\n              <th>Given Name</th>\r\n              <th>Surname</th>\r\n              <th>Passport No</th>\r\n              <th>DOB</th>\r\n              <th>Passport Expiryy</th>\r\n              <th>Gender</th>\r\n              <th>Relationship</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr *ngFor=\"let temp of DependentAdd; let i = index\">\r\n              <td>{{temp.GivenName}}</td>\r\n              <td>{{temp.SurName}}</td>\r\n              <td>{{temp.PassportNo}}</td>\r\n              <td>{{temp.DOBPassport | date: 'dd-MMM-yyyy'}}</td>\r\n              <td>{{temp.PassportExpiryDate | date: 'dd-MMM-yyyy'}}</td>\r\n              <td>{{temp.Gender}}</td>\r\n              <td>{{temp.Relationship}}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\r\n\r\n    <div class=\"row  mt-5\" *ngIf=\"tripDeatilsArray && tripDeatilsArray.length > 0 \">\r\n      <h5 class=\"ml-3\"><strong> Trip Details </strong></h5>\r\n      <div class=\"col-md-12\">\r\n        <table datatable [dtOptions]=\"dtOptionsPop\" class=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>From City</th>\r\n              <th>To City</th>\r\n              <th>Date</th>\r\n              <th>First Preference</th>\r\n              <th>Second Preference</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr *ngFor=\"let temp of tripDeatilsArray; let i = index\">\r\n              <td>{{temp.Form}}</td>\r\n              <td>{{temp.To}} </td>\r\n              <td>{{temp.TravelDate | date: 'dd-MMM-yyyy'}} </td>\r\n              <td>{{temp.FirstPreferance}} </td>\r\n              <td>{{temp.SecondPreferance}}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row text-center request mt-3 mb-3\">\r\n      <button id=\"btnClear\" type=\"submit\" class=\"btn btn-danger px-4 mt-2\"\r\n        (click)=\"TravelRequestCancel()\">Cancel</button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-template #CancelPopup>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center\">This request is cancelling the respective leg. Are you sure want to cancel ?\r\n    </h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div>\r\n      <label for=\"comments\">Reason</label>\r\n      <sup>\r\n        <span>*</span>\r\n      </sup>\r\n    </div>\r\n    <div class=\"col-md-12\" *ngIf=\"userObj.IsProjectTravel == true\">\r\n      <div class=\"form-group\">\r\n        <input name=\"comment\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"cancelComments\"\r\n          [typeahead]=\"informService.CancelArrayDelivery\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n          typeaheadOptionField=\"name\" #comment=\"ngModel\" placeholder=\"Reason\" required\r\n          (typeaheadNoResults)=\"typeaheadNoResults($event,'cancelComments')\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-12\" *ngIf=\"userObj.IsProjectTravel == false\">\r\n      <div class=\"form-group\">\r\n        <input name=\"comment\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"cancelComments\"\r\n          [typeahead]=\"informService.CancelArrayNonDelivery\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n          typeaheadOptionField=\"name\" #comment=\"ngModel\" placeholder=\"Reason\" required\r\n          (typeaheadNoResults)=\"typeaheadNoResults($event,'cancelComments')\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\"\r\n        (click)=\"TravelRequestCancellingApprove()\">Confirm</button>\r\n      <button id=\"btnClear\" type=\"button\" class=\"btn btn-danger px-4\"\r\n        (click)=\"TravelRequestCancelDeny()\">Cancel</button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #PANNumberUpdatePopUp>\r\n  <form name=\"form\" #PANForm=\"ngForm\">\r\n    <div class=\"modal-header popup\">\r\n      <h5 class=\"modal-title text-center\">PAN Number Update\r\n      </h5>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n      <div>\r\n        <label for=\"comments\">PAN Number</label>\r\n        <sup>\r\n          <span>*</span>\r\n        </sup>\r\n      </div>\r\n\r\n      <div class=\"col-md-12\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            pattern=\"[A-Za-z]{5}\\d{4}[A-Za-z]{1}\" style=\"text-transform: capitalize\" name=\"PANNumber\"\r\n            [(ngModel)]=\"userObj.PANNumber\" #PANNumber=\"ngModel\" placeholder=\"PAN Number\"\r\n            [ngClass]=\"{ 'is-invalid': PANForm.submitted && PANForm.invalid }\" required />\r\n          <div *ngIf=\"PANNumber.touched && PANForm.invalid\">\r\n            <div *ngIf=\"PANNumber.errors['required']\" style=\"color: red;\">Pan Number required</div>\r\n            <div *ngIf=\"!PANNumber.errors['required']\" style=\"color: red;\">Enter valid pan number</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row text-center request\">\r\n        <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\" (click)=\"updatePANNumber()\"\r\n          [disabled]=\"!userObj.PANNumber || PANForm.invalid\">Update</button>\r\n        <button id=\"btnClear\" type=\"button\" class=\"btn btn-danger px-4\"\r\n          (click)=\"navigateBack('PANNumber')\">Cancel</button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</ng-template>\r\n\r\n<ng-template #PANNoNotification>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center\">Alert\r\n    </h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div>\r\n      <label for=\"comments\">\r\n        Please share Pan Card & Latest Passport Copy front & back page to employeepayments@maveric-systems.com\r\n      </label>\r\n    </div>\r\n\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btnClear\" type=\"button\" class=\"btn btn-primary px-4\"\r\n        (click)=\"showPANNoUpdatePopUp(PANNumberUpdatePopUp)\">Ok</button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #MoreInfo>\r\n  <div class=\"modal-header popup\" style=\"display: unset;\">\r\n    <button type=\"button\" class=\"close pull-right popup\" aria-label=\"Close\" tooltip=\"close\" (click)=\"bsModalRef.hide()\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n    <h5 class=\"modal-title text-center\" style=\"margin: 0 !important;\">More Info</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Given Name</label> </div>\r\n      <div class=\"col-md-4\"> : <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].GivenName : userObj.GivenName\"></span>\r\n      </div>\r\n      <div class=\"col-md-2\"><label>Sur Name</label> </div>\r\n      <div class=\"col-md-4\"> :\r\n        <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].SurName : userObj.SurName\"></span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Gender</label> </div>\r\n      <div class=\"col-md-4\"> :\r\n        <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].Gender : userObj.Gender\"></span>\r\n      </div>\r\n      <div class=\"col-md-2\"><label>Relationship</label> </div>\r\n      <div class=\"col-md-4\"> :\r\n        <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].Relationship : 'Self'\"></span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Date of Birth <span *ngIf=\"selectedDependantIndex !== -1\">(in\r\n            Passport)</span></label> </div>\r\n      <div class=\"col-md-4\" *ngIf=\"selectedDependantIndex == -1\"> : {{ userObj.DateofBirth | date: 'dd-MMM-yyyy'}}\r\n      </div>\r\n      <div class=\"col-md-4\" *ngIf=\"selectedDependantIndex !== -1\"> : {{\r\n        DependentArrayView[selectedDependantIndex].DOBPassport | date: 'dd-MMM-yyyy'}}\r\n      </div>\r\n      <div class=\"col-md-2\"><label>Passport No</label> </div>\r\n      <div class=\"col-md-4\"> :\r\n        <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].PassportNo : userObj.PassportNo\"></span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Passport Expiry Date</label> </div>\r\n      <div class=\"col-md-4\" *ngIf=\"selectedDependantIndex == -1\"> : {{ userObj.PassportExpiryDate | date:\r\n        'dd-MMM-yyyy'}}\r\n      </div>\r\n      <div class=\"col-md-4\" *ngIf=\"selectedDependantIndex !== -1\"> : {{\r\n        DependentArrayView[selectedDependantIndex].PassportExpiryDate | date: 'dd-MMM-yyyy'}}\r\n      </div>\r\n\r\n      <ng-container *ngIf=\"userObj.TravelType === 'International' && ((selectedDependantIndex != -1 && DependentArrayView[selectedDependantIndex].VisaStatus === 'Rejected') || (selectedDependantIndex == -1 && userObj.VisaStatus === 'Rejected'))\">\r\n      <div class=\"col-md-2\"><label>Rejected Reason</label> </div>\r\n      <div class=\"col-md-4\"> :\r\n        <span\r\n        [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].RejectionReason : userObj.CancellationComments\"\r\n        >{{userObj.CancellationComments}}</span>\r\n      </div>\r\n      </ng-container>\r\n\r\n\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #RejectionPopup>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center\">This request is rejecting the visa status for\r\n      <span\r\n        [innerText]=\"currentDependentIndex === -1 ? userObj.EmployeeName : DependentArrayView[currentDependentIndex].GivenName\">\r\n      </span>. Are you sure you want to reject ?\r\n    </h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div>\r\n      <label for=\"comments\">Reason</label>\r\n      <sup>\r\n        <span>*</span>\r\n      </sup>\r\n    </div>\r\n    <div class=\"col-md-12\">\r\n      <div class=\"form-group\">\r\n        <input name=\"comment\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"rejectComments\"\r\n          [typeahead]=\"informService.visaRejectionComments\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n          typeaheadOptionField=\"name\" #comment=\"ngModel\" placeholder=\"Reason\" required\r\n          (typeaheadNoResults)=\"typeaheadNoResults($event,'rejectComments')\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\"\r\n        (click)=\"rejectedVisaReason()\" [disabled]=\"!rejectComments\">Confirm</button>\r\n      <button id=\"btnClear\" type=\"button\" class=\"btn btn-danger px-4\"\r\n        (click)=\"VisaProcessRejectionDeny()\">Cancel</button>\r\n    </div>\r\n  </div>\r\n</ng-template>"

/***/ }),

/***/ "./src/app/newtravel-request/newtravel-request.component.ts":
/*!******************************************************************!*\
  !*** ./src/app/newtravel-request/newtravel-request.component.ts ***!
  \******************************************************************/
/*! exports provided: NewtravelRequestComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NewtravelRequestComponent", function() { return NewtravelRequestComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm5/ngx-bootstrap-modal.js");
/* harmony import */ var _shared_adminUse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/adminUse */ "./src/app/shared/adminUse.ts");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");
/* harmony import */ var _shared_TravelCost__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../shared/TravelCost */ "./src/app/shared/TravelCost.ts");
/* harmony import */ var _shared_costUpdate__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../shared/costUpdate */ "./src/app/shared/costUpdate.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_10__);











var NewtravelRequestComponent = /** @class */ (function () {
    function NewtravelRequestComponent(informService, router, modalService, activatedRoute, toaster) {
        this.informService = informService;
        this.router = router;
        this.modalService = modalService;
        this.activatedRoute = activatedRoute;
        this.toaster = toaster;
        this.config = {
            backdrop: true,
            class: "modal-xl",
            ignoreBackdropClick: true,
        };
        this.configsm = {
            backdrop: true,
            class: "modal-md",
            ignoreBackdropClick: true,
        };
        this.isEdit = false;
        this.noResult = false;
        this.userObj = {};
        this.adminUse = new _shared_adminUse__WEBPACK_IMPORTED_MODULE_5__["AdminUse"]();
        this.CostUpdate = new _shared_costUpdate__WEBPACK_IMPORTED_MODULE_9__["CostUpdate"]();
        this.TravelCost = new _shared_TravelCost__WEBPACK_IMPORTED_MODULE_8__["TravelCost"]();
        this.submitted = false;
        this.isShow = false;
        this.isShowDomestic = false;
        this.tripDeatilsArray = [
            {
                Form: "",
                To: "",
                TravelDate: null,
                FirstPreferance: "",
                SecondPreferance: "",
                fromDisable: false,
                toDisable: false,
                TravelDateDisable: false,
            },
        ];
        this.AdvanceDetails = [
            {
                Currency: "",
                Card: 0,
                Cash: 0,
                Amount: 0,
                carddisable: false,
                cashdisable: false,
            },
        ];
        this.isShowBtn = false;
        this.isDelete = false;
        this.isDependent = false;
        this.DependentArray = [];
        this.minDate = new Date();
        this.today = new Date();
        this.minidate = new Date();
        this.maxDate = this.minDate.setDate(this.minDate.getDate() + 1);
        this.currentDate = new Date(this.minDate);
        this.user = {};
        this.isAdvance = false;
        this.isTyped = false;
        this.isTableShow = false;
        this.isEditable = false;
        this.isDeviation = false;
        this.bsConfig = {
            dateInputFormat: this.informService.DateFormate,
            adaptivePosition: true,
            showWeekNumbers: false,
        };
        this.projectArray = [];
        this.dtOptions = {};
        this.dtOptionsPop = {};
        this.locationArrays = [];
        this.AdminUseArray = [];
        this.resultObj = {};
        this.userObject = {};
        this.travelObj = {};
        this.DependentArrayView = [];
        this.DependentAdd = [];
        this.TravelProfileArray = [];
        this.FullDetailTravelRequest = [];
        this.RId = 0;
        this.GetByTravelDependentsId = {};
        this.GetByRouteId = [];
        this.tempTrip = "";
        this.projectoaid = [];
        this.Hrinfo = [];
        this.BookingNames = [];
        this.common = [];
        this.Approv = [];
        this.Super = [];
        this.DMauthority = {};
        this.TPSuperior = {};
        this.TPSuperSuperior = {};
        this.TPSuperSuperiorOfficer = {};
        this.DMauthoritySame = {};
        this.TravelLoginInfo = {};
        this.FunctionalAuthority = {};
        this.FunctionalSupAuthority = {};
        this.purposeOfProject = [];
        this.Depart = [];
        this.Delivery = {};
        this.DeliverySource = [];
        this.fileToUpload = null;
        this.TicketFiles = [];
        this.TotalAmountPaid = 0;
        this.comments = "";
        this.pageShow = false;
        this.counter = 0;
        this.amountPaid = false;
        this.amountrefunded = false;
        this.amoPay = false;
        this.amoRepay = false;
        this.clickCount = 0;
        this.isSingleClick = true;
        this.buttonHide = false;
        this.IsEditMode = false;
        this.updateEdit = false;
        this.CurrancyType = [];
        this.money = {};
        this.NoAccomdation = false;
        this.flight = false;
        this.Costdetails = [];
        this.TPSuperiorNon = {};
        this.AA = [];
        this.el = {};
        this.EditIsDeviationRequest = false;
        this.OnewayTripVisaType = false;
        this.FilesArray = [];
        this.DebitDocs = [];
        this.FilesArrayData = [];
        this.FullDetails = [];
        this.FullDetailsRoute = [];
        this.lastTravelDetails = {};
        this.lastNumberRoute = {};
        this.Results = [];
        this.RouteResults = [];
        this.filechoose = false;
        this.fileResult = [];
        this.clicked = false;
        this.ResultPassportExpiryDate = [];
        this.checkDependentExpiry = false;
        this.GetTravelProfileInitial = [];
        this.checkAdvanceRequired = false;
        this.buttonDisabled = false;
        this.PreviousDetails = [];
        this.pref = false;
        this.DobSet = {};
        this.RejectArray = [];
        this.TravelVersion = [];
        this.allowcash = false;
        this.allowcard = false;
        this.findcurrencyallow = [];
        this.costObj = {};
        this.AdmincostArray = [];
        this.DefaultProjectUser = [];
        this.TravelProjectList = [];
        this.indexed = false;
        this.findfile = [];
        this.IsSpinnerShow = false;
        this.findfileServer = [];
        this.findProject = [];
        this.findTravelCategory = [];
        this.findTravelPurpose = [];
        this.findTravelMeal = [];
        this.findIdentityProof = [];
        this.findVisaStatus = [];
        this.findTypeofVisa = [];
        this.findCurency = [];
        this.findForm = [];
        this.findTo = [];
        this.findFirstPreferance = [];
        this.findSecondPreferance = [];
        this.findVendorName = [];
        this.findCostfor = [];
        this.findTravelMode = [];
        this.findFlight = [];
        this.findFisProject = [];
        this.findisNonProject = [];
        this.findisNonProjectReschedule = [];
        this.findisProjectReschedule = [];
        this.canAttach = [];
        this.filesData = [];
        this.isPasswordExpireInSixMnt = false;
        this.DependSixMnt = false;
        this.strings = [];
        this.travelCleared = false;
        this.todayWithoutTime = new Date(this.today.toDateString());
        this.initialDependentAdd = [];
        this.showOneWay = true;
        this.DebitDocsToUpload = [];
        this.clientDebitFilesUploaded = [];
        this.ProxyEmail = this.informService.getLocalStorage("ProxyEmail");
        if (this.ProxyEmail != null || this.ProxyEmail != undefined) {
            this.ProxyName = this.ProxyEmail;
        }
        this.userObj = this.informService.Current;
        this.minDate = new Date();
        this.RId = this.activatedRoute.snapshot.params["id"];
        this.Appkey = this.activatedRoute.snapshot.params["key"];
    }
    NewtravelRequestComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.userObj.AccommodationRequired = "";
        this.userObj.Project = "";
        this.userObj.ApprovalAuthority = "";
        this.userObj.ApproversSuperior = "";
        this.userObj.TravelCategory = "";
        this.userObj.TravelPurpose = "";
        this.userObj.TravelMeal = "";
        this.userObj.TravelType = "";
        this.userObj.IdentityProof = "";
        this.userObj.IDProofNumber = "";
        this.userObj.VisaStatus = "";
        this.userObj.bsValue = null;
        this.userObj.TypeofVisa = "";
        this.userObj.VisaNo = "";
        this.userObj.TripType = "";
        this.userObj.DeviationReason = "";
        this.userObj.ReportingDate = null;
        this.userObj.Travel_x0020_For = "Self";
        this.userObj.ClientDebit = "false";
        this.userObj.AdvanceRequired = "false";
        this.informService.GetCurrentUser(function () {
            if (_this.RId == null || _this.RId == undefined) {
                _this.informService.GetTravelProfileDetails().then(function (res) {
                    _this.GetTravelProfileInitial = res;
                    // if (this.userObj.DeliveryUnit) {
                    //   const units: any = this.userObj.DeliveryUnit.split("-");
                    //   if (units && units.length > 0) {
                    //     this.userObj.DeliveryUnit = last(units);
                    //     this.userObj.BusinessUnit = units.length > 1 ? units[units.length - 2] : "";
                    //   }
                    // }
                    if (_this.GetTravelProfileInitial.length > 0) {
                    }
                    else {
                        _this.router.navigate(["/MyProfile"]);
                        _this.toaster.successToastr("Please update your profile");
                    }
                });
            }
            _this.informService.GetDepertName().then(function (res) {
                _this.Depart = res;
            });
            _this.informService.GetCurrency().then(function (res) {
                _this.CurrancyType = res;
            });
            _this.informService.GetHrInfo().then(function (res) {
                _this.Hrinfo = res;
            });
            _this.informService.GetBookingNames().then(function (res) {
                _this.BookingNames = res;
                var checkDate = new Date();
                _this.informService.GetProjectoid().then(function (respon) {
                    _this.projectoaid = _this.informService.projectoaidlist;
                    _this.projectoaid.forEach(function (element) {
                        element.deploymentdate__c = new Date(element.deploymentdate__c);
                        element.enddate__c = new Date(element.enddate__c);
                    });
                    for (var i = 0; i < _this.BookingNames.length; i++) {
                        var ele = _this.BookingNames[i];
                        for (var j = 0; j < _this.projectoaid.length; j++) {
                            var res = _this.projectoaid[j];
                            if (ele.project_id == res.bookingprojectoaid__c &&
                                checkDate >= res.deploymentdate__c &&
                                checkDate <= res.enddate__c &&
                                _this.common.findIndex(function (e) { return e.project_id == ele.project_id; }) < 0) {
                                _this.common.push(ele);
                            }
                        }
                    }
                    _this.common.forEach(function (element) {
                        element.ProjectList =
                            element.projectoraclecode__c +
                                " " +
                                "-" +
                                " " +
                                element.project_name;
                    });
                });
            });
            _this.informService.GetLocation().then(function (res) {
                _this.locationArrays = res;
            });
            _this.GetDependentsList();
            _this.informService.GetTravelProfileDetails().then(function (res) {
                _this.TravelProfileArray = res;
                if (_this.TravelProfileArray.length > 0) {
                    (_this.userObj.GivenName = res[0].GivenName),
                        (_this.userObj.SurName = res[0].SurName),
                        (_this.userObj.PassportNo = res[0].PassportNo),
                        (_this.userObj.DateofBirth = new Date(res[0].DOBPassport)),
                        (_this.userObj.PassportExpiryDate = new Date(res[0].PassportExpiryDate)),
                        (_this.userObj.PassportExpDate = new Date(res[0].PassportExpDate)),
                        (_this.userObj.Mobile = res[0].Mobile);
                    _this.PassportExpDate = _this.userObj.PassportExpDate.setMonth(_this.userObj.PassportExpDate.getMonth() - 6);
                    _this.userObj.PANNumber = res[0].PANNumber;
                }
            });
        });
        this.userObj = this.informService.Current;
        this.LoginTitle = this.userObj.MailID;
        this.dtOptions = {
            pagingType: "full_numbers",
            pageLength: 10,
            paging: false,
            searching: false,
            info: false,
            ordering: false,
        };
        this.dtOptionsPop = {
            pagingType: "full_numbers",
            pageLength: 30,
            paging: false,
            searching: false,
            info: false,
            ordering: false,
        };
        if (this.RId != null && this.RId != undefined) {
            this.IsEditMode = true;
            if (this.Appkey == "UpdateTicket" ||
                this.Appkey == "Mytravel" ||
                this.Appkey == "approval" ||
                this.Appkey == "VisaProcessView") {
                this.updateEdit = true;
            }
            this.isEdit = true;
            this.informService.GetTravelRequestById(this.RId).then(function (res) {
                _this.informService.GetHrInfo().then(function (resps) {
                    _this.Hrinfo = resps;
                });
                _this.userObject = res;
                if (_this.userObject.TravelRequest.ClientDebitFileName &&
                    JSON.parse(_this.userObject.TravelRequest.ClientDebitFileName).length > 0) {
                    _this.clientDebitFilesUploaded = JSON.parse(_this.userObject.TravelRequest.ClientDebitFileName);
                }
                _this.informService
                    .DobSet(res.TravelRequest.EmployeeID)
                    .then(function (resp) {
                    _this.DobSet = resp[0];
                    _this.userObj.DOB = new Date(_this.DobSet.dob);
                    _this.userObj.Age = _this.CalculateAge(_this.DobSet.dob);
                });
                res.TravelRequest.DateofBirth = new Date(res.TravelRequest.DateofBirth);
                if (res.TravelRequest.ReportingDate == null) {
                    res.TravelRequest.ReportingDate = "";
                }
                else {
                    res.TravelRequest.ReportingDate = new Date(res.TravelRequest.ReportingDate);
                }
                if (res.TravelRequest.VisaStatus === "Submitted" || res.TravelRequest.VisaStatus === "On-arrival" || res.TravelRequest.VisaStatus === "Return to home country") {
                    _this.isVisaSubmitted = true;
                }
                if (res.TravelRequest.PassportExpiryDate == null) {
                    res.TravelRequest.PassportExpiryDate = "";
                }
                else {
                    res.TravelRequest.PassportExpiryDate = new Date(res.TravelRequest.PassportExpiryDate);
                }
                if (res.TravelRequest.PassportExpDate == null) {
                    res.TravelRequest.PassportExpDate = "";
                }
                else {
                    res.TravelRequest.PassportExpDate = new Date(res.TravelRequest.PassportExpDate);
                }
                if (res.TravelRequest.InvoiceDate == null ||
                    res.TravelRequest.InvoiceDate == "" ||
                    res.TravelRequest.InvoiceDate == "1970-01-01T00:00:00Z") {
                    res.TravelRequest.InvoiceDate = null;
                }
                else {
                    res.TravelRequest.InvoiceDate = new Date(res.TravelRequest.InvoiceDate);
                }
                var tempPANNumber = _this.userObj.PANNumber;
                _this.userObj = res.TravelRequest;
                _this.userObj.PANNumber = tempPANNumber;
                if (_this.Appkey === "UpdateTicket" && _this.userObj.TravelMode == null) {
                    _this.userObj.isNotBooked = true;
                }
                if (_this.Appkey === "UpdateTicket") {
                    _this.informService.IsAdmin(_this.userObj.Title).then(function (result) {
                        _this.userObj.isAdmin = result;
                    });
                }
                if (_this.userObj.VisaValidTill || _this.userObj.TypeofVisa || _this.userObj.VisaNo) {
                    _this.initialVisaType = _this.userObj.TypeofVisa;
                    _this.initialVisaNo = _this.userObj.VisaNo;
                    _this.userObj.VisaValidTill = _this.initialVisaValidity = _this.userObj.VisaValidTill ? new Date(_this.userObj.VisaValidTill) : "";
                }
                if (_this.userObject.DependentAdd.length > 0) {
                    _this.initialDependentAdd = Object(lodash__WEBPACK_IMPORTED_MODULE_10__["cloneDeep"])(_this.userObject.DependentAdd);
                }
                _this.PassportExpDate = _this.userObj.PassportExpDate.setMonth(_this.userObj.PassportExpDate.getMonth() - 6);
                if (_this.userObj.TravelMode === "Flight") {
                    _this.flight = true;
                }
                if (_this.userObj.IsDeviationRequest === true) {
                    _this.isDeviation = true;
                }
                else {
                    _this.isDeviation = false;
                }
                if (_this.userObj.Travel_x0020_For === "Dependent") {
                    _this.isDependent = true;
                }
                else if (_this.userObj.Travel_x0020_For === "Self along with Dependents") {
                    _this.isDependent = true;
                }
                else {
                    _this.isDependent = false;
                }
                if (_this.userObj.TravelType === "International") {
                    _this.isShowDomestic = false;
                    _this.isShow = true;
                }
                else {
                    _this.isShow = false;
                    _this.isShowDomestic = true;
                }
                if (_this.userObj.AdvanceRequired == true) {
                    _this.userObj.AdvanceRequired = "true";
                    _this.isAdvance = true;
                }
                else {
                    _this.userObj.AdvanceRequired = "false";
                }
                if (_this.userObj.AccommodationRequired == true) {
                    _this.userObj.AccommodationRequired = "true";
                }
                else {
                    _this.userObj.AccommodationRequired = "false";
                }
                if (_this.userObj.ClientDebit == true) {
                    _this.userObj.ClientDebit = "true";
                }
                else {
                    _this.userObj.ClientDebit = "false";
                }
                if (_this.userObject.AdvanceDetails.length > 0) {
                    _this.AdvanceDetails = _this.userObject.AdvanceDetails;
                    _this.AdvanceDetails.forEach(function (element) {
                        if (element.Card == "0" || element.Card == 0) {
                            element.carddisable = true;
                        }
                        if (element.Cash == "0" || element.Cash == 0) {
                            element.cashdisable = true;
                        }
                    });
                }
                else {
                    _this.AdvanceDetails = _this.AdvanceDetails;
                }
                _this.rgid = _this.userObj.ID;
                _this.tripDeatilsArray = _this.userObject.tripDeatilsArray;
                _this.calculateFirstLeg(0);
                setTimeout(function () {
                    _this.tripDeatilsArray.forEach(function (element) {
                        element.Actions = "NoUpdate";
                        element.ArrivalDate = new Date(element.ArrivalDate === null ? element.ActualDate : element.ArrivalDate);
                        element.TravelDate = new Date(element.TravelDate);
                        element.ActualDate = new Date(element.ActualDate);
                        element.minDate = new Date(element.ActualDate);
                        element.minTravelDate = new Date(element.ActualDate);
                    });
                    _this.tripDetailsBeforeReschedule = Object(lodash__WEBPACK_IMPORTED_MODULE_10__["cloneDeep"])(_this.tripDeatilsArray);
                }, 2000);
                _this.DependentAdd = _this.userObject.DependentAdd;
                if (_this.userObj.TravelStatus === "Travel Approved") {
                    _this.CostUpdate.Costfor = "Booking";
                }
                if (_this.userObj.TravelStatus === "Reschedule Approved") {
                    _this.CostUpdate.Costfor = "Reschedule";
                }
                if (_this.userObj.TravelStatus === "Cancellation Requested") {
                    _this.CostUpdate.Costfor = "Cancel";
                }
                if (_this.userObj.TripType === "RoundTrip" ||
                    _this.userObj.TripType === "OneWay") {
                    _this.userObj.FromCity = _this.tripDeatilsArray[0].Form;
                    _this.userObj.ToCity = _this.tripDeatilsArray[0].To;
                }
                if (_this.userObj.TripType === "MultiCity") {
                    _this.userObj.FromCity = _this.tripDeatilsArray[0].Form;
                    _this.userObj.ToCity = _this.tripDeatilsArray[0].Form;
                }
                _this.AdvanceDetails.forEach(function (element) {
                    element.Card = element.Card ? Number.parseFloat(element.Card) : 0;
                    element.Cash = element.Cash ? Number.parseFloat(element.Cash) : 0;
                });
                _this.isTableShow = true;
                _this.informService
                    .GetDependentsById(_this.userObj.Title)
                    .then(function (resp) {
                    _this.DependentArrayView = resp;
                    if (_this.DependentArrayView && _this.DependentArrayView.length > 0) {
                        _this.DependentArrayView.forEach(function (item) {
                            item.Selected = false;
                            item.DOBPassport = new Date(item.DOBPassport);
                            item.PassportExpiryDate = new Date(item.PassportExpiryDate);
                        });
                        _this.DependentAdd.forEach(function (response) {
                            _this.DependentArrayView.forEach(function (p) {
                                _this.isDependent = true;
                                if (response.GivenName == p.GivenName &&
                                    response.SurName == p.SurName) {
                                    p.Selected = true;
                                    p.VisaValidTill = response.VisaValidTill ? new Date(response.VisaValidTill) : "";
                                    p.VisaStatus = response.VisaStatus;
                                    p.TypeofVisa = response.TypeofVisa;
                                    p.VisaNo = response.VisaNumber;
                                    p.RejectionReason = response.RejectionReason;
                                    if (_this.Appkey === "VisaProcess") {
                                        p.haveToChange = response.VisaStatus === "Submitted" ? true : false;
                                    }
                                }
                            });
                        });
                        _this.firstDependentIndex = _this.DependentArrayView.findIndex(function (item) { return item.Selected; });
                    }
                });
                if (_this.userObj.TravelType === 'International') {
                    if (_this.userObj.Travel_x0020_For === "Self") {
                        _this.checkInterAssPass();
                    }
                    else if (_this.userObj.Travel_x0020_For === "Dependent") {
                        _this.checkInterDepPass();
                    }
                    else if (_this.userObj.Travel_x0020_For === "Self along with Dependents") {
                        _this.checkInterDepPass();
                        _this.checkInterAssPass();
                        _this.checkIsVisaStatusRejected();
                    }
                }
                _this.GetTickets();
                (_this.tempTrip = _this.userObj.TripType),
                    (_this.userObj.ReportingDate = new Date(_this.userObj.ReportingDate)),
                    _this.informService.getCostDetails(_this.rgid).then(function (response) {
                        _this.Costdetails = response;
                        var AmountPaid = 0.0;
                        _this.Costdetails.forEach(function (element) {
                            element.TotalCost ? Number.parseFloat(element.TotalCost) : 0;
                            AmountPaid =
                                Number.parseFloat(AmountPaid) +
                                    Number.parseFloat(element.TotalCost);
                        });
                        _this.userObj.Cost = AmountPaid;
                    });
                _this.informService.GetDepertName().then(function (res) {
                    _this.Depart = res;
                });
                _this.informService.GetBookingNames().then(function (res) {
                    _this.BookingNames = res;
                });
                _this.informService
                    .GetProject(_this.userObj.EmployeeID)
                    .then(function (res) {
                    _this.projectoaid = res;
                    _this.projectoaid.forEach(function (element) {
                        element.deploymentdate__c = new Date(element.deploymentdate__c);
                        element.enddate__c = new Date(element.enddate__c);
                    });
                    var checkDate = new Date();
                    for (var i = 0; i < _this.BookingNames.length; i++) {
                        var ele = _this.BookingNames[i];
                        for (var j = 0; j < _this.projectoaid.length; j++) {
                            var res = _this.projectoaid[j];
                            if (ele.project_id == res.bookingprojectoaid__c &&
                                (ele.projectdepartmentname__c != null ||
                                    ele.projectdepartmentname__c != undefined) &&
                                checkDate >= res.deploymentdate__c &&
                                checkDate <= res.enddate__c) {
                                _this.common.push(ele);
                            }
                        }
                    }
                    _this.el = _this.common.find(function (e) { return e.ProjectList == _this.userObj.Project; });
                    if (_this.el && (_this.el.projectdepartmentname__c != null ||
                        _this.el.projectdepartmentname__c != undefined)) {
                        _this.Delivery = _this.Depart.find(function (eleme) {
                            return eleme.Department_name == _this.el.projectdepartmentname__c;
                        });
                    }
                    else {
                        _this.Delivery = _this.Depart.find(function (eleme) { return eleme.Department_name == _this.userObj.Department; });
                    }
                    if (_this.Delivery && (_this.Delivery.department_type_name != null ||
                        _this.Delivery.department_type_name != undefined)) {
                        if (_this.Delivery.department_type_name == "DELIVERY") {
                            _this.DeliverySource = _this.informService.TravelCategory.filter(function (eleme) { return eleme.department_type_name == "DELIVERY"; });
                            _this.userObj.IsProjectTravel = true;
                        }
                        else {
                            _this.DeliverySource = _this.informService.TravelCategory.filter(function (eleme) { return eleme.department_type_name != "DELIVERY"; });
                            _this.userObj.IsProjectTravel = false;
                        }
                        if (_this.userObj && _this.userObj.Travel_x0020_For !== 'Dependent') {
                            Object(lodash__WEBPACK_IMPORTED_MODULE_10__["remove"])(_this.DeliverySource, _this.informService.TravelCategory.find(function (eleme) { return eleme.name == "Dependent Travel"; }));
                        }
                    }
                    setTimeout(function () {
                        if (_this.Hrinfo && _this.Hrinfo.length > 0) {
                            if (_this.RId != null &&
                                _this.RId != undefined &&
                                (_this.Appkey === "Reschedule" || _this.Appkey === "VisaProcess")) {
                                var isDMavailable = false;
                                var isTPavailable = false;
                                var FMSuperior_1;
                                var FMSuperSuperior = void 0;
                                var Account = void 0;
                                if (_this.el.accountmanagerprismcode__c != null ||
                                    _this.el.accountmanagerprismcode__c != undefined) {
                                    Account = _this.Hrinfo.find(function (el) { return _this.el.accountmanagerprismcode__c == el.Title; });
                                    if (Account != null || Account != undefined) {
                                        _this.EditAccountManager = Account.maveric_email_id;
                                    }
                                }
                                var FM_1 = _this.Hrinfo.find(function (el) { return _this.informService.Current.EmployeeID == el.Title; });
                                if (FM_1 != null || FM_1 != undefined) {
                                    FMSuperior_1 = _this.Hrinfo.find(function (el) { return FM_1.functional_reporting_to == el.Title; });
                                    FMSuperSuperior = _this.Hrinfo.find(function (el) { return FMSuperior_1.functional_reporting_to == el.Title; });
                                    _this.userObj.ApprovalAuthority = FM_1.maveric_email_id;
                                }
                                if (FMSuperior_1 != null || FMSuperior_1 != undefined) {
                                    _this.userObj.ApproversSuperior =
                                        FMSuperior_1.maveric_email_id;
                                }
                                if (_this.el.deliverymanagerprismcode__c != null ||
                                    _this.el.deliverymanagerprismcode__c != undefined) {
                                    _this.DM = _this.Hrinfo.find(function (el) { return _this.el.deliverymanagerprismcode__c == el.Title; });
                                    if (_this.DM != null || _this.DM != undefined) {
                                        _this.DMSuperior = _this.Hrinfo.find(function (el) { return _this.DM.functional_reporting_to == el.Title; });
                                    }
                                    isDMavailable = true;
                                }
                                if (_this.el.technicalpartnerprismcode__c != null ||
                                    _this.el.technicalpartnerprismcode__c != undefined) {
                                    _this.TP = _this.Hrinfo.find(function (el) { return _this.el.technicalpartnerprismcode__c == el.Title; });
                                    if (_this.TP != null || _this.TP != undefined) {
                                        _this.TPSuperior = _this.Hrinfo.find(function (el) { return _this.TP.functional_reporting_to == el.Title; });
                                    }
                                    isTPavailable = true;
                                }
                                if (isDMavailable && isTPavailable) {
                                    if (_this.DM.maveric_email_id ==
                                        _this.informService.Current.MailID) {
                                        _this.EditApprovalAuthority = _this.TP.maveric_email_id;
                                        _this.EditApproversSuperior = _this.TPSuperior.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                    else if (_this.TP.maveric_email_id ==
                                        _this.informService.Current.MailID) {
                                        if (_this.TPSuperior != null ||
                                            _this.TPSuperior != undefined) {
                                            _this.TPSuperSuperior = _this.Hrinfo.find(function (el) {
                                                return _this.TPSuperior.functional_reporting_to == el.Title;
                                            });
                                        }
                                        _this.EditApprovalAuthority = _this.TPSuperior.maveric_email_id;
                                        _this.EditApproversSuperior = _this.TPSuperSuperior.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                    else {
                                        _this.EditApprovalAuthority = _this.DM.maveric_email_id;
                                        _this.EditApproversSuperior = _this.TP.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                }
                                else if (!isDMavailable && isTPavailable) {
                                    if (_this.TP.maveric_email_id ==
                                        _this.informService.Current.MailID) {
                                        if (_this.TPSuperior != null ||
                                            _this.TPSuperior != undefined) {
                                            _this.TPSuperSuperior = _this.Hrinfo.find(function (el) {
                                                return _this.TPSuperior.functional_reporting_to == el.Title;
                                            });
                                        }
                                        _this.EditApprovalAuthority = _this.TPSuperior.maveric_email_id;
                                        _this.EditApproversSuperior = _this.TPSuperSuperior.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                    else {
                                        _this.EditApprovalAuthority = _this.TP.maveric_email_id;
                                        _this.EditApproversSuperior = _this.TPSuperior.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                }
                                else if (isDMavailable && !isTPavailable) {
                                    if (_this.DM.maveric_email_id ==
                                        _this.informService.Current.MailID) {
                                        _this.EditApprovalAuthority = _this.DMSuperior.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.DMSuperiorSuper = _this.Hrinfo.find(function (el) {
                                            return _this.DMSuperior.functional_reporting_to == el.Title;
                                        });
                                        _this.EditApproversSuperior = _this.DMSuperiorSuper.maveric_email_id;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                    else {
                                        _this.EditApprovalAuthority = _this.DM.maveric_email_id;
                                        _this.EditApproversSuperior = _this.DMSuperior.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                }
                                else if (!isDMavailable && !isTPavailable) {
                                    _this.EditApprovalAuthority = FMSuperior_1.maveric_email_id;
                                    _this.EditApproversSuperior =
                                        FMSuperSuperior.maveric_email_id;
                                    _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                    _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                }
                                else {
                                    _this.EditApprovalAuthority = FMSuperior_1.maveric_email_id;
                                    _this.EditApproversSuperior =
                                        FMSuperSuperior.maveric_email_id;
                                    _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                    _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                }
                                if (_this.EditApprovalAuthority == _this.EditApproversSuperior ||
                                    _this.informService.Current.MailID ==
                                        _this.EditApprovalAuthority ||
                                    _this.informService.Current.MailID ==
                                        _this.EditApproversSuperior) {
                                    _this.EditApprovalAuthority = "";
                                    _this.EditApproversSuperior = "";
                                    _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                    _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    _this.toaster.errorToastr("unable to fetch approval details please contact administrator");
                                }
                            }
                        }
                    }, 5000);
                });
                _this.tripDetailsBeforeReschedule = Object(lodash__WEBPACK_IMPORTED_MODULE_10__["cloneDeep"])(_this.tripDeatilsArray);
            });
        }
    };
    NewtravelRequestComponent.prototype.onChange = function (date) {
        this.userObj.VisaValidTill = date;
    };
    NewtravelRequestComponent.prototype.CalculateAge = function (d) {
        return new Date().getFullYear() - new Date(d).getFullYear();
    };
    NewtravelRequestComponent.prototype.NavDependends = function () {
        this.router.navigate(["/Dependends"]);
    };
    NewtravelRequestComponent.prototype.NavMyProfile = function () {
        this.router.navigate(["/MyProfile"]);
    };
    NewtravelRequestComponent.prototype.NavTravelRequest = function () {
        this.router.navigate(["/"]);
    };
    NewtravelRequestComponent.prototype.GetDependentsList = function () {
        var _this = this;
        this.informService.GetDependents().then(function (res) {
            _this.DependentArrayView = res;
            if (_this.DependentArrayView && _this.DependentArrayView.length > 0) {
                _this.DependentArrayView.forEach(function (item) {
                    item.Selected = false;
                    item.DOBPassport = new Date(item.DOBPassport);
                    item.PassportExpiryDate = new Date(item.PassportExpiryDate);
                });
            }
        });
    };
    NewtravelRequestComponent.prototype.saveInLocal = function () {
        this.userObject.tripDeatilsArray = this.tripDeatilsArray;
        this.userObject.DependentAdd = this.DependentAdd;
        this.userObject.resultObj = this.userObj;
        this.informService.setLocalStorage("userInfo", this.userObject);
        this.user = this.informService.getLocalStorage("userInfo");
        alert("Locally Saved");
    };
    NewtravelRequestComponent.prototype.RescheduleRequest = function (form) {
        var _this = this;
        if (form.valid) {
            this.clicked = true;
            if (this.userObj.ReportingDate != null) {
                if (this.userObj.TravelType == "International" && (this.userObj.Travel_x0020_For === "Dependent" || this.userObj.Travel_x0020_For === "Self along with Dependents")) {
                    this.DependentAdd.forEach(function (item) {
                        var matchedDependent = _this.DependentArrayView.find(function (value) { return value.GivenName === item.GivenName && value.SurName === item.SurName; });
                        item.VisaValidTill = matchedDependent.VisaValidTill;
                        item.VisaNumber = matchedDependent.VisaNo;
                        item.VisaStatus = matchedDependent.VisaStatus;
                        item.TypeofVisa = matchedDependent.TypeofVisa;
                        if (item.VisaNo) {
                            delete item.VisaNo;
                        }
                    });
                }
                if ((this.userObj.DeviationReason == undefined || this.userObj.DeviationReason == null || this.userObj.DeviationReason == "")) {
                    (this.EditTravelApprover = this.EditApprovalAuthority),
                        (this.EditIsDeviationRequest = false);
                }
                else {
                    (this.EditTravelApprover = this.EditApprovalAuthority),
                        (this.EditIsDeviationRequest = true);
                }
                if (this.userObj.IsProjectTravel) {
                    var objects = {
                        Id: this.rgid,
                        TravelStatus: this.comments === 'Visa Delay' ? "Reschedule Approved" : "Reschedule Requested",
                        ApprovalAuthority: this.EditApprovalAuthority,
                        ApproversSuperior: this.EditApproversSuperior,
                        TravelApprover: this.EditTravelApprover,
                        IsDeviationRequest: this.EditIsDeviationRequest,
                        ReportingDate: this.userObj.ReportingDate,
                        Form: this.tripDeatilsArray[0].Form,
                        To: this.tripDeatilsArray[0].To,
                        DeviationReason: this.userObj.DeviationReason,
                        Remarks: this.comments,
                        Title: this.userObj.Title,
                        AccountManager: this.EditAccountManager,
                        AdvanceRequired: this.userObj.AdvanceRequired,
                        VisaValidTill: this.userObj.VisaValidTill ? this.userObj.VisaValidTill : null,
                        TypeofVisa: this.userObj.TypeofVisa,
                        VisaNo: this.userObj.VisaNo
                    };
                    this.userObject.UpdateObj = objects;
                    this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                    if (this.userObj.TravelType === "International" && (((!this.initialVisaValidity && this.userObj.VisaValidTill) ||
                        (this.initialVisaValidity && this.userObj.VisaValidTill && ((new Date(this.initialVisaValidity.toDateString()) > new Date(this.userObj.VisaValidTill.toDateString())) ||
                            (new Date(this.initialVisaValidity.toDateString()) < new Date(this.userObj.VisaValidTill.toDateString()))))) ||
                        ((!this.initialVisaNo && this.userObj.VisaNo) || (this.initialVisaNo && this.userObj.VisaNo && this.initialVisaNo != this.userObj.VisaNo)) ||
                        ((!this.initialVisaType && this.userObj.TypeofVisa) || (this.initialVisaType && this.userObj.TypeofVisa && this.initialVisaType != this.userObj.TypeofVisa)))) {
                        this.userObject.IsVisaValidityUpdated = true;
                    }
                    this.userObject.changedDependentsVisa = [];
                    if (this.userObj.TravelType === "International" && this.DependentAdd.length > 0) {
                        this.DependentAdd.forEach(function (dependent) {
                            var oldData = _this.initialDependentAdd.find(function (item) { return item.GivenName === dependent.GivenName && item.SurName === dependent.SurName; });
                            if (oldData) {
                                if ((((!oldData.VisaValidTill) && dependent.VisaValidTill) ||
                                    (oldData.VisaValidTill && dependent.VisaValidTill &&
                                        ((_this.getDateWithoutTime(new Date(oldData.VisaValidTill)) >
                                            _this.getDateWithoutTime(new Date(dependent.VisaValidTill.toDateString()))) ||
                                            (_this.getDateWithoutTime(new Date(oldData.VisaValidTill))
                                                < _this.getDateWithoutTime(new Date(dependent.VisaValidTill.toDateString())))))) ||
                                    (((!oldData.VisaValidTill) && dependent.VisaNumber) || (oldData.VisaNumber && dependent.VisaNumber && oldData.VisaNumber != dependent.VisaNumber)) ||
                                    ((!oldData.TypeofVisa && dependent.TypeofVisa) || (oldData.TypeofVisa && dependent.TypeofVisa && oldData.TypeofVisa != dependent.TypeofVisa))) {
                                    _this.userObject.changedDependentsVisa.push(dependent);
                                }
                            }
                            else {
                                _this.userObject.changedDependentsVisa.push(dependent);
                            }
                        });
                    }
                    this.userObject.extras = {
                        GivenName: this.userObj.GivenName,
                        SurName: this.userObj.SurName
                    };
                    var trackerData = {
                        ActualUserEmpID: this.informService.actualUserId,
                        LoggedInUserEmpID: this.informService.Current.EmployeeID,
                        TravelTicketNo: this.userObj.ID,
                        PreviousStatus: this.userObj.TravelStatus,
                        RescheduleReason: this.comments,
                    };
                    if (this.userObject.UpdateObj.TravelStatus === "Reschedule Approved") {
                        trackerData.ActivityPerformed = "RescheduleApproved";
                    }
                    else {
                        trackerData.ActivityPerformed = "RescheduleRequested";
                    }
                    this.informService
                        .InsertNewTravelRequestReschedule(this.userObject, trackerData)
                        .then(function (res) {
                        _this.ngOnInit();
                        _this.bsModalRef.hide();
                        _this.clicked = false;
                        _this.toaster.successToastr("Reschedule Requested");
                        _this.router.navigate(["/"]);
                    });
                }
                else {
                    var objects = {
                        Id: this.rgid,
                        TravelStatus: this.userObj.VisaStatus === "Submitted" ? "Visa Pending" : "Reschedule Approved",
                        ApprovalAuthority: this.EditApprovalAuthority,
                        ApproversSuperior: this.EditApproversSuperior,
                        IsDeviationRequest: false,
                        ReportingDate: this.userObj.ReportingDate,
                        Remarks: this.comments,
                        Title: this.userObj.Title,
                        AccountManager: this.EditAccountManager,
                        AdvanceRequired: this.userObj.AdvanceRequired,
                        VisaValidTill: this.userObj.VisaValidTill ? this.userObj.VisaValidTill : null,
                        TypeofVisa: this.userObj.TypeofVisa,
                        VisaNo: this.userObj.VisaNo
                    };
                    this.userObject.UpdateObj = objects;
                    this.userObject.TravelType = this.userObj.TravelType;
                    this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                    if (this.userObj.TravelType === "International" && (((!this.initialVisaValidity && this.userObj.VisaValidTill) ||
                        (this.initialVisaValidity && this.userObj.VisaValidTill && ((new Date(this.initialVisaValidity.toDateString()) > new Date(this.userObj.VisaValidTill.toDateString())) ||
                            (new Date(this.initialVisaValidity.toDateString()) < new Date(this.userObj.VisaValidTill.toDateString()))))) ||
                        ((!this.initialVisaNo && this.userObj.VisaNo) || (this.initialVisaNo && this.userObj.VisaNo && this.initialVisaNo != this.userObj.VisaNo)) ||
                        ((!this.initialVisaType && this.userObj.TypeofVisa) || (this.initialVisaType && this.userObj.TypeofVisa && this.initialVisaType != this.userObj.TypeofVisa)))) {
                        this.userObject.IsVisaValidityUpdated = true;
                    }
                    this.userObject.changedDependentsVisa = [];
                    if (this.userObj.TravelType === "International" && this.DependentAdd.length > 0) {
                        this.DependentAdd.forEach(function (dependent) {
                            var oldData = _this.initialDependentAdd.find(function (item) { return item.GivenName === dependent.GivenName && item.SurName === dependent.SurName; });
                            if (oldData) {
                                if ((((!oldData.VisaValidTill) && dependent.VisaValidTill) ||
                                    (oldData.VisaValidTill && dependent.VisaValidTill &&
                                        ((_this.getDateWithoutTime(new Date(oldData.VisaValidTill)) >
                                            _this.getDateWithoutTime(new Date(dependent.VisaValidTill.toDateString()))) ||
                                            (_this.getDateWithoutTime(new Date(oldData.VisaValidTill))
                                                < _this.getDateWithoutTime(new Date(dependent.VisaValidTill.toDateString())))))) ||
                                    (((!oldData.VisaValidTill) && dependent.VisaNumber) || (oldData.VisaNumber && dependent.VisaNumber && oldData.VisaNumber != dependent.VisaNumber)) ||
                                    ((!oldData.TypeofVisa && dependent.TypeofVisa) || (oldData.TypeofVisa && dependent.TypeofVisa && oldData.TypeofVisa != dependent.TypeofVisa))) {
                                    _this.userObject.changedDependentsVisa.push(dependent);
                                }
                            }
                            else {
                                _this.userObject.changedDependentsVisa.push(dependent);
                            }
                        });
                    }
                    this.userObject.extras = {
                        GivenName: this.userObj.GivenName,
                        SurName: this.userObj.SurName
                    };
                    var trackerData = {
                        ActualUserEmpID: this.informService.actualUserId,
                        LoggedInUserEmpID: this.informService.Current.EmployeeID,
                        TravelTicketNo: this.userObj.ID,
                        PreviousStatus: this.userObj.TravelStatus,
                        RescheduleReason: this.comments,
                    };
                    if (this.userObj.VisaStatus != "Submitted") {
                        trackerData.ActivityPerformed = "RescheduleApproved";
                    }
                    this.informService
                        .InsertNewTravelRequestReschedule(this.userObject, trackerData)
                        .then(function (res) {
                        _this.ngOnInit();
                        _this.bsModalRef.hide();
                        _this.clicked = false;
                        _this.toaster.successToastr("Reschedule Approved");
                        _this.router.navigate(["/"]);
                    });
                }
            }
            else {
                this.toaster.errorToastr("Please fill Reporting Date");
            }
        }
    };
    NewtravelRequestComponent.prototype.add = function (form, template, PANNoUpdatePopup) {
        this.submitted = true;
        this.clicked = false;
        if ((this.userObj.AdvanceRequired == 'true' || this.userObj.AdvanceRequired === true) && !this.userObj.PANNumber) {
            this.toaster.warningToastr("Update PAN Number");
            this.bsModalRef = this.modalService.show(PANNoUpdatePopup, this.config);
            return;
        }
        if ((this.userObj.ClientDebit == 'true' || this.userObj.ClientDebit === true) && this.DebitDocs.length > 0 && this.DebitDocsToUpload.length < 1) {
            this.toaster.warningToastr("Choose atleast one file for client debit or remove all empty grids");
            return;
        }
        if (form.valid && this.Appkey !== 'VisaProcess' && this.userObj.Travel_x0020_For === "Self along with Dependents" && this.userObj.TravelType === "International" && this.userObj.VisaStatus !== "Submitted" && this.DependentAdd.length > 0) {
            var submittedVisaStatus = this.DependentAdd.filter(function (item) { return item.VisaStatus === "Submitted"; });
            if (submittedVisaStatus.length > 0) {
                this.toaster.errorToastr("Please raise a separate ticket for dependents");
                return;
            }
        }
        if (form.valid && this.userObj.TripType && this.userObj.TripType != "") {
            if ((this.userObj.Travel_x0020_For === "Self along with Dependents" && this.DependentAdd.length == 0 && (form.value.TravelType === "International" || form.value.TravelType === "Domestic"))
                || this.userObj.Travel_x0020_For === "Dependent" && this.DependentAdd.length == 0 && (form.value.TravelType === "International" || form.value.TravelType === "Domestic")) {
                this.toaster.errorToastr("Please choose Dependents");
            }
            else {
                if (form.value.TravelType == "International") {
                    var AmountPaid = 0.0;
                    if (form.value.AdvanceRequired == "true") {
                        for (var i = 0; i < this.AdvanceDetails.length; i++) {
                            if (this.AdvanceDetails[i].Cash > 0 ||
                                this.AdvanceDetails[i].Card > 0) {
                                this.checkAdvanceRequired = true;
                            }
                            else {
                                this.toaster.errorToastr("Please enter the amount in advance required field");
                                this.checkAdvanceRequired = false;
                                break;
                            }
                        }
                    }
                    if (form.value.AdvanceRequired == "true" &&
                        this.checkAdvanceRequired === true) {
                        if (form.value.TripType == "MultiCity") {
                            if (this.tripDeatilsArray.length > 1) {
                                this.bsModalRef = this.modalService.show(template, this.config);
                                this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                                this.userObject.DependentAdd = this.DependentAdd;
                                this.userObject.resultObj = this.userObj;
                                this.userObject.AdvanceDetails = this.AdvanceDetails;
                            }
                            else {
                                this.toaster.errorToastr("Multi City travel applicable for minimum 2 trip");
                            }
                        }
                        else {
                            this.bsModalRef = this.modalService.show(template, this.config);
                            this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                            this.userObject.DependentAdd = this.DependentAdd;
                            this.userObject.resultObj = this.userObj;
                            this.userObject.AdvanceDetails = this.AdvanceDetails;
                        }
                    }
                    else if (form.value.AdvanceRequired == "false") {
                        if (form.value.TripType == "MultiCity") {
                            if (this.tripDeatilsArray.length > 1) {
                                this.bsModalRef = this.modalService.show(template, this.config);
                                this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                                this.userObject.DependentAdd = this.DependentAdd;
                                this.userObject.resultObj = this.userObj;
                                this.userObject.AdvanceDetails = [];
                            }
                            else {
                                this.toaster.errorToastr("Multi City travel applicable for minimum 2 trip");
                            }
                        }
                        else {
                            this.bsModalRef = this.modalService.show(template, this.config);
                            this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                            this.userObject.DependentAdd = this.DependentAdd;
                            this.userObject.resultObj = this.userObj;
                            this.userObject.AdvanceDetails = [];
                        }
                    }
                }
                else {
                    if (form.value.TripType == "MultiCity") {
                        if (this.tripDeatilsArray.length > 1) {
                            this.bsModalRef = this.modalService.show(template, this.config);
                            this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                            this.userObject.DependentAdd = this.DependentAdd;
                            this.userObject.resultObj = this.userObj;
                            this.userObject.AdvanceDetails = [];
                        }
                        else {
                            this.toaster.errorToastr("Multi City travel applicable for minimum 2 trip");
                        }
                    }
                    else {
                        this.bsModalRef = this.modalService.show(template, this.config);
                        this.userObject.tripDeatilsArray = this.tripDeatilsArray;
                        this.userObject.DependentAdd = this.DependentAdd;
                        this.userObject.resultObj = this.userObj;
                        this.userObject.AdvanceDetails = [];
                    }
                }
            }
        }
        else {
            if (this.Appkey === "Reschedule") {
                this.toaster.errorToastr("Reschedule not valid");
            }
            else {
                this.toaster.errorToastr("form not valid");
            }
        }
    };
    NewtravelRequestComponent.prototype.TravelRequestAdd = function (Traveld) {
        var _this = this;
        this.clicked = true;
        this.userObject.resultObj.Age = this.userObject.resultObj.Age.toString();
        delete this.userObject.resultObj.full_name;
        delete this.userObject.resultObj.gender;
        delete this.userObject.resultObj.designation;
        delete this.userObject.resultObj.department;
        delete this.userObject.resultObj.cluster;
        delete this.userObject.resultObj.business_unit;
        delete this.userObject.resultObj.base_location;
        delete this.userObject.resultObj.PassportExpDate;
        delete this.userObject.resultObj.bsValue;
        delete this.userObject.resultObj.CostCenter;
        delete this.userObject.resultObj.OU;
        delete this.userObject.resultObj.FullBusinessUnit;
        delete this.userObject.resultObj.FullDeliveryUnit;
        if (this.userObject.resultObj.PANNumber || this.userObject.resultObj.PANNumber == null) {
            delete this.userObject.resultObj.PANNumber;
        }
        if (this.userObject.resultObj.firstLegIndex == null || this.userObject.resultObj.firstLegIndex == 0 || this.userObject.resultObj.firstLegIndex) {
            delete this.userObject.resultObj.firstLegIndex;
        }
        this.DependentAdd.forEach(function (el) {
            delete el.DepndPassportExpDate;
            delete el.DependSixMnt;
            el.VisaNumber = el.VisaNo;
            delete el.VisaNo;
        });
        this.tripDeatilsArray.forEach(function (el) {
            delete el.isPasswordExpireInSixMnt;
            delete el.DependSixMnt;
        });
        var locationInfo = this.locationArrays.find(function (item) { return item.location == _this.userObject.tripDeatilsArray[0].To; });
        this.userObject.resultObj.Country = locationInfo ? locationInfo.country : "";
        this.userObject.resultObj.Region = locationInfo ? locationInfo.region : "";
        var fileNames = [];
        if (this.DebitDocsToUpload.length > 0) {
            this.DebitDocsToUpload.forEach(function (item) {
                fileNames.push(item.name);
            });
            this.userObject.resultObj.ClientDebitFileName = JSON.stringify(fileNames);
        }
        this.userObject.trackerData = {
            ActualUserEmpID: this.informService.actualUserId,
            LoggedInUserEmpID: this.informService.Current.EmployeeID,
            ActivityPerformed: "New",
            DeviationReason: this.userObject.resultObj.DeviationReason || "",
            IsSameUserLoggedIn: this.informService.actualUserId == this.informService.Current.EmployeeID ? true : false
        };
        this.informService
            .NewTravelRequestInsert(this.userObject, this.DebitDocsToUpload)
            .then(function (res) {
            _this.idnumber = res;
            if (res) {
                _this.bsModalRef.hide();
                _this.bsModalRef = _this.modalService.show(Traveld, _this.configsm);
            }
            else {
                _this.toaster.errorToastr("Unable to raise travel request");
            }
        });
    };
    NewtravelRequestComponent.prototype.navigate = function () {
        var _this = this;
        this.bsModalRef.hide();
        setTimeout(function () {
            window.location.reload();
            _this.router.navigate(["/"]);
        }, 2000);
        this.router.navigate(["/"]);
    };
    NewtravelRequestComponent.prototype.TravelRequestCancel = function () {
        this.bsModalRef.hide();
        this.clicked = false;
    };
    NewtravelRequestComponent.prototype.onTravelCategory = function (e) {
        this.purposeOfProject = [];
        this.userObj.TravelPurpose = "";
        this.purposeOfProject = this.informService.TravelPurpose.filter(function (x) { return x.TCId == e.item.Id; });
        if (this.userObj && this.userObj.Travel_x0020_For !== 'Dependent') {
            var temp = this.purposeOfProject.find(function (eleme) { return eleme.name == "Dependent Travel"; });
            if (temp) {
                Object(lodash__WEBPACK_IMPORTED_MODULE_10__["remove"])(this.DeliverySource, temp);
            }
        }
    };
    NewtravelRequestComponent.prototype.OnCurrencyCheck = function (evt, money, i) {
        this.AdvanceDetails[i].Card = 0;
        this.AdvanceDetails[i].Cash = 0;
        this.findcurrency = this.AdvanceDetails.filter(function (a) { return a.Currency === evt.value; });
        if (this.findcurrency.length > 1) {
            this.AdvanceDetails[i].Currency = "";
        }
        if (evt.item.travel_allow_card == true) {
            this.AdvanceDetails[i].carddisable = false;
        }
        if (evt.item.travel_allow_card == false) {
            this.AdvanceDetails[i].carddisable = true;
        }
        if (evt.item.travel_allow_cash == true) {
            this.AdvanceDetails[i].cashdisable = false;
        }
        if (evt.item.travel_allow_cash == false) {
            this.AdvanceDetails[i].cashdisable = true;
        }
    };
    NewtravelRequestComponent.prototype.handleChange = function (evt) {
        var target = evt.target.value;
        if (target === "false") {
            this.NoAccomdation = true;
        }
        else {
            this.NoAccomdation = false;
        }
    };
    NewtravelRequestComponent.prototype.OnIdProof = function (eve) {
        this.myObj = this.TravelProfileArray[0];
        this.userObj.IDProofNumber = "";
        for (var _i = 0, _a = Object.entries(this.myObj); _i < _a.length; _i++) {
            var value = _a[_i];
            if (value["0"] === eve.item.key) {
                this.userObj.IDProofNumber = value["1"];
            }
        }
    };
    NewtravelRequestComponent.prototype.onLoadApproval = function (e) {
        var _this = this;
        this.isPasswordExpireInSixMnt = false;
        this.DependSixMnt = false;
        this.TravelProjectList.push(e.item);
        this.userObject.TravelProjectList = this.TravelProjectList;
        var Obj = this.TravelProjectList.find(function (x) { return x.ProjectList == e.value; });
        this.userObj.projectoraclecode__c = Obj.projectoraclecode__c;
        this.userObj.clientname__c = Obj.clientname__c;
        this.userObj.clientprismcode__c = Obj.clientprismcode__c;
        this.userObj.ApprovalAuthority = "";
        this.userObj.ApproversSuperior = "";
        this.userObj.TravelCategory = this.userObj.Travel_x0020_For === 'Dependent' ? 'Dependent Travel' : "";
        this.userObj.TravelPurpose = this.userObj.Travel_x0020_For === 'Dependent' ? 'Dependent Travel' : "";
        var isDMavailable = false;
        var isTPavailable = false;
        var FMSuperior;
        var FMSuperSuperior;
        var Account;
        if (e.item.accountmanagerprismcode__c != null ||
            e.item.accountmanagerprismcode__c != undefined) {
            Account = this.Hrinfo.find(function (el) { return e.item.accountmanagerprismcode__c == el.Title; });
            if (Account != null || Account != undefined) {
                this.userObj.AccountManager = Account.maveric_email_id;
            }
        }
        var FM = this.Hrinfo.find(function (el) { return _this.informService.Current.EmployeeID == el.Title; });
        if (FM != null || FM != undefined) {
            FMSuperior = this.Hrinfo.find(function (el) { return FM.functional_reporting_to == el.Title; });
            FMSuperSuperior = this.Hrinfo.find(function (el) { return FMSuperior.functional_reporting_to == el.Title; });
            this.userObj.ApprovalAuthority = FM.maveric_email_id;
        }
        if (FMSuperior != null || FMSuperior != undefined) {
            this.userObj.ApproversSuperior = FMSuperior.maveric_email_id;
        }
        if (e.item.deliverymanagerprismcode__c != null ||
            e.item.deliverymanagerprismcode__c != undefined) {
            this.DM = this.Hrinfo.find(function (el) { return e.item.deliverymanagerprismcode__c == el.Title; });
            if (this.DM != null || this.DM != undefined) {
                this.DMSuperior = this.Hrinfo.find(function (el) { return _this.DM.functional_reporting_to == el.Title; });
            }
            isDMavailable = true;
        }
        if (e.item.technicalpartnerprismcode__c != null ||
            e.item.technicalpartnerprismcode__c != undefined) {
            this.TP = this.Hrinfo.find(function (el) { return e.item.technicalpartnerprismcode__c == el.Title; });
            if (this.TP != null || this.TP != undefined) {
                this.TPSuperior = this.Hrinfo.find(function (el) { return _this.TP.functional_reporting_to == el.Title; });
            }
            isTPavailable = true;
        }
        if (isDMavailable && isTPavailable) {
            if (this.DM.maveric_email_id == this.informService.Current.MailID) {
                this.userObj.ApprovalAuthority = this.TP.maveric_email_id;
                this.userObj.ApproversSuperior = this.TPSuperior.maveric_email_id;
            }
            else if (this.TP.maveric_email_id == this.informService.Current.MailID) {
                if (this.TPSuperior != null || this.TPSuperior != undefined) {
                    this.TPSuperSuperior = this.Hrinfo.find(function (el) { return _this.TPSuperior.functional_reporting_to == el.Title; });
                }
                this.userObj.ApprovalAuthority = this.TPSuperior.maveric_email_id;
                this.userObj.ApproversSuperior = this.TPSuperSuperior.maveric_email_id;
            }
            else {
                this.userObj.ApprovalAuthority = this.DM.maveric_email_id;
                this.userObj.ApproversSuperior = this.TP.maveric_email_id;
            }
        }
        else if (!isDMavailable && isTPavailable) {
            if (this.TP.maveric_email_id == this.informService.Current.MailID) {
                if (this.TPSuperior != null || this.TPSuperior != undefined) {
                    this.TPSuperSuperior = this.Hrinfo.find(function (el) { return _this.TPSuperior.functional_reporting_to == el.Title; });
                }
                this.userObj.ApprovalAuthority = this.TPSuperior.maveric_email_id;
                this.userObj.ApproversSuperior = this.TPSuperSuperior.maveric_email_id;
            }
            else {
                this.userObj.ApprovalAuthority = this.TP.maveric_email_id;
                this.userObj.ApproversSuperior = this.TPSuperior.maveric_email_id;
            }
        }
        else if (isDMavailable && !isTPavailable) {
            if (this.DM.maveric_email_id == this.informService.Current.MailID) {
                this.userObj.ApprovalAuthority = this.DMSuperior.maveric_email_id;
                this.DMSuperiorSuper = this.Hrinfo.find(function (el) { return _this.DMSuperior.functional_reporting_to == el.Title; });
                this.userObj.ApproversSuperior = this.DMSuperiorSuper.maveric_email_id;
            }
            else {
                this.userObj.ApprovalAuthority = this.DM.maveric_email_id;
                this.userObj.ApproversSuperior = this.DMSuperior.maveric_email_id;
            }
        }
        else if (!isDMavailable && !isTPavailable) {
            this.userObj.ApprovalAuthority = FMSuperior.maveric_email_id;
            this.userObj.ApproversSuperior = FMSuperSuperior.maveric_email_id;
        }
        else {
            this.userObj.ApprovalAuthority = FMSuperior.maveric_email_id;
            this.userObj.ApproversSuperior = FMSuperSuperior.maveric_email_id;
        }
        if (this.userObj.ApprovalAuthority == this.userObj.ApproversSuperior ||
            this.informService.Current.MailID == this.userObj.ApprovalAuthority ||
            this.informService.Current.MailID == this.userObj.ApproversSuperior) {
            this.userObj.ApprovalAuthority = "";
            this.userObj.ApproversSuperior = "";
            this.toaster.errorToastr("unable to fetch approval details please contact administrator");
        }
        if (e.item.projectdepartmentname__c != null ||
            e.item.projectdepartmentname__c != undefined) {
            this.Delivery = this.Depart.find(function (eleme) { return eleme.Department_name == e.item.projectdepartmentname__c; });
        }
        else {
            this.Delivery = this.Depart.find(function (eleme) { return eleme.Department_name == _this.userObj.Department; });
        }
        if (this.Delivery && (this.Delivery.department_type_name != null ||
            this.Delivery.department_type_name != undefined)) {
            if (this.Delivery.department_type_name == "DELIVERY") {
                this.DeliverySource = this.informService.TravelCategory.filter(function (eleme) { return eleme.department_type_name == "DELIVERY"; });
                this.userObj.IsProjectTravel = true;
                if (e.item.cost_center_name__c) {
                    this.userObj.CostCenterOrCluster = e.item.cost_center_name__c;
                }
                else if (e.item.ProjectOrg_Str_name__c) {
                    var units = e.item.ProjectOrg_Str_name__c.split("-");
                    this.userObj.CostCenterOrCluster = units[units.length - 1];
                }
                else {
                    this.userObj.CostCenterOrCluster = "";
                }
                if (this.tripDeatilsArray[0].TravelDate != null && this.tripDeatilsArray[0].TravelDate != "") {
                    this.tripDeatilsArray[0].TravelDate = "";
                    this.isDeviation = false;
                }
            }
            else {
                this.DeliverySource = this.informService.TravelCategory.filter(function (eleme) { return eleme.department_type_name != "DELIVERY"; });
                this.userObj.IsProjectTravel = false;
                if (this.userObj.CostCenter) {
                    this.userObj.CostCenterOrCluster = this.userObj.CostCenter;
                }
                else if (this.userObj.OU) {
                    var units = this.userObj.OU.split("-");
                    this.userObj.CostCenterOrCluster = units[units.length - 1];
                }
                else {
                    this.userObj.CostCenterOrCluster = "";
                }
                if (this.tripDeatilsArray[0].TravelDate != null && this.tripDeatilsArray[0].TravelDate != "") {
                    this.tripDeatilsArray[0].TravelDate = "";
                    this.isDeviation = false;
                }
            }
            if (this.userObj && this.userObj.Travel_x0020_For !== 'Dependent') {
                Object(lodash__WEBPACK_IMPORTED_MODULE_10__["remove"])(this.DeliverySource, this.informService.TravelCategory.find(function (eleme) { return eleme.name == "Dependent Travel"; }));
            }
        }
    };
    NewtravelRequestComponent.prototype.onActualDateChange = function (selctedDate, tripDeatilsArray, i) {
        tripDeatilsArray[i].ArrivalDate = "";
        tripDeatilsArray[i].minTravelDate = selctedDate;
        for (var j = i + 1; j < tripDeatilsArray.length; j++) {
            if (selctedDate > tripDeatilsArray[j].ActualDate) {
                tripDeatilsArray[j].ActualDate = "";
                tripDeatilsArray[j].ArrivalDate = "";
                tripDeatilsArray[j].minDate = selctedDate;
            }
            i++;
        }
    };
    NewtravelRequestComponent.prototype.onArrivalDateChange = function (selctedDate, tripDeatilsArray, i) {
        for (var j = i + 1; j < tripDeatilsArray.length; j++) {
            if (selctedDate > tripDeatilsArray[j].ArrivalDate) {
                tripDeatilsArray[j].ActualDate = "";
                tripDeatilsArray[j].ArrivalDate = "";
                tripDeatilsArray[j].minDate = selctedDate;
            }
            i++;
        }
    };
    NewtravelRequestComponent.prototype.visaStatus = function (eve, rejectionPopup) {
        if (this.Appkey !== 'VisaProcess' && this.userObj.Travel_x0020_For === 'Self along with Dependents' && eve.value !== "Submitted") {
            var selectedDependents = this.DependentArrayView.filter(function (dependent) { return dependent.Selected; });
            if (selectedDependents.length > 0) {
                var submittedVisaStatus = selectedDependents.filter(function (dependent) { return dependent.VisaStatus === 'Submitted'; });
                if (submittedVisaStatus.length > 0) {
                    this.toaster.errorToastr("Please raise a separate ticket for dependents");
                }
            }
        }
        if (eve.value === "Submitted" || eve.value === "On-arrival" || eve.value === "Return to home country") {
            if (eve.value === "On-arrival") {
                this.userObj.TypeofVisa = "On Arrival Visa";
                this.OnOnewayCheck();
            }
            if (eve.value === "Return to home country") {
                this.userObj.TypeofVisa = "Return to home country visa";
                this.OnOnewayCheck();
            }
            this.isVisaSubmitted = true;
            this.userObj.VisaValidTill = null;
            this.userObj.VisaNo = "";
        }
        else {
            this.isVisaSubmitted = false;
            if (eve.value === 'Rejected') {
                this.userObj.VisaValidTill = null;
                this.userObj.VisaNo = "";
                this.rejectComments = "";
                this.currentDependentIndex = -1;
                this.bsModalRef = this.modalService.show(rejectionPopup, this.configsm);
                // this.userObj.TypeofVisa = "";
            }
        }
    };
    NewtravelRequestComponent.prototype.dependentVisaStatus = function (temp, rejectionPopup, index) {
        if (this.Appkey !== 'VisaProcess' && this.userObj.Travel_x0020_For === 'Self along with Dependents' && this.userObj.VisaStatus && this.userObj.VisaStatus !== "Submitted" && temp.VisaStatus === "Submitted") {
            this.toaster.errorToastr("Please raise a separate ticket for dependents");
            temp.VisaStatus = "";
        }
        if (temp.VisaStatus === "Submitted" || temp.VisaStatus === "On-arrival" || temp.VisaStatus === "Return to home country") {
            temp.VisaValidTill = null;
            temp.VisaNo = "";
        }
        else if (temp.VisaStatus === "Rejected") {
            temp.VisaValidTill = null;
            temp.VisaNo = "";
            this.rejectComments = "";
            this.currentDependentIndex = index;
            this.bsModalRef = this.modalService.show(rejectionPopup, this.configsm);
            // temp.TypeofVisa = "";
        }
    };
    NewtravelRequestComponent.prototype.dependentOnOnewayCheck = function () {
        if (this.DependentArrayView[this.firstDependentIndex].TypeofVisa && this.DependentArrayView[this.firstDependentIndex].TypeofVisa !== "") {
            if (this.DependentArrayView[this.firstDependentIndex].TypeofVisa === "Work Visa" || this.DependentArrayView[this.firstDependentIndex].TypeofVisa === "Return to home country visa") {
                this.OnewayTripVisaType = false;
            }
            else {
                this.OnewayTripVisaType = true;
                if (this.userObj.TripType == 'RoundTrip' || this.userObj.TripType == 'MultiCity') {
                    this.isTableShow = true;
                }
                else {
                    this.isShowBtn = false;
                    this.isTableShow = false;
                    this.isDelete = false;
                    this.userObj.TripType = "";
                }
            }
        }
    };
    NewtravelRequestComponent.prototype.selfOnOnewayCheck = function () {
        if (this.userObj.TypeofVisa && this.userObj.TypeofVisa !== "") {
            if (this.userObj.TypeofVisa === "Work Visa" || this.userObj.TypeofVisa === "Return to home country visa") {
                this.OnewayTripVisaType = false;
            }
            else {
                this.OnewayTripVisaType = true;
                if (this.userObj.TripType == 'RoundTrip' || this.userObj.TripType == 'MultiCity') {
                    this.isTableShow = true;
                }
                else {
                    this.isShowBtn = false;
                    this.isTableShow = false;
                    this.isDelete = false;
                    this.userObj.TripType = "";
                }
            }
        }
    };
    NewtravelRequestComponent.prototype.OnOnewayCheck = function () {
        if (this.Appkey === 'VisaProcess' && this.userObj.TripType === 'OneWay' && this.userObj.TypeofVisa !== 'Work Visa' && this.userObj.TypeofVisa !== 'Return to home country visa') {
            this.userObj.TypeofVisa = "";
            this.toaster.errorToastr("One way is not allowed for this visa type. Please contact travel desk team");
            return;
        }
        if (this.Appkey !== "VisaProcess") {
            if (this.userObj.Travel_x0020_For === 'Dependent') {
                this.dependentOnOnewayCheck();
            }
            else {
                this.selfOnOnewayCheck();
            }
            this.getIsDisabled();
        }
    };
    NewtravelRequestComponent.prototype.getIsDisabled = function () {
        if (this.userObj.TravelType === "International" && (this.OnewayTripVisaType || (this.userObj.Travel_x0020_For !== "Dependent" && this.userObj.TypeofVisa !== "Work Visa" && this.userObj.TypeofVisa !== "Return to home country visa") || this.userObj.Travel_x0020_For === "Dependent")) {
            if (this.userObj.TripType === "OneWay") {
                this.userObj.TripType = "";
            }
            this.isTableShow = false;
            this.showOneWay = false;
        }
        else {
            this.showOneWay = true;
            if (this.userObj.TripType) {
                this.isTableShow = true;
            }
        }
    };
    NewtravelRequestComponent.prototype.onRadioChange = function (e) {
        var _this = this;
        this.getIsDisabled();
        this.isPasswordExpireInSixMnt = false;
        this.DependSixMnt = false;
        this.minDate = new Date();
        if (e.target.value === "OneWay") {
            if (this.userObj.TravelType === "International") {
                if (this.userObj.TypeofVisa === "Work Visa" || this.userObj.TypeofVisa === "Return to home country visa" ||
                    (this.firstDependentIndex && this.DependentArrayView[this.firstDependentIndex].TypeofVisa === "Work Visa" || this.DependentArrayView[this.firstDependentIndex].TypeofVisa === "Return to home country visa")) {
                    if (this.RId !== null && this.tempTrip && this.tempTrip == "OneWay") {
                        this.informService.GetByRoutesId(this.RId).then(function (res) {
                            _this.tripDeatilsArray = res;
                            _this.isTableShow = true;
                        });
                    }
                    else {
                        this.tripDeatilsArray = [];
                        var obj = {
                            Form: "",
                            To: "",
                            TravelDate: null,
                            FirstPreferance: "",
                            SecondPreferance: "",
                            fromDisable: false,
                            toDisable: false,
                            TravelDateDisable: false,
                        };
                        this.tripDeatilsArray.push(obj);
                        this.isShowBtn = false;
                        this.isTableShow = true;
                        this.isDelete = false;
                        this.OnewayTripVisaType = false;
                        this.isDeviation = false;
                    }
                }
                else {
                    this.OnewayTripVisaType = true;
                    this.userObj.TripType = "";
                    this.isTableShow = false;
                    this.isDelete = false;
                    this.isShowBtn = false;
                    this.isDeviation = false;
                }
            }
            else {
                if (this.RId !== null && this.tempTrip && this.tempTrip == "OneWay") {
                    this.informService.GetByRoutesId(this.RId).then(function (res) {
                        _this.tripDeatilsArray = res;
                        _this.isTableShow = true;
                    });
                }
                else {
                    this.tripDeatilsArray = [];
                    var obj = {
                        Form: "",
                        To: "",
                        TravelDate: null,
                        FirstPreferance: "",
                        SecondPreferance: "",
                        fromDisable: false,
                        toDisable: false,
                        TravelDateDisable: false,
                    };
                    this.tripDeatilsArray.push(obj);
                    this.isShowBtn = false;
                    this.isTableShow = true;
                    this.isDelete = false;
                    this.OnewayTripVisaType = false;
                    this.isDeviation = false;
                }
            }
        }
        if (e.target.value === "RoundTrip") {
            this.OnewayTripVisaType = false;
            if (this.RId !== null && this.tempTrip && this.tempTrip == "RoundTrip") {
                this.informService.GetByRoutesId(this.RId).then(function (res) {
                    _this.tripDeatilsArray = res;
                    _this.isTableShow = true;
                });
            }
            else {
                this.tripDeatilsArray = [];
                for (var i = 0; i < 2; i++) {
                    var obj = {
                        Form: "",
                        To: "",
                        TravelDate: null,
                        FirstPreferance: "",
                        SecondPreferance: "",
                        fromDisable: false,
                        toDisable: false,
                        TravelDateDisable: false,
                    };
                    this.tripDeatilsArray.push(obj);
                }
                this.isTableShow = true;
                this.isShowBtn = false;
                this.isDelete = false;
                this.isDeviation = false;
            }
        }
        if (e.target.value === "MultiCity") {
            this.OnewayTripVisaType = false;
            if (this.RId !== null && this.tempTrip && this.tempTrip == "MultiCity") {
                this.informService.GetByRoutesId(this.RId).then(function (res) {
                    _this.tripDeatilsArray = res;
                    _this.isTableShow = true;
                });
            }
            else {
                this.tripDeatilsArray = [];
                for (var i = 0; i < 1; i++) {
                    var obj = {
                        Form: "",
                        To: "",
                        TravelDate: null,
                        FirstPreferance: "",
                        SecondPreferance: "",
                        fromDisable: false,
                        toDisable: false,
                        TravelDateDisable: false,
                    };
                    this.tripDeatilsArray.push(obj);
                }
                this.isTableShow = true;
                this.isShowBtn = true;
                this.isDelete = true;
                this.isDeviation = false;
            }
        }
    };
    NewtravelRequestComponent.prototype.addNeRow = function (eve, tripDeatilsArray, i) {
        var obj = {
            Form: "",
            To: "",
            TravelDate: null,
            FirstPreferance: "",
            SecondPreferance: "",
            fromDisable: false,
            toDisable: false,
            TravelDateDisable: false,
        };
        this.tripDeatilsArray.push(obj);
        if (this.tripDeatilsArray.length > 0) {
            this.tripDeatilsArray[this.tripDeatilsArray.length - 1].Form = this.tripDeatilsArray[this.tripDeatilsArray.length - 2].To;
        }
        if (this.Appkey === "Reschedule") {
            this.tripDeatilsArray[this.tripDeatilsArray.length - 1].Actions = "New";
        }
    };
    NewtravelRequestComponent.prototype.addNeRowCurrency = function () {
        this.clicked = true;
        var obj = { Currency: "", Card: 0, Cash: 0, Amount: 0 };
        this.AdvanceDetails.push(obj);
    };
    NewtravelRequestComponent.prototype.deleteNeRowCurrency = function () {
        if (this.AdvanceDetails.length > 1) {
            this.AdvanceDetails.splice(-1, 1);
        }
    };
    NewtravelRequestComponent.prototype.deleteNeRow = function (eve, tripDeatilsArray, i) {
        if (this.tripDeatilsArray.length >= 1) {
            this.tripDeatilsArray.splice(-1, 1);
        }
    };
    NewtravelRequestComponent.prototype.ondependentTravelChange = function (e) {
        if (e.target.value === "true") {
            this.isDependent = true;
        }
        else {
            this.isDependent = false;
        }
    };
    NewtravelRequestComponent.prototype.OnTravelMode = function (event) {
        if (event.value === "Flight") {
            this.userObj.Flight = "";
            this.flight = true;
        }
        else {
            this.flight = false;
            this.userObj.Flight = "";
        }
    };
    NewtravelRequestComponent.prototype.onFirstChange = function (evt, routes, i) {
        if (this.tripDeatilsArray[i].ID == null ||
            this.tripDeatilsArray[i].ID == undefined) {
            this.tripDeatilsArray[i].Actions = "New";
        }
        else {
            this.tripDeatilsArray[i].Actions = "Update";
        }
        if (this.tripDeatilsArray[i].FirstPreferance ===
            this.tripDeatilsArray[i].SecondPreferance) {
            if (this.tripDeatilsArray[i].FirstPreferance === "No Preference") {
            }
            else {
                this.tripDeatilsArray[i].SecondPreferance = "";
            }
        }
        if (this.tripDeatilsArray[i].FirstPreferance === "No Preference") {
            this.tripDeatilsArray[i].SecondPreferance = "No Preference";
            this.tripDeatilsArray[i].fromDisable = true;
        }
        else {
            this.tripDeatilsArray[i].fromDisable = false;
        }
        if (this.tripDeatilsArray.length > 0) {
            if (this.tripDeatilsArray[this.tripDeatilsArray.length - 2].TravelDate.getTime() ===
                this.tripDeatilsArray[this.tripDeatilsArray.length - 1].TravelDate.getTime()) {
                if (this.tripDeatilsArray[this.tripDeatilsArray.length - 2]
                    .FirstPreferance ==
                    this.tripDeatilsArray[this.tripDeatilsArray.length - 1]
                        .FirstPreferance) {
                    this.tripDeatilsArray[this.tripDeatilsArray.length - 1].FirstPreferance = "";
                    this.tripDeatilsArray[this.tripDeatilsArray.length - 1].SecondPreferance = "";
                }
            }
        }
    };
    NewtravelRequestComponent.prototype.onSecondChange = function (evt, routes, i) {
        if (this.tripDeatilsArray[i].ID == null ||
            this.tripDeatilsArray[i].ID == undefined) {
            this.tripDeatilsArray[i].Actions = "New";
        }
        else {
            this.tripDeatilsArray[i].Actions = "Update";
        }
        if (this.tripDeatilsArray[i].FirstPreferance ===
            this.tripDeatilsArray[i].SecondPreferance) {
            if (this.tripDeatilsArray[i].FirstPreferance === "No Preference") {
            }
            else {
                this.tripDeatilsArray[i].SecondPreferance = "";
            }
        }
        if (this.tripDeatilsArray[i].FirstPreferance === "No Preference") {
            this.tripDeatilsArray[i].SecondPreferance = "No Preference";
        }
    };
    NewtravelRequestComponent.prototype.onFromCityChange = function (evt, routes, i) {
        if (this.tripDeatilsArray[i].Form === this.tripDeatilsArray[i].To) {
            this.tripDeatilsArray[i].Form = "";
        }
        if (this.userObj.TripType == "RoundTrip") {
            this.tripDeatilsArray[1].To = this.tripDeatilsArray[0].Form;
            this.tripDeatilsArray[1].Form = this.tripDeatilsArray[0].To;
            if (this.tripDeatilsArray[1].SecondPreferance != null ||
                this.tripDeatilsArray[1].SecondPreferance != undefined ||
                this.tripDeatilsArray[1].SecondPreferance == "") {
                this.tripDeatilsArray[1].fromDisable = false;
            }
            else {
                this.tripDeatilsArray[1].fromDisable = true;
            }
            this.tripDeatilsArray[1].toDisable = true;
        }
        if (this.tripDeatilsArray[i].ID == null ||
            this.tripDeatilsArray[i].ID == undefined) {
            this.tripDeatilsArray[i].Actions = "New";
        }
        else {
            this.tripDeatilsArray[i].Actions = "Update";
        }
    };
    NewtravelRequestComponent.prototype.onCostActualFromChange = function () {
        if (this.CostUpdate.CostActualFrom === this.CostUpdate.CostActualTo) {
            this.CostUpdate.CostActualFrom = "";
        }
    };
    NewtravelRequestComponent.prototype.onToCityChange = function (evt, routes, i) {
        if (this.tripDeatilsArray[i].Form === this.tripDeatilsArray[i].To) {
            this.tripDeatilsArray[i].To = "";
        }
        if (this.userObj.TripType == "RoundTrip") {
            this.tripDeatilsArray[1].To = this.tripDeatilsArray[0].Form;
            this.tripDeatilsArray[1].Form = this.tripDeatilsArray[0].To;
        }
        if (this.userObj.TripType == "MultiCity") {
            if (this.tripDeatilsArray.length > 0 &&
                this.tripDeatilsArray[i] &&
                this.tripDeatilsArray[i + 1]) {
                this.tripDeatilsArray[i + 1].Form = this.tripDeatilsArray[i].To;
            }
        }
        if (this.tripDeatilsArray[i].ID == null ||
            this.tripDeatilsArray[i].ID == undefined) {
            this.tripDeatilsArray[i].Actions = "New";
        }
        else {
            this.tripDeatilsArray[i].Actions = "Update";
        }
    };
    NewtravelRequestComponent.prototype.onCostActualToChange = function () {
        if (this.CostUpdate.CostActualFrom === this.CostUpdate.CostActualTo) {
            this.CostUpdate.CostActualTo = "";
        }
    };
    NewtravelRequestComponent.prototype.reschduleAdvance = function (e) {
        if (e.target.value === "true") {
            this.isAdvance = true;
            for (var i = 0; i < this.AdvanceDetails.length; i++) {
                this.AdvanceDetails[i].Card = 0;
                this.AdvanceDetails[i].Cash = 0;
                this.AdvanceDetails[i].Currency = "";
                this.AdvanceDetails[i].Amount = 0;
            }
        }
        else {
            this.isAdvance = false;
        }
    };
    NewtravelRequestComponent.prototype.onAdvance = function (trueorfalse, PANNoNotification) {
        if (trueorfalse === "true") {
            this.isAdvance = true;
            this.bsModalRef = this.modalService.show(PANNoNotification, this.configsm);
        }
        else {
            this.isAdvance = false;
        }
    };
    NewtravelRequestComponent.prototype.typeaheadNoResults = function (event, key, i) {
        if (event) {
            if (key === 'cancelComments') {
                this.cancelComments = '';
            }
            if (key === 'rejectComments') {
                this.rejectComments = '';
            }
            if (key === "Project") {
                this.userObj.Project = "";
            }
            if (key === "DeviationReason") {
                this.userObj.DeviationReason = "";
            }
            if (key === "TravelCategory") {
                this.userObj.TravelCategory = "";
            }
            if (key === "TravelPurpose") {
                this.userObj.TravelPurpose = "";
            }
            if (key === "TravelMeal") {
                this.userObj.TravelMeal = "";
            }
            if (key === "IdentityProof") {
                this.userObj.IdentityProof = "";
            }
            if (key === "IDProofNumber") {
                this.userObj.IDProofNumber = "";
            }
            if (key === "VisaStatus") {
                this.userObj.VisaStatus = "";
            }
            if (key === "TypeofVisa") {
                this.userObj.TypeofVisa = "";
            }
            if (key === "Form") {
                this.tripDeatilsArray[i].Form = "";
            }
            if (key === "To") {
                this.tripDeatilsArray[i].To = "";
            }
            if (key === "FirstPreferance") {
                this.tripDeatilsArray[i].FirstPreferance = "";
            }
            if (key === "SecondPreferance") {
                this.tripDeatilsArray[i].SecondPreferance = "";
            }
            if (key === "TravelMode") {
                this.userObj.TravelMode = "";
            }
            if (key === "Flight") {
                this.userObj.Flight = "";
            }
            if (key === "VendorName") {
                this.userObj.VendorName = "";
            }
            if (key === "comments") {
                this.comments = "";
            }
            if (key === "Currency") {
                this.AdvanceDetails[i].Currency = "";
            }
            if (key === "Costfor") {
                this.CostUpdate.Costfor = "";
            }
            if (key === "CostActualFrom") {
                this.CostUpdate.CostActualFrom = "";
            }
            if (key === "CostActualTo") {
                this.CostUpdate.CostActualTo = "";
            }
        }
    };
    NewtravelRequestComponent.prototype.cancel = function () {
        this.ngOnInit();
        this.router.navigate(["/"]);
    };
    NewtravelRequestComponent.prototype.BookedStatus = function (eve, tripDeatilsArray, i, admin) {
        this.StatusId = admin.Id;
        this.tripDeatilsArray[i].Actions = "Book";
    };
    NewtravelRequestComponent.prototype.bookingYes = function () {
        var _this = this;
        var Travelobj = {
            Id: +this.rgid,
        };
        var RouteObj = {
            Id: +this.StatusId,
            ActualDate: this.adminUse.ActualDate,
        };
        this.informService
            .TravelRequestBookedUpdate(Travelobj, RouteObj)
            .then(function (res) {
            if (res) {
                _this.toaster.successToastr("Status updated");
                _this.bsModalRef.hide();
                _this.ngOnInit();
                _this.adminUse.ActualDate = null;
            }
        });
    };
    NewtravelRequestComponent.prototype.bookingCancel = function () {
        this.bsModalRef.hide();
    };
    NewtravelRequestComponent.prototype.RescheduleStatus = function (ReschedulePurpose, admin) {
        this.bsModalRef = this.modalService.show(ReschedulePurpose, this.configsm);
        this.StatusId = admin.Id;
    };
    NewtravelRequestComponent.prototype.RescheduleYes = function () {
        var _this = this;
        var Travelobj = {
            Id: +this.rgid,
        };
        var RouteObj = {
            Id: +this.StatusId,
            ActualDate: this.adminUse.ActualDate,
            ArrivalDate: this.adminUse.ArrivalDate
        };
        this.informService
            .TravelRequestRescheduleUpdates(Travelobj, RouteObj)
            .then(function (res) {
            if (res) {
                _this.toaster.successToastr("Status updated");
                _this.bsModalRef.hide();
                _this.ngOnInit();
                _this.adminUse.ActualDate = null;
            }
        });
    };
    NewtravelRequestComponent.prototype.CancelStatus = function (eve, tripDeatilsArray, i, admin) {
        this.StatusId = admin.Id;
        this.TicketStatusCondition = admin.TicketStatus;
        if (this.TicketStatusCondition == "Cancel Requested") {
            this.tripDeatilsArray[i].Actions = "Cancel";
            this.ConditionTicketStatus = "Cancelled";
        }
        if (this.TicketStatusCondition == "Reschedule Requested") {
            this.tripDeatilsArray[i].Actions = "Reschedule";
            this.ConditionTicketStatus = "Rescheduled";
        }
    };
    NewtravelRequestComponent.prototype.CancelYes = function () {
        var _this = this;
        var Travelobj = {
            Id: +this.rgid,
        };
        var RouteObj = {
            Id: +this.StatusId,
            TicketStatus: this.ConditionTicketStatus,
        };
        this.informService
            .TravelRequestCancelUpdatetion(Travelobj, RouteObj)
            .then(function (res) {
            if (res) {
                _this.toaster.successToastr("Status updated");
                _this.bsModalRef.hide();
                _this.ngOnInit();
            }
        });
    };
    NewtravelRequestComponent.prototype.navigateBack = function (key) {
        if (key && key == 'PANNumber') {
            this.userObj.PANNumber = null;
        }
        this.bsModalRef.hide();
    };
    NewtravelRequestComponent.prototype.AdminViewtravel = function () {
        var id = btoa(this.rgid);
        this.router.navigate(["ViewTravelRequest", id]);
    };
    NewtravelRequestComponent.prototype.ViewPrevious = function (Previous, temp) {
        var _this = this;
        this.ReferenceId = temp.ReferenceLeg;
        this.informService.Previousmethod(this.ReferenceId).then(function (res) {
            _this.PreviousDetails = res;
        });
        this.bsModalRef = this.modalService.show(Previous, this.config);
    };
    NewtravelRequestComponent.prototype.AdminView = function (LegView, admin) {
        var _this = this;
        if (this.RId != null && this.RId != undefined) {
            this.StatusId = admin.Id;
            this.informService.method(this.StatusId).then(function (res) {
                _this.FullDetails = res;
            });
            this.bsModalRef = this.modalService.show(LegView, this.config);
        }
    };
    NewtravelRequestComponent.prototype.AdminViewCancel = function () {
        this.router.navigate(["/UpdateTicket"]);
    };
    NewtravelRequestComponent.prototype.CheckItemChange = function (key, index) {
        if (index >= this.FullDetails.length - 1) {
            return true;
        }
        if (this.FullDetails[index][key] == this.FullDetails[index + 1][key]) {
            return false;
        }
        else {
            return true;
        }
    };
    NewtravelRequestComponent.prototype.onValueTriggerReportingDate = function (ev) {
        var _this = this;
        if (this.tripDeatilsArray.length > 0 &&
            (this.Appkey != null || this.Appkey != undefined)) {
            for (var index = 0; index < this.tripDeatilsArray.length; index++) {
                var elem = this.tripDeatilsArray[index];
                if (this.tripDeatilsArray[index].TicketStatus == "Rescheduled" ||
                    this.tripDeatilsArray[index].TicketStatus == "Open" ||
                    this.tripDeatilsArray[index].TicketStatus == "Booked" ||
                    this.tripDeatilsArray[index].TicketStatus == "Reschedule Requested" ||
                    this.tripDeatilsArray[index].TicketStatus == "Cancel Requested") {
                    this.indexed = true;
                    this.numberIndex = index;
                    break;
                }
            }
            this.minDate.setHours(0);
            this.tripDeatilsArray[this.numberIndex].TravelDate.setHours(0);
            this.tripDeatilsArray[this.numberIndex].TravelDate.setMinutes(0);
            this.tripDeatilsArray[this.numberIndex].TravelDate.setSeconds(0);
            this.tripDeatilsArray[this.numberIndex].TravelDate.setMilliseconds(0);
            var dt2 = new Date(this.tripDeatilsArray[this.numberIndex].TravelDate.getTime());
            if (ev < dt2) {
                this.toaster.errorToastr("Reporting date should be on (or) after onward travel date");
                setTimeout(function () {
                    _this.userObj.ReportingDate = null;
                }, 300);
            }
        }
        else if (this.tripDeatilsArray.length > 0) {
            if (ev < this.tripDeatilsArray[0].TravelDate) {
                this.toaster.errorToastr("Reporting date should be on (or) after onward travel date");
                setTimeout(function () {
                    _this.userObj.ReportingDate = null;
                }, 300);
            }
        }
    };
    NewtravelRequestComponent.prototype.checkedItems = function (temp, index) {
        var checklist = {};
        if (temp.Selected && this.userObj.TravelType === 'International' && this.userObj.Travel_x0020_For !== "Self") {
            temp.TypeofVisa = "Dependent Visa";
        }
        checklist = temp;
        if (checklist.Selected) {
            checklist.DOBPassport = new Date(checklist.DOBPassport);
            checklist.PassportExpiryDate = new Date(checklist.PassportExpiryDate);
            this.DependentAdd.push(checklist);
            if (this.userObj.TravelType === 'International') {
                if (this.userObj.Travel_x0020_For === "Self") {
                    this.checkInterAssPass();
                }
                else if (this.userObj.Travel_x0020_For === "Dependent") {
                    if (this.firstDependentIndex >= 0) {
                        if (this.firstDependentIndex > index) {
                            this.firstDependentIndex = index;
                        }
                    }
                    else {
                        this.firstDependentIndex = this.DependentArrayView.findIndex(function (item) { return item.Selected; });
                    }
                    this.checkInterDepPass();
                }
                else {
                    this.checkInterDepPass();
                    this.checkInterAssPass();
                }
            }
        }
        else {
            if (this.firstDependentIndex == index) {
                this.firstDependentIndex = this.DependentArrayView.findIndex(function (item) { return item.Selected; });
            }
            if (temp.VisaValidTill) {
                temp.VisaValidTill = "";
            }
            if (temp.VisaStatus) {
                temp.VisaStatus = "";
            }
            if (temp.VisaNo) {
                temp.VisaNo = "";
            }
            if (temp.TypeofVisa) {
                temp.TypeofVisa = "";
            }
            var index1 = void 0;
            index1 = this.DependentAdd.findIndex(function (a) { return a.GivenName === checklist.GivenName && a.SurName === checklist.SurName; });
            if (index1 != -1) {
                this.DependentAdd.splice(index1, 1);
            }
            if (this.DependentAdd.length > 0) {
                for (var i = 0; i < this.DependentAdd.length; i++) {
                    for (var j = 0; j < this.tripDeatilsArray.length; j++) {
                        if (this.tripDeatilsArray[j].TravelDate >= this.DependentAdd[i].DepndPassportExpDate) {
                            this.tripDeatilsArray[j].DependSixMnt = true;
                        }
                    }
                }
            }
            else {
                for (var j = 0; j < this.tripDeatilsArray.length; j++) {
                    this.tripDeatilsArray[j].DependSixMnt = false;
                }
            }
            var data = this.tripDeatilsArray.filter(function (x) { return x.DependSixMnt === true; });
            this.DependSixMnt = data.length ? true : false;
        }
    };
    NewtravelRequestComponent.prototype.onValueChange = function (event, tripDeatilsArray, i) {
        var _this = this;
        if (this.getDateWithoutTime(event) < this.getDateWithoutTime(this.minDate)) {
            this.toaster.errorToastr("Please choose a valid date");
            this.tripDeatilsArray[i].TravelDate = "";
            return;
        }
        if (this.userObj.TravelType === "International") {
            if (((this.userObj.firstLegIndex && this.userObj.firstLegIndex == i) || (!this.userObj.firstLegIndex && i == 0))
                && this.userObj.VisaValidTill && this.getDateWithoutTime(event) > this.getDateWithoutTime(this.userObj.VisaValidTill)) {
                setTimeout(function () {
                    _this.tripDeatilsArray[i].TravelDate = "";
                }, 300);
                this.toaster.errorToastr("Travel date should be on (or) before visa valid till date");
            }
            if (this.userObj.Travel_x0020_For === 'Self along with Dependents' || this.userObj.Travel_x0020_For === 'Dependent') {
                if ((this.userObj.firstLegIndex && this.userObj.firstLegIndex == i) || (!this.userObj.firstLegIndex && i == 0)) {
                    if (this.DependentArrayView.length > 0) {
                        this.DependentArrayView.forEach(function (dependent) {
                            if (dependent.VisaValidTill && _this.getDateWithoutTime(event) > _this.getDateWithoutTime(dependent.VisaValidTill)) {
                                setTimeout(function () {
                                    _this.tripDeatilsArray[i].TravelDate = "";
                                }, 300);
                                _this.toaster.errorToastr("Travel date should be on (or) before dependent visa valid till date");
                            }
                        });
                    }
                }
            }
        }
        if (this.RId != null && this.RId != undefined && this.Appkey === "Reschedule") {
            if (i === 0) {
                if (this.tripDeatilsArray[i].ID == null || this.tripDeatilsArray[i].ID == undefined) {
                    this.tripDeatilsArray[i].Actions = "New";
                }
                else {
                    this.tripDeatilsArray[i].Actions = "Update";
                }
                if (this.userObj.TravelType === "International") {
                    if (this.userObj.Travel_x0020_For === "Self") {
                        this.checkAssoPasExp(i, event);
                    }
                    else if (this.userObj.Travel_x0020_For === "Dependent") {
                        this.checkDependentPasExp(i, event);
                    }
                    else {
                        this.checkDependentPasExp(i, event);
                        this.checkAssoPasExp(i, event);
                    }
                }
                this.minDate = new Date();
                if (this.userObj.IsProjectTravel) {
                    this.minDate.setHours(0);
                    this.minDate.setMinutes(0);
                    this.minDate.setSeconds(0);
                    this.minDate.setMilliseconds(0);
                    this.MaxDates = new Date(this.minDate.getTime() +
                        (this.userObj.IsProjectTravel ? 2 : 0) * (1000 * 60 * 60 * 24));
                    if (event < this.MaxDates && event >= this.minDate) {
                        this.isDeviation = true;
                        this.userObj.DeviationReason = "";
                        if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                            setTimeout(function () {
                                _this.userObj.ReportingDate = "";
                            }, 2000);
                            this.minidate = event;
                        }
                    }
                    else {
                        this.isDeviation = false;
                        this.userObj.DeviationReason = "";
                        this.userObj.IsDeviationRequest = false;
                        if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                            setTimeout(function () {
                                _this.userObj.ReportingDate = "";
                            }, 2000);
                            this.minidate = event;
                        }
                    }
                }
                else {
                    this.isDeviation = false;
                    this.userObj.DeviationReason = "";
                    this.userObj.IsDeviationRequest = false;
                    if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                        setTimeout(function () {
                            _this.userObj.ReportingDate = null;
                        }, 2000);
                        this.minidate = event;
                    }
                }
                if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                    setTimeout(function () {
                        _this.userObj.ReportingDate = null;
                    }, 2000);
                    this.minidate = event;
                }
                if (this.tripDeatilsArray[i].TravelDate.getTime() > this.tripDeatilsArray[i + 1].TravelDate.getTime()) {
                    for (var j = i + 1; j < this.tripDeatilsArray.length; j++) {
                        this.tripDeatilsArray[j].TravelDate = "";
                        this.tripDeatilsArray[j].DependSixMnt = false;
                        this.tripDeatilsArray[j].isPasswordExpireInSixMnt = false;
                        if (this.userObj.TravelType === "International") {
                            if (this.userObj.Travel_x0020_For === "Self") {
                                this.checkAssoPasExp(i, event);
                            }
                            else if (this.userObj.Travel_x0020_For === "Dependent") {
                                this.checkDependentPasExp(i, event);
                            }
                            else {
                                this.checkDependentPasExp(i, event);
                                this.checkAssoPasExp(i, event);
                            }
                        }
                        return (this.minidate = event);
                    }
                }
            }
            else {
                if (this.tripDeatilsArray[i].ID == null ||
                    this.tripDeatilsArray[i].ID == undefined) {
                    this.tripDeatilsArray[i].Actions = "New";
                }
                else {
                    this.tripDeatilsArray[i].Actions = "Update";
                }
                if (this.userObj.TravelType === "International") {
                    if (this.userObj.Travel_x0020_For === "Self") {
                        this.checkAssoPasExp(i, event);
                    }
                    else if (this.userObj.Travel_x0020_For === "Dependent") {
                        this.checkDependentPasExp(i, event);
                    }
                    else {
                        this.checkDependentPasExp(i, event);
                        this.checkAssoPasExp(i, event);
                    }
                }
                if (this.tripDeatilsArray[i].TravelDate === "" || this.tripDeatilsArray[i].TravelDate === null) {
                    this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                    var data = this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
                    this.isPasswordExpireInSixMnt = data.length ? true : false;
                }
                if (this.tripDeatilsArray[i].TravelDate.getTime() > this.tripDeatilsArray[i + 1].TravelDate.getTime()) {
                    for (var j = i + 1; j < this.tripDeatilsArray.length; j++) {
                        this.tripDeatilsArray[j].TravelDate = "";
                        this.tripDeatilsArray[i].DependSixMnt = false;
                        this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                        if (this.userObj.TravelType === "International") {
                            if (this.userObj.Travel_x0020_For === "Self") {
                                this.checkAssoPasExp(i, event);
                            }
                            else if (this.userObj.Travel_x0020_For === "Dependent") {
                                this.checkDependentPasExp(i, event);
                            }
                            else {
                                this.checkDependentPasExp(i, event);
                                this.checkAssoPasExp(i, event);
                            }
                        }
                        this.minidate = event;
                        return (this.minidate = event);
                    }
                }
            }
        }
        else {
            if (i === 0) {
                this.minDate = new Date();
                this.minDate.setHours(0);
                this.minDate.setMinutes(0);
                this.minDate.setSeconds(0);
                this.minDate.setMilliseconds(0);
                if (this.userObj.TravelType === "International") {
                    if (this.userObj.Travel_x0020_For === "Self") {
                        this.checkAssoPasExp(i, event);
                    }
                    else if (this.userObj.Travel_x0020_For === "Dependent") {
                        this.checkDependentPasExp(i, event);
                    }
                    else {
                        this.checkDependentPasExp(i, event);
                        this.checkAssoPasExp(i, event);
                    }
                }
                this.MaxDates = new Date(this.minDate.getTime() +
                    (this.userObj.IsProjectTravel ? 7 : 5) * (1000 * 60 * 60 * 24));
                if (event < this.MaxDates && event >= this.minDate) {
                    this.isDeviation = true;
                    if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                        setTimeout(function () {
                            _this.userObj.ReportingDate = "";
                        }, 2000);
                    }
                }
                else {
                    this.isDeviation = false;
                    this.userObj.DeviationReason = "";
                    if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                        setTimeout(function () {
                            _this.userObj.ReportingDate = "";
                        }, 2000);
                    }
                }
                if (this.tripDeatilsArray.length === 1) {
                    if (this.tripDeatilsArray[0].TravelDate > this.userObj.ReportingDate) {
                        setTimeout(function () {
                            _this.userObj.ReportingDate = "";
                        }, 2000);
                    }
                    this.minidate = event;
                }
                else {
                    if (this.Appkey === "Mytravel" || this.Appkey === "VisaProcessView") {
                    }
                    else {
                        for (var j = i + 1; j < this.tripDeatilsArray.length; j++) {
                            this.tripDeatilsArray[j].TravelDate = "";
                            this.tripDeatilsArray[j].DependSixMnt = false;
                            this.tripDeatilsArray[j].isPasswordExpireInSixMnt = false;
                            if (this.userObj.TravelType === "International") {
                                if (this.userObj.Travel_x0020_For === "Self") {
                                    this.checkAssoPasExp(i, event);
                                }
                                else if (this.userObj.Travel_x0020_For === "Dependent") {
                                    this.checkDependentPasExp(i, event);
                                }
                                else {
                                    this.checkDependentPasExp(i, event);
                                    this.checkAssoPasExp(i, event);
                                }
                            }
                            this.minidate = event;
                        }
                    }
                }
            }
            else {
                if (this.Appkey === "Mytravel" || this.Appkey === "VisaProcessView") {
                }
                else {
                    for (var j = i + 1; j < this.tripDeatilsArray.length; j++) {
                        this.tripDeatilsArray[j].TravelDate = "";
                        this.tripDeatilsArray[j].DependSixMnt = false;
                        this.tripDeatilsArray[j].isPasswordExpireInSixMnt = false;
                    }
                    if (this.userObj.TravelType === "International") {
                        if (this.userObj.Travel_x0020_For === "Self") {
                            this.checkAssoPasExp(i, event);
                        }
                        else if (this.userObj.Travel_x0020_For === "Dependent") {
                            this.checkDependentPasExp(i, event);
                        }
                        else {
                            this.checkDependentPasExp(i, event);
                            this.checkAssoPasExp(i, event);
                        }
                    }
                }
            }
        }
        if (!this.userObj.firstLegIndex) {
            this.userObj.firstLegIndex = 0;
        }
        if (this.userObj.ReportingDate && this.tripDeatilsArray[this.userObj.firstLegIndex].TravelDate && this.userObj.ReportingDate > this.tripDeatilsArray[this.userObj.firstLegIndex].TravelDate) {
            this.userObj.ReportingDate = "";
        }
    };
    NewtravelRequestComponent.prototype.checkAssoPasExp = function (i, event) {
        var _this = this;
        if (this.userObj.PassportExpiryDate < event) {
            this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
            this.toaster.errorToastr("Travel Date should be on (or) before passport expiry date");
            setTimeout(function () {
                _this.tripDeatilsArray[i].TravelDate = null;
                if (_this.userObj.Travel_x0020_For === "Self along with Dependents") {
                    if (_this.isPasswordExpireInSixMnt === false) {
                        _this.tripDeatilsArray[i].DependSixMnt = false;
                        var data_1 = _this.tripDeatilsArray.filter(function (x) { return x.DependSixMnt === true; });
                        _this.DependSixMnt = data_1.length ? true : false;
                    }
                }
            }, 300);
            var data = this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
            this.isPasswordExpireInSixMnt = data.length ? true : false;
        }
        else {
            if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
                this.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
            }
            else {
                this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
            }
            var data = this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
            this.isPasswordExpireInSixMnt = data.length ? true : false;
        }
    };
    NewtravelRequestComponent.prototype.checkDependentPasExp = function (i, event) {
        var _this = this;
        for (var j = 0; j < this.DependentAdd.length; j++) {
            var ele = this.DependentAdd[j];
            this.tripDeatilsArray[i].DependSixMnt = false;
            if (ele.PassportExpiryDate < event) {
                this.tripDeatilsArray[i].DependSixMnt = false;
                this.toaster.errorToastr(" Travel Date should be on (or) before dependent passport expiry date");
                setTimeout(function () {
                    _this.tripDeatilsArray[i].TravelDate = null;
                    if (_this.userObj.Travel_x0020_For === "Self along with Dependents") {
                        if (_this.DependSixMnt === false) {
                            _this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                            var data_2 = _this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
                            _this.isPasswordExpireInSixMnt = data_2.length ? true : false;
                        }
                    }
                }, 50);
                this.tripDeatilsArray[i].DependSixMnt = false;
            }
            else {
                if (this.tripDeatilsArray[i].TravelDate >= ele.DepndPassportExpDate) {
                    this.tripDeatilsArray[i].DependSixMnt = true;
                }
            }
            var data = this.tripDeatilsArray.filter(function (x) { return x.DependSixMnt === true; });
            this.DependSixMnt = data.length ? true : false;
        }
    };
    NewtravelRequestComponent.prototype.onChangeTravelType = function (e) {
        this.getIsDisabled();
        if (e.target.value === "International") {
            this.isShow = true;
            this.isShowDomestic = false;
            this.userObj.IdentityProof = "";
            this.userObj.IDProofNumber = "";
            if (this.userObj.Travel_x0020_For === "Self") {
                this.checkInterAssPass();
            }
            else if (this.userObj.Travel_x0020_For === "Dependent") {
                if (!this.firstDependentIndex) {
                    this.firstDependentIndex = this.DependentArrayView.findIndex(function (item) { return item.Selected; });
                }
                this.DependentArrayView.forEach(function (dependent) {
                    dependent.TypeofVisa = dependent.Selected ? "Dependent Visa" : "";
                });
                this.checkInterDepPass();
            }
            else {
                this.DependentArrayView.forEach(function (dependent) {
                    dependent.TypeofVisa = dependent.Selected ? "Dependent Visa" : "";
                });
                this.checkInterDepPass();
                this.checkInterAssPass();
            }
        }
        else {
            this.isPasswordExpireInSixMnt = false;
            this.DependSixMnt = false;
            this.isShowDomestic = true;
            this.isShow = false;
            this.userObj.VisaStatus = "";
            this.userObj.VisaValidTill = null;
            this.userObj.TypeofVisa = "";
            this.userObj.VisaNo = "";
            this.userObj.AdvanceRequired = "false";
            if (this.userObj.AdvanceRequired == "false" || this.userObj.AdvanceRequired == false) {
                this.isAdvance = false;
            }
        }
    };
    NewtravelRequestComponent.prototype.checkInterAssPass = function () {
        var _this = this;
        for (var i = 0; i < this.tripDeatilsArray.length; i++) {
            if (this.tripDeatilsArray[i].TravelDate != null && this.tripDeatilsArray[i].TravelDate != "") {
                this.tripDeatilsArray[i].TravelDate = new Date(this.tripDeatilsArray[i].TravelDate);
                if (this.userObj.PassportExpiryDate < this.tripDeatilsArray[i].TravelDate) {
                    this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                    this.toaster.errorToastr("Travel Date should be on (or) before passport expiry date");
                    setTimeout(function () {
                        _this.tripDeatilsArray[i].TravelDate = null;
                        if (_this.userObj.Travel_x0020_For === "Self along with Dependents") {
                            _this.checkInterDepPass();
                        }
                    }, 10);
                    break;
                }
                else {
                    if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
                        this.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
                    }
                    else {
                        this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                    }
                }
            }
            else {
                this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
            }
            var data = this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
            this.isPasswordExpireInSixMnt = data.length ? true : false;
        }
    };
    NewtravelRequestComponent.prototype.checkIsVisaStatusRejected = function () {
        if (this.DependentAdd.length > 0) {
            var rejectedVisaStatus = this.DependentAdd.filter(function (dependent) { return dependent.VisaStatus === "Rejected"; });
            this.isDependentVisaRejected = rejectedVisaStatus.length > 0 ? true : false;
        }
    };
    NewtravelRequestComponent.prototype.checkInterDepPass = function () {
        for (var j = 0; j < this.DependentAdd.length; j++) {
            var ele = this.DependentAdd[j];
            ele.PassportExpiryDate = new Date(ele.PassportExpiryDate);
            for (var k = 0; k < this.tripDeatilsArray.length; k++) {
                if (this.tripDeatilsArray[k].TravelDate != null && this.tripDeatilsArray[k].TravelDate != "" && this.tripDeatilsArray != undefined) {
                    this.tripDeatilsArray[k].TravelDate = new Date(this.tripDeatilsArray[k].TravelDate);
                    if (ele.PassportExpiryDate < this.tripDeatilsArray[k].TravelDate) {
                        this.tripDeatilsArray[k].DependSixMnt = false;
                        this.toaster.errorToastr(" Travel Date should be on (or) before dependent passport expiry date");
                        for (var d = k; k < this.tripDeatilsArray.length; k++) {
                            this.tripDeatilsArray[d].TravelDate = null;
                            this.tripDeatilsArray[d].DependSixMnt = false;
                        }
                    }
                    else {
                        if (this.tripDeatilsArray[k].TravelDate >= ele.DepndPassportExpDate) {
                            this.tripDeatilsArray[k].DependSixMnt = true;
                        }
                    }
                }
                else {
                    this.tripDeatilsArray[k].DependSixMnt = false;
                }
                var data = this.tripDeatilsArray.filter(function (x) { return x.DependSixMnt === true; });
                this.DependSixMnt = data.length ? true : false;
            }
        }
    };
    NewtravelRequestComponent.prototype.onChangeTravelFor = function (eve) {
        var _this = this;
        if (eve.target.value === "Self along with Dependents") {
            this.isShow = false;
            this.isDependent = true;
            this.getIsDisabled();
            if (this.userObj.TravelPurpose == 'Dependent Travel') {
                this.userObj.TravelPurpose = "";
            }
            ;
            if (this.userObj.TravelCategory == 'Dependent Travel') {
                this.userObj.TravelCategory = "";
            }
            ;
            if (this.userObj.TravelType === "International") {
                this.DependentArrayView.forEach(function (dependent) {
                    dependent.TypeofVisa = dependent.Selected ? "Dependent Visa" : "";
                });
                this.checkInterAssPass();
                this.checkInterDepPass();
            }
        }
        else if (eve.target.value === "Self") {
            this.isDependent = false;
            this.DependSixMnt = false;
            this.getIsDisabled();
            if (this.userObj.TravelPurpose == 'Dependent Travel') {
                this.userObj.TravelPurpose = "";
            }
            ;
            if (this.userObj.TravelCategory == 'Dependent Travel') {
                this.userObj.TravelCategory = "";
            }
            ;
            if (this.userObj.TravelType === "International" && this.userObj.Travel_x0020_For != "Dependent") {
                for (var i = 0; i < this.tripDeatilsArray.length; i++) {
                    if (this.userObj.PassportExpiryDate <= this.tripDeatilsArray[i].TravelDate) {
                        this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                        this.toaster.errorToastr("Travel Date should be on (or) before passport expiry date");
                        setTimeout(function () {
                            _this.tripDeatilsArray[i].TravelDate = null;
                        }, 300);
                        var data = this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
                        this.isPasswordExpireInSixMnt = data.length ? true : false;
                    }
                    else {
                        if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
                            this.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
                        }
                        else {
                            this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                        }
                        var data = this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
                        this.isPasswordExpireInSixMnt = data.length ? true : false;
                    }
                }
            }
        }
        else {
            this.isShow = false;
            this.isDependent = true;
            this.DependSixMnt = false;
            this.getIsDisabled();
            this.userObj.TravelCategory = this.userObj.TravelPurpose = 'Dependent Travel';
            for (var j = 0; j < this.DependentAdd.length; j++) {
                var ele = this.DependentAdd[j];
                for (var i = 0; i < this.tripDeatilsArray.length; i++) {
                    if (ele.PassportExpiryDate < this.tripDeatilsArray[i].TravelDate) {
                        this.toaster.errorToastr(" Travel Date should be on (or) before dependent passport expiry date");
                        setTimeout(function () {
                            _this.tripDeatilsArray[i].TravelDate = null;
                        }, 50);
                        this.tripDeatilsArray[i].DependSixMnt = false;
                    }
                    else {
                        if (this.tripDeatilsArray[i].TravelDate >= ele.DepndPassportExpDate) {
                            this.tripDeatilsArray[i].DependSixMnt = true;
                        }
                    }
                    var data = this.tripDeatilsArray.filter(function (x) { return x.DependSixMnt === true; });
                    this.DependSixMnt = data.length ? true : false;
                }
            }
            if (this.userObj.TravelType === "International") {
                this.isPasswordExpireInSixMnt = false;
                this.DependentArrayView.forEach(function (dependent) {
                    dependent.TypeofVisa = dependent.Selected ? "Dependent Visa" : "";
                    if (dependent.Selected && dependent.VisaStatus === "Submitted") {
                        dependent.VisaStatus = "";
                    }
                });
            }
        }
        if (this.userObj.TravelType === "International") {
            this.isShow = true;
        }
    };
    NewtravelRequestComponent.prototype.getDisabled = function (i, tripDeatilsArray) {
        if (tripDeatilsArray[i].TicketStatus === "Open") {
            return false;
        }
        else {
            return true;
        }
    };
    NewtravelRequestComponent.prototype.addAdminTravel = function (form) {
        var _this = this;
        if (form.valid) {
            this.clicked = true;
            this.IsSpinnerShow = true;
            var Travelobj = {
                Id: +this.rgid,
                Form: this.userObj.FromCity,
                To: this.userObj.ToCity,
                TravelMode: this.userObj.TravelMode,
                InvoiceNo: this.userObj.InvoiceNo,
                InvoiceDate: new Date(this.userObj.InvoiceDate),
                VendorName: this.userObj.VendorName,
                TravelDeskRemarks: this.userObj.TravelDeskRemarks,
                Cost: String(this.userObj.Cost),
                FileName: this.GetTicketNamesForUpdate(),
            };
            var isActionOccured = this.tripDeatilsArray.filter(function (item) { return item.Actions == "Book" || item.Actions == "Reschedule" || item.Actions == "Cancel"; });
            if (isActionOccured.length > 0) {
                this.reOrderTripDetailsArray();
            }
            var Ticket = {
                Trip: this.tripDeatilsArray,
            };
            var CostTravelObj = {
                costTravel: this.AdmincostArray,
            };
            var extras = {
                projectType: this.userObj.Projectname,
                IsProjectTravel: this.userObj.IsProjectTravel,
                isNotBooked: this.userObj.TripType === 'OneWay' && this.userObj.isNotBooked ? true : false,
                Remarks: this.userObj.Remarks
            };
            var trackerData = null;
            if (this.tripDeatilsArray[0].Actions == "Book" || this.tripDeatilsArray[0].Actions == "Reschedule") {
                trackerData = {
                    ActualUserEmpID: this.informService.actualUserId,
                    LoggedInUserEmpID: this.informService.Current.EmployeeID,
                    ActivityPerformed: "TravelBooked",
                    TravelTicketNo: this.userObj.ID,
                    PreviousStatus: this.userObj.TravelStatus,
                    IsSameUserLoggedIn: this.informService.actualUserId == this.informService.Current.EmployeeID ? true : false
                };
            }
            this.informService
                .TravelRequestUpdate(Travelobj, Ticket, CostTravelObj, extras, trackerData)
                .then(function (res) {
                if (res) {
                    _this.toaster.successToastr("Ticket has been updated successfully");
                    _this.ngOnInit();
                    _this.adminUse.Remarks = "";
                    _this.clicked = false;
                    _this.router.navigate(["/UpdateTicket"]);
                }
                else {
                    _this.clicked = false;
                    _this.toaster.errorToastr("Problem in attachment uploading");
                    _this.router.navigate(["/UpdateTicket"]);
                }
            });
        }
    };
    NewtravelRequestComponent.prototype.GetTicketNamesForUpdate = function () {
        var ticketNames = [];
        this.canAttach.forEach(function (element) {
            element.CanDisplay = true;
            element.CanRemove = false;
            ticketNames.push(element);
        });
        return JSON.stringify(ticketNames);
    };
    NewtravelRequestComponent.prototype.AddCost = function (UpdateCosts, segment) {
        this.CostUpdate.SegmentId = segment.Id;
        this.CostUpdate.CostActualFrom = segment.Form;
        this.CostUpdate.CostActualTo = segment.To;
        if (segment.TicketStatus === "Cancel Requested" && this.Costdetails.length > 0) {
            this.CostUpdate.Flight = this.Costdetails.find(function (item) { return item.SegmentId === segment.Id; }).Flight;
        }
        this.bsModalRef = this.modalService.show(UpdateCosts, this.configsm);
    };
    NewtravelRequestComponent.prototype.TravelCostUpdate = function (form) {
        if (form.valid) {
            this.clicked = true;
            this.costObj = {
                Title: this.userObj.Title,
                TravelTicketNoId: this.rgid,
                Remarks: this.CostUpdate.CostRemarks === undefined ? "" : this.CostUpdate.CostRemarks,
                Flight: this.CostUpdate.Flight === undefined ? "" : this.CostUpdate.Flight,
                CostFor: this.CostUpdate.Costfor,
                TravelCost: String(this.CostUpdate.Costing),
                AgentCost: String(this.CostUpdate.AgentCosting),
                TotalCost: String(this.CostUpdate.Costing + this.CostUpdate.AgentCosting),
                From: this.CostUpdate.CostActualFrom,
                To: this.CostUpdate.CostActualTo,
                SegmentId: this.CostUpdate.SegmentId,
            };
            this.AdmincostArray.push(this.costObj);
            this.bsModalRef.hide();
            this.CostUpdate.Costing = null;
            this.CostUpdate.AgentCosting = null;
            this.CostUpdate.CostRemarks = "";
            this.clicked = false;
            this.CostUpdate.Flight = "";
            this.CostUpdate.CostActualFrom = "";
            this.CostUpdate.CostActualTo = "";
            this.CostUpdate.SegmentId = "";
        }
        else {
            this.toaster.errorToastr("Update the cost");
        }
    };
    NewtravelRequestComponent.prototype.getClass = function () {
        if (this.userObj.TravelType === "Domestic") {
            return true;
        }
        else {
            return false;
        }
    };
    NewtravelRequestComponent.prototype.TravelRequestApprovedPopup = function (ApprovePopup) {
        this.bsModalRef = this.modalService.show(ApprovePopup, this.configsm);
    };
    NewtravelRequestComponent.prototype.TravelRequestRejectedPopup = function (RejectPopup) {
        this.bsModalRef = this.modalService.show(RejectPopup, this.configsm);
    };
    NewtravelRequestComponent.prototype.TravelRequestReschedulePopup = function (ApproveReschedulePopup) {
        this.bsModalRef = this.modalService.show(ApproveReschedulePopup, this.configsm);
    };
    NewtravelRequestComponent.prototype.TravelRequestRejectedReschedulePopup = function (RejectReschedulePopup) {
        this.bsModalRef = this.modalService.show(RejectReschedulePopup, this.configsm);
    };
    NewtravelRequestComponent.prototype.ReschedulePopup = function (RescheduleReasonPopup, form, PANNoUpdatePopup) {
        if ((this.userObj.AdvanceRequired == 'true' || this.userObj.AdvanceRequired === true) && !this.userObj.PANNumber) {
            this.toaster.warningToastr("Update PAN Number");
            this.bsModalRef = this.modalService.show(PANNoUpdatePopup, this.config);
            return;
        }
        var isRescheduled = this.checkIfRescheduled();
        if (!isRescheduled) {
            this.toaster.errorToastr("Please reschedule");
            return;
        }
        if ((form.dirty && form.valid)) {
            if (this.userObj.AdvanceRequired == "true") {
                for (var i = 0; i < this.AdvanceDetails.length; i++) {
                    if (this.AdvanceDetails[i].Cash > 0 || this.AdvanceDetails[i].Card > 0) {
                        this.userObject.AdvanceDetails = this.AdvanceDetails;
                        this.checkAdvanceRequired = true;
                    }
                    else {
                        this.toaster.errorToastr("Please enter the amount in advance required field");
                        this.userObject.AdvanceDetails = [];
                        this.checkAdvanceRequired = false;
                        break;
                    }
                }
            }
            if (this.userObj.ReportingDate != null && ((form.dirty && form.valid))) {
                if ((this.isDeviation == true || this.userObj.IsDeviationRequest == true) && this.userObj.AdvanceRequired == "true") {
                    if (this.userObj.DeviationReason != "" && this.checkAdvanceRequired) {
                        this.bsModalRef = this.modalService.show(RescheduleReasonPopup, this.configsm);
                    }
                    else {
                        this.toaster.errorToastr("The Deviation Reason is mandatory");
                    }
                }
                else if (this.checkAdvanceRequired || (this.userObj.AdvanceRequired == "false")) {
                    this.bsModalRef = this.modalService.show(RescheduleReasonPopup, this.configsm);
                }
            }
            else {
                this.toaster.errorToastr("The Reporting Date is mandatory");
            }
        }
        else {
            if (form.valid == false) {
                this.toaster.errorToastr("form not valid");
            }
            if (form.dirty == false) {
                this.toaster.errorToastr("make any reschedule change");
            }
        }
    };
    NewtravelRequestComponent.prototype.TravelRequestApprovedUpdate = function () {
        var _this = this;
        this.clicked = true;
        var Obj = {
            Id: this.rgid,
            TravelStatus: this.userObj.VisaStatus === "Submitted" ? "Visa Pending" : "Travel Approved",
        };
        var trackerData = {
            ActualUserEmpID: this.informService.actualUserId,
            LoggedInUserEmpID: this.informService.Current.EmployeeID,
            ActivityPerformed: this.userObj.VisaStatus === "Submitted" ? "VisaPending" : "TravelApproved",
            TravelTicketNo: this.userObj.ID,
            PreviousStatus: this.userObj.TravelStatus,
            IsSameUserLoggedIn: this.informService.actualUserId == this.informService.Current.EmployeeID ? true : false
        };
        if (trackerData.ActivityPerformed == "TravelApproved") {
            trackerData.BehalfApproved = this.userObj.TravelApprover != this.informService.Current.MailID ?
                1 : 0;
        }
        this.informService
            .TravelRequestApprovedInitialUpdate(Obj, trackerData)
            .then(function (res) {
            _this.ngOnInit();
            _this.bsModalRef.hide();
            _this.clicked = false;
            _this.toaster.successToastr(_this.userObj.VisaStatus === "Submitted" ? "Travel request is under visa pending" : "Travel Request is Approved");
            _this.router.navigate(["/"]);
        });
    };
    NewtravelRequestComponent.prototype.TravelRequestRejectedUpdate = function (form) {
        var _this = this;
        if (form.valid) {
            this.clicked = true;
            var Obj = {
                Id: this.rgid,
                TravelStatus: "Rejected",
                Remarks: this.comments,
            };
            var trackerObj = {
                ActualUserEmpID: this.informService.actualUserId,
                LoggedInUserEmpID: this.informService.Current.EmployeeID,
                ActivityPerformed: "TravelRejected",
                TravelTicketNo: this.userObj.ID,
                PreviousStatus: "Pending Approval",
                RejectionReason: this.comments,
                IsSameUserLoggedIn: this.informService.actualUserId == this.informService.Current.EmployeeID ? true : false
            };
            this.informService.TravelRequestRejectedUpdation(Obj, trackerObj).then(function (res) {
                _this.ngOnInit();
                _this.bsModalRef.hide();
                _this.clicked = false;
                _this.toaster.successToastr("Travel Request is Rejected");
                _this.router.navigate(["/"]);
            });
        }
    };
    NewtravelRequestComponent.prototype.RescheduleReasonPop = function (form) {
        var _this = this;
        if (form.valid) {
            this.clicked = true;
            var Obj = {
                Id: this.rgid,
                Remarks: this.comments,
            };
            this.informService.TravelRequestRejectedUpdation(Obj, {}).then(function (res) {
                _this.ngOnInit();
                _this.bsModalRef.hide();
                _this.clicked = false;
                _this.router.navigate(["/"]);
            });
        }
    };
    NewtravelRequestComponent.prototype.CancelBack = function () {
        this.router.navigate(["/"]);
    };
    NewtravelRequestComponent.prototype.TravelRequestRescheduleUpdate = function () {
        var _this = this;
        this.clicked = true;
        var ReqObj = {
            Id: this.rgid,
            TravelStatus: this.userObj.VisaStatus === "Submitted" ? "Visa Pending" : "Reschedule Approved",
        };
        var trackerData = {
            ActualUserEmpID: this.informService.actualUserId,
            LoggedInUserEmpID: this.informService.Current.EmployeeID,
            TravelTicketNo: this.userObj.ID,
            PreviousStatus: this.userObj.TravelStatus,
            RescheduleReason: this.comments,
        };
        if (this.userObj.VisaStatus != "Submitted") {
            trackerData.ActivityPerformed = "RescheduleApproved";
        }
        this.informService.TravelRequestApprovedUpdate(ReqObj, trackerData).then(function (res) {
            _this.ngOnInit();
            _this.bsModalRef.hide();
            _this.toaster.successToastr("Reschedule Travel Request is Approved");
            _this.clicked = false;
            _this.router.navigate(["/"]);
        });
    };
    NewtravelRequestComponent.prototype.TravelRequestRejectedRescheduleUpdate = function (form) {
        var _this = this;
        if (form.valid) {
            this.clicked = true;
            var _loop_1 = function (i) {
                if (this_1.tripDeatilsArray[i].TicketStatus == "Reschedule Requested" ||
                    this_1.tripDeatilsArray[i].TicketStatus == "Cancel Requested") {
                    this_1.informService
                        .GetAllVersionsRoute(this_1.tripDeatilsArray[i].Id)
                        .then(function (response) {
                        for (var v = 1; v < response.length; v++) {
                            if (_this.tripDeatilsArray[i].TicketStatus !=
                                response[v].TicketStatus) {
                                var Object_1 = {
                                    Id: _this.tripDeatilsArray[i].Id,
                                    Form: response[v].Form,
                                    To: response[v].To,
                                    TravelDate: response[v].TravelDate,
                                    FirstPreferance: response[v].FirstPreferance,
                                    SecondPreferance: response[v].SecondPreferance,
                                    TicketStatus: response[v].TicketStatus,
                                    ActualDate: response[v].ActualDate,
                                    ReferenceLeg: response[v].ReferenceLeg,
                                };
                                _this.RouteResults.push(Object_1);
                                break;
                            }
                        }
                    });
                }
                if (this_1.tripDeatilsArray[i].TicketStatus == "Open" &&
                    (this_1.tripDeatilsArray[i].ReferenceLeg != null ||
                        this_1.tripDeatilsArray[i].ReferenceLeg != undefined)) {
                    var Objects = {
                        TicketStatus: "Cancelled",
                        Id: this_1.tripDeatilsArray[i].Id,
                    };
                    this_1.informService.TravelRequestRejectedUpdateVersion(Objects).then();
                }
                if (this_1.tripDeatilsArray[i].TicketStatus == "Open") {
                    this_1.informService
                        .GetAllVersionsRoute(this_1.tripDeatilsArray[i].Id)
                        .then(function (respo) {
                        if (respo.length <= 1) {
                            var Objects = {
                                TicketStatus: "Cancelled",
                                Id: _this.tripDeatilsArray[i].Id,
                            };
                            _this.informService
                                .TravelRequestRejectedUpdateVersion(Objects)
                                .then();
                        }
                    });
                }
            };
            var this_1 = this;
            for (var i = 0; i < this.tripDeatilsArray.length; i++) {
                _loop_1(i);
            }
            this.informService.GetAllVersions(this.rgid).then(function (result) {
                _this.TravelVersion = result;
                for (var s = 0; s < _this.TravelVersion.length; s++) {
                    if (_this.TravelVersion[s].TravelStatus != "Reschedule Requested") {
                        _this.Obj = {
                            Id: _this.rgid,
                            TravelStatus: _this.TravelVersion[s].TravelStatus,
                            ApprovalAuthority: _this.TravelVersion[s].ApprovalAuthority,
                            ApproversSuperior: _this.TravelVersion[s].ApproversSuperior,
                            TravelApprover: _this.TravelVersion[s].TravelApprover,
                            IsDeviationRequest: _this.TravelVersion[s].IsDeviationRequest,
                            ReportingDate: _this.TravelVersion[s].ReportingDate,
                            Remarks: _this.comments,
                        };
                        break;
                    }
                }
            });
            setTimeout(function () {
                var RouteObject = {
                    tripDeatilsArray: _this.RouteResults,
                };
                _this.informService
                    .TravelRequestRejectedUpdate(_this.Obj, RouteObject)
                    .then(function (res) {
                    _this.ngOnInit();
                    _this.Obj = null;
                    _this.bsModalRef.hide();
                    _this.clicked = false;
                    _this.toaster.successToastr("Reschedule Travel Request is Rejected");
                    _this.router.navigate(["/"]);
                });
            }, 3000);
        }
    };
    NewtravelRequestComponent.prototype.GetTickets = function () {
        var _this = this;
        this.informService.GetTravelTicket(this.rgid).then(function (res) {
            _this.TicketFiles = res;
            _this.TicketFiles.forEach(function (element) {
                var temp = {};
                temp.FileName = element.FileName;
                temp.CreatedTime = element.CreatedTime;
                temp.CanDisplay = false;
                temp.CanRemove = false;
                _this.canAttach.push(temp);
            });
            _this.filesData = JSON.parse(_this.userObject.TravelRequest.FileName);
            var _loop_2 = function (index) {
                var ele = _this.TicketFiles[index];
                if (_this.filesData && _this.filesData.length > 0) {
                    if (_this.filesData.findIndex(function (e) { return e.FileName === ele.FileName; }) > -1) {
                        ele.CanDisplay = true;
                        ele.CanRemove = false;
                    }
                    else {
                        ele.CanDisplay = true;
                        ele.CanRemove = true;
                    }
                }
                else {
                    ele.CanDisplay = true;
                    ele.CanRemove = true;
                }
            };
            for (var index = 0; index < _this.TicketFiles.length; index++) {
                _loop_2(index);
            }
        });
    };
    NewtravelRequestComponent.prototype.GetDisplayableFiles = function (filestodisplay) {
        return filestodisplay;
    };
    NewtravelRequestComponent.prototype.handleFileInput = function (files, i) {
        if (this.FilesArray.length > 1 || this.TicketFiles.length > 0) {
            this.findfile = this.FilesArray.filter(function (a) { return a.name === files.item(0).name; });
            this.findfileServer = this.TicketFiles.filter(function (a) { return a.FileName === files.item(0).name; });
            if (this.findfile.length > 0 || this.findfileServer.length > 0) {
                this.FilesArray.splice(i, 1);
                this.toaster.errorToastr("File Name already exist");
            }
            else {
                this.fileToUpload = files.item(0);
            }
        }
        else {
            this.fileToUpload = files.item(0);
        }
    };
    NewtravelRequestComponent.prototype.AddMoreTicket = function () {
        var obj = {};
        var CanFileUpload = true;
        for (var _i = 0, _a = this.FilesArray; _i < _a.length; _i++) {
            var iterator = _a[_i];
            if (iterator.name == null || iterator.name == undefined) {
                CanFileUpload = false;
                break;
            }
        }
        if (CanFileUpload) {
            this.FilesArray.push(obj);
        }
    };
    NewtravelRequestComponent.prototype.TicketRemove = function (temp, i) {
        if (this.FilesArray.length > 0) {
            this.FilesArray.splice(i, 1);
        }
    };
    NewtravelRequestComponent.prototype.AddTicket = function (data) {
        var _this = this;
        if (data && data.File) {
            data.File = null;
            var Obj = {
                AttachId: this.rgid,
                fileToUpload: this.fileToUpload,
            };
            this.informService
                .TravelTicketUpdate(Obj)
                .then(function (res) {
                _this.toaster.successToastr("Your file has been successfully sent");
                _this.informService.GetTravelTicket(_this.rgid).then(function (res) {
                    _this.GetTickets();
                });
            })
                .catch(function (error) {
                if (error) {
                    _this.toaster.errorToastr("FileName already exist...");
                }
                return error;
            });
        }
        else {
            this.toaster.errorToastr("Please choose a file to send");
        }
    };
    NewtravelRequestComponent.prototype.RemoveTicket = function (temp) {
        var _this = this;
        var DelObj = {
            delId: this.rgid,
            delname: temp.FileName,
        };
        this.informService.DeleteTicket(DelObj).then(function (res) {
            _this.GetTickets();
            if (res && res != null && res != undefined) {
                _this.GetTickets();
                _this.toaster.successToastr("Ticket Deleted");
            }
        });
    };
    NewtravelRequestComponent.prototype.DebitDocsAddClicked = function () {
        this.DebitDocs.push({});
    };
    NewtravelRequestComponent.prototype.handleDebitDocsInput = function (files, i) {
        if (files.item(0).size < 1000000) {
            if (this.DebitDocsToUpload.find(function (item) { return item.name === files.item(0).name; }) === undefined) {
                this.DebitDocsToUpload[i] = {
                    name: files.item(0).name,
                    content: files.item(0),
                };
            }
            else {
                this.toaster.errorToastr("File name already exist");
                this.DebitDocs[i] = {};
            }
        }
        else {
            this.toaster.errorToastr("File size should be less than a MB");
            this.DebitDocs[i] = {};
        }
    };
    NewtravelRequestComponent.prototype.DebitDocRemove = function (i) {
        if (this.DebitDocs.length > 0) {
            this.DebitDocs.splice(i, 1);
            this.DebitDocsToUpload.splice(i, 1);
        }
    };
    NewtravelRequestComponent.prototype.cancelRequest = function () {
        this.router.navigate(["/"]);
    };
    NewtravelRequestComponent.prototype.getMinDate = function (i) {
        if (i == 0 || (this.isEdit && this.tripDeatilsArray[i].TravelDate && this.tripDeatilsArray[i].TravelDate < this.minDate)) {
            if (this.userObj.TravelStatus !== 'Reschedule Required' && this.isEdit && this.tripDeatilsArray[i].TravelDate && this.tripDeatilsArray[i].TravelDate < this.minDate) {
                return this.tripDeatilsArray[i].TravelDate;
            }
            return this.minDate;
        }
        else {
            var validPreviousLegs_1 = [];
            this.tripDeatilsArray.forEach(function (item, index) {
                if (index < i && item.TicketStatus != 'Cancelled' && item.TicketStatus != 'Rescheduled' && item.TicketStatus != 'Reschedule Requested') {
                    validPreviousLegs_1.push(item);
                }
            });
            if (validPreviousLegs_1.length > 0 && validPreviousLegs_1[validPreviousLegs_1.length - 1].TravelDate && validPreviousLegs_1[validPreviousLegs_1.length - 1].TravelDate > this.minDate) {
                return validPreviousLegs_1[validPreviousLegs_1.length - 1].TravelDate;
            }
            return this.minDate;
        }
    };
    NewtravelRequestComponent.prototype.getMaxDate = function (i) {
        if (!(this.userObj.TravelStatus === "Reschedule Required" && i === this.userObj.firstLegIndex) && this.isEdit && this.tripDeatilsArray[i].TravelDate && this.getDateWithoutTime(this.tripDeatilsArray[i].TravelDate) < this.getDateWithoutTime(this.minDate)) {
            if (i !== this.userObj.firstLegIndex) {
                return this.tripDeatilsArray[i].TravelDate;
            }
        }
    };
    NewtravelRequestComponent.prototype.setDisabled = function (i) {
        return (this.buttonDisabled = true);
    };
    NewtravelRequestComponent.prototype.getTripText = function (type) {
        if (type === "OneWay") {
            return "One Way";
        }
        if (type === "RoundTrip") {
            return "Round Trip";
        }
        if (type === "MultiCity") {
            return "Multi City";
        }
    };
    NewtravelRequestComponent.prototype.numberOnly = function (event) {
        var charCode = event.which ? event.which : event.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }
        return true;
    };
    NewtravelRequestComponent.prototype.number = function (event) {
        var charCode = event.which ? event.which : event.keyCode;
        if (charCode <= 126) {
            return false;
        }
        return true;
    };
    NewtravelRequestComponent.prototype.focusout = function (event, key, i) {
        if (key == "Project") {
            this.findProject = this.common.filter(function (a) { return a.ProjectList === event.target.value; });
            if (this.findProject.length > 0) {
            }
            else {
                this.userObj.Project = "";
            }
        }
        if (key == "TravelCategory") {
            this.findTravelCategory = this.DeliverySource.filter(function (a) { return a.name === event.target.value; });
            if (this.findTravelCategory.length > 0) {
            }
            else {
                this.userObj.TravelCategory = "";
            }
        }
        if (key == "TravelPurpose") {
            this.findTravelPurpose = this.purposeOfProject.filter(function (a) { return a.name === event.target.value; });
            if (this.findTravelPurpose.length > 0) {
            }
            else {
                this.userObj.TravelPurpose = "";
            }
        }
        if (key == "TravelMeal") {
            this.findTravelMeal = this.informService.Meal.filter(function (a) { return a.name === event.target.value; });
            if (this.findTravelMeal.length > 0) {
            }
            else {
                this.userObj.TravelMeal = "";
            }
        }
        if (key == "IdentityProof") {
            this.findIdentityProof = this.informService.Proof.filter(function (a) { return a.name === event.target.value; });
            if (this.findIdentityProof.length > 0) {
            }
            else {
                this.userObj.IdentityProof = "";
            }
        }
        if (key == "VisaStatus") {
            this.findVisaStatus = this.informService.VisaStatus.filter(function (a) { return a.name === event.target.value; });
            if (this.findVisaStatus.length > 0) {
            }
            else {
                this.userObj.VisaStatus = "";
            }
        }
        if (key == "TypeofVisa") {
            this.findTypeofVisa = this.informService.TypeofVisa.filter(function (a) { return a.name === event.target.value; });
            if (this.findTypeofVisa.length > 0) {
            }
            else {
                this.userObj.TypeofVisa = "";
            }
        }
        if (key == "Currency") {
            this.findCurency = this.CurrancyType.filter(function (a) { return a.currency_types === event.target.value; });
            if (this.findCurency.length > 0) {
            }
            else {
                this.AdvanceDetails[i].Currency = "";
            }
        }
        if (key == "Form") {
            this.findForm = this.locationArrays.filter(function (a) { return a.location === event.target.value; });
            if (this.findForm.length > 0) {
            }
            else {
                this.tripDeatilsArray[i].Form = "";
            }
        }
        if (key == "To") {
            this.findTo = this.locationArrays.filter(function (a) { return a.location === event.target.value; });
            if (this.findTo.length > 0) {
            }
            else {
                this.tripDeatilsArray[i].To = "";
            }
        }
        if (key == "FirstPreferance") {
            this.findFirstPreferance = this.informService.TimeArray.filter(function (a) { return a.name === event.target.value; });
            if (this.findFirstPreferance.length > 0) {
            }
            else {
                this.tripDeatilsArray[i].FirstPreferance = "";
            }
        }
        if (key == "SecondPreferance") {
            this.findSecondPreferance = this.informService.TimeArray.filter(function (a) { return a.name === event.target.value; });
            if (this.findSecondPreferance.length > 0) {
            }
            else {
                this.tripDeatilsArray[i].SecondPreferance = "";
            }
        }
        if (key == "DeviationReason") {
            this.findDeviationReason = this.informService.DeviationReason.filter(function (a) { return a.name === event.target.value; });
            if (this.findDeviationReason.length > 0) {
            }
            else {
                this.userObj.DeviationReason = "";
            }
        }
        if (key == "VendorName") {
            this.findVendorName = this.informService.VendorInfo.filter(function (a) { return a.name === event.target.value; });
            if (this.findVendorName.length > 0) {
            }
            else {
                this.userObj.VendorName = "";
            }
        }
        if (key == "Costfor") {
            this.findCostfor = this.informService.Action.filter(function (a) { return a.name === event.target.value; });
            if (this.findCostfor.length > 0) {
            }
            else {
                this.CostUpdate.Costfor = "";
            }
        }
        if (key == "TravelMode") {
            this.findTravelMode = this.informService.TravelMode.filter(function (a) { return a.name === event.target.value; });
            if (this.findTravelMode.length > 0) {
            }
            else {
                this.userObj.TravelMode = "";
            }
        }
        if (key == "Flight") {
            this.findFlight = this.informService.AirWay.filter(function (a) { return a.name === event.target.value; });
            if (this.findFlight.length > 0) {
            }
            else {
                this.userObj.Flight = "";
            }
        }
        if (key == "isProject") {
            this.findFisProject = this.informService.commentArray.filter(function (a) { return a.name === event.target.value; });
            if (this.findFisProject.length > 0) {
            }
            else {
                this.comments = "";
            }
        }
        if (key == "isNonProject") {
            this.findisNonProject = this.informService.commentsnon.filter(function (a) { return a.name === event.target.value; });
            if (this.findisNonProject.length > 0) {
            }
            else {
                this.comments = "";
            }
        }
        if (key == "isProjectReschedule") {
            this.findisProjectReschedule = this.userObj.TravelType === 'Domestic' ?
                this.informService.DomesticRescheduleArray.filter(function (a) { return a.name === event.target.value; }) :
                this.informService.RescheduleArray.filter(function (a) { return a.name === event.target.value; });
            if (this.findisProjectReschedule.length > 0) {
            }
            else {
                this.comments = "";
            }
        }
        if (key == "isNonProjectReschedule") {
            this.findisNonProjectReschedule = this.userObj.TravelType === 'Domestic' ?
                this.informService.DomesticRescheduleNonArray.filter(function (a) { return a.name === event.target.value; }) :
                this.informService.RescheduleNonArray.filter(function (a) { return a.name === event.target.value; });
            if (this.findisNonProjectReschedule.length > 0) {
            }
            else {
                this.comments = "";
            }
        }
        if (key == "CostActualFrom") {
            this.findForm = this.locationArrays.filter(function (a) { return a.location === event.target.value; });
            if (this.findForm.length > 0) {
            }
            else {
                this.CostUpdate.CostActualFrom = "";
            }
        }
        if (key == "CostActualTo") {
            this.findTo = this.locationArrays.filter(function (a) { return a.location === event.target.value; });
            if (this.findTo.length > 0) {
            }
            else {
                this.CostUpdate.CostActualTo = "";
            }
        }
    };
    NewtravelRequestComponent.prototype.viewUpdateTicket = function (viewUpdateTickett) {
        this.bsModalRef = this.modalService.show(viewUpdateTickett, this.config);
    };
    NewtravelRequestComponent.prototype.close = function () {
        this.bsModalRef.hide();
    };
    NewtravelRequestComponent.prototype.TravelCancelUpdate = function (i) {
        this.tripDeatilsArray[i].Actions == "Cancel" ? this.tripDeatilsArray[i].Actions = "" : this.tripDeatilsArray[i].Actions = "Cancel";
    };
    NewtravelRequestComponent.prototype.ProceedCancellation = function (CancelPopup) {
        this.bsModalRef = this.modalService.show(CancelPopup, this.configsm);
    };
    NewtravelRequestComponent.prototype.TravelRequestCancellingApprove = function () {
        var _this = this;
        if (this.cancelComments && this.cancelComments != '') {
            if (this.userObj.TravelStatus != 'Pending Approval') {
                this.tripDeatilsArray.forEach(function (element) {
                    if (element.Actions == 'Cancel') {
                        element.TicketStatus = 'Cancel Requested';
                    }
                });
                var obj = {
                    Id: this.userObj.Id,
                    CancellationComments: this.cancelComments,
                    TravelStatus: 'Cancellation Requested',
                    Route: this.tripDeatilsArray.filter(function (item) { return item.TicketStatus === "Cancel Requested"; })
                };
                var trackerData = {
                    ActualUserEmpID: this.informService.actualUserId,
                    LoggedInUserEmpID: this.informService.Current.EmployeeID,
                    TravelTicketNo: this.userObj.ID,
                    PreviousStatus: this.userObj.TravelStatus,
                    ActivityPerformed: "CancellationRequested",
                    RejectionReason: this.comments,
                    IsSameUserLoggedIn: this.informService.actualUserId == this.informService.Current.EmployeeID ? true : false
                };
                this.informService.CancelRequestedRoute(obj, trackerData).then(function (res) {
                    if (res) {
                        _this.toaster.successToastr('Cancellation requested');
                        _this.bsModalRef.hide();
                        _this.CancelBack();
                    }
                });
            }
        }
        else {
            this.toaster.errorToastr('Please select any cancel reason');
        }
    };
    NewtravelRequestComponent.prototype.TravelRequestCancelDeny = function () {
        this.bsModalRef.hide();
        this.cancelComments = '';
        this.tripDeatilsArray.forEach(function (item) {
            if (item.Actions == "Cancel") {
                item.Actions = "";
            }
        });
    };
    NewtravelRequestComponent.prototype.IsCancellingChosen = function () {
        if (this.tripDeatilsArray.filter(function (item) { return item.Actions && item.Actions === "Cancel"; }).length > 0) {
            return true;
        }
        return false;
    };
    NewtravelRequestComponent.prototype.getDateWithoutTime = function (date) {
        if (date && date !== "" && typeof (date) !== "string") {
            return new Date(date.toDateString());
        }
    };
    NewtravelRequestComponent.prototype.calculateFirstLeg = function (i) {
        var _this = this;
        if (this.tripDeatilsArray[i].TicketStatus == 'Open' || this.tripDeatilsArray[i].TicketStatus == 'Partially Booked' ||
            this.tripDeatilsArray[i].TicketStatus == 'Booked' || this.tripDeatilsArray[i].TicketStatus == 'Cancel Requested' ||
            this.tripDeatilsArray[i].TicketStatus == 'Cancelled') {
            this.userObj.firstLegIndex = i;
            return;
        }
        else if (this.tripDeatilsArray[i].TicketStatus == 'Reschedule Requested') {
            var rescheduledTripIndex = this.tripDeatilsArray.findIndex(function (item) { return item.ReferenceLeg == _this.tripDeatilsArray[i].Id; });
            if (this.tripDeatilsArray[rescheduledTripIndex].TicketStatus == 'Open') {
                this.userObj.firstLegIndex = i;
                this.userObj.openFirstLegIndex = rescheduledTripIndex;
                return;
            }
            else {
                this.calculateFirstLeg(rescheduledTripIndex);
            }
        }
        else if (this.tripDeatilsArray[i].TicketStatus == 'Rescheduled') {
            var rescheduledTripIndex = this.tripDeatilsArray.findIndex(function (item) { return item.ReferenceLeg == _this.tripDeatilsArray[i].Id; });
            this.calculateFirstLeg(rescheduledTripIndex);
        }
    };
    NewtravelRequestComponent.prototype.reOrderTripDetailsArray = function () {
        var temp = [];
        Array.prototype.push.apply(temp, Object(lodash__WEBPACK_IMPORTED_MODULE_10__["cloneDeep"])(this.tripDeatilsArray.filter(function (item) { return item.Actions !== "Book" && item.Actions !== "Reschedule" && item.Actions !== "Cancel"; })));
        Array.prototype.push.apply(temp, Object(lodash__WEBPACK_IMPORTED_MODULE_10__["cloneDeep"])(this.tripDeatilsArray.filter(function (item) { return item.Actions == "Cancel"; })));
        Array.prototype.push.apply(temp, Object(lodash__WEBPACK_IMPORTED_MODULE_10__["cloneDeep"])(this.tripDeatilsArray.filter(function (item) { return item.Actions == "Reschedule"; })));
        Array.prototype.push.apply(temp, Object(lodash__WEBPACK_IMPORTED_MODULE_10__["cloneDeep"])(this.tripDeatilsArray.filter(function (item) { return item.Actions == "Book"; })));
        this.tripDeatilsArray = Object(lodash__WEBPACK_IMPORTED_MODULE_10__["cloneDeep"])(temp);
    };
    NewtravelRequestComponent.prototype.deleteAdminCostArray = function (index) {
        this.AdmincostArray.splice(index, 1);
    };
    NewtravelRequestComponent.prototype.checkIfRescheduled = function () {
        var _this = this;
        var isChanged = false;
        Object(lodash__WEBPACK_IMPORTED_MODULE_10__["forEach"])(this.tripDeatilsArray, function (item, i) {
            if (!(moment__WEBPACK_IMPORTED_MODULE_6__(item.TravelDate).isSame(moment__WEBPACK_IMPORTED_MODULE_6__(_this.tripDetailsBeforeReschedule[i].TravelDate)))) {
                isChanged = true;
            }
            if (item.FirstPreferance != _this.tripDetailsBeforeReschedule[i].FirstPreferance) {
                isChanged = true;
            }
            if (item.SecondPreferance != _this.tripDetailsBeforeReschedule[i].SecondPreferance) {
                isChanged = true;
            }
        });
        return isChanged;
    };
    NewtravelRequestComponent.prototype.updatePANNumber = function () {
        var _this = this;
        if (this.userObj.PANNumber.trim().length > 0) {
            this.informService.UpdateTravelProfile({ Id: this.TravelProfileArray[0].Id, PANNumber: this.userObj.PANNumber }).then(function (res) {
                if (res) {
                    _this.toaster.successToastr("PAN Number saved successfully");
                    _this.bsModalRef.hide();
                }
                else {
                    _this.toaster.errorToastr("Changes in error");
                }
            });
        }
        else {
            this.toaster.errorToastr("Enter valid PAN Number");
        }
    };
    NewtravelRequestComponent.prototype.showPANNoUpdatePopUp = function (PANNoUpdatePopup) {
        this.bsModalRef.hide();
        if (!this.userObj.PANNumber) {
            this.bsModalRef = this.modalService.show(PANNoUpdatePopup, this.configsm);
        }
    };
    NewtravelRequestComponent.prototype.showMoreInfo = function (template, index, isUserObj) {
        isUserObj ? this.selectedDependantIndex = -1 :
            this.selectedDependantIndex = index;
        this.bsModalRef = this.modalService.show(template, this.config);
    };
    NewtravelRequestComponent.prototype.onVisaValidTillChange = function (item) {
        var _this = this;
        if (!this.userObj.firstLegIndex) {
            this.userObj.firstLegIndex = 0;
        }
        if (this.getDateWithoutTime(this.tripDeatilsArray[this.userObj.firstLegIndex].TravelDate) > this.getDateWithoutTime(item.VisaValidTill)) {
            if (this.Appkey === 'VisaProcess') {
                item.VisaValidTill = null;
                this.toaster.errorToastr("Visa valid till date should be ahead of Travel date. Please contact travel desk team.");
                return;
            }
            setTimeout(function () {
                _this.tripDeatilsArray[_this.userObj.firstLegIndex].TravelDate = "";
            }, 300);
            this.toaster.errorToastr("Travel date should be on (or) before dependent visa valid till date");
        }
    };
    NewtravelRequestComponent.prototype.updateVisaDetails = function (form, rejectionPopup) {
        if (this.userObj.VisaStatus === "Submitted") {
            this.toaster.errorToastr("Visa status cannot be in submitted state");
            return;
        }
        if (this.userObj.Travel_x0020_For === "Self along with Dependents") {
            var isSubmitted = this.DependentArrayView.find(function (item) { return item.VisaStatus === "Submitted"; });
            if (isSubmitted) {
                this.toaster.errorToastr("Visa status cannot be in submitted state");
                return;
            }
        }
        if (!form.valid) {
            this.toaster.errorToastr("Form invalid");
            return;
        }
        if (this.userObj.Travel_x0020_For === "Self along with Dependents") {
            var reasonPendingIndex = this.DependentArrayView.findIndex(function (item) { return item.VisaStatus === "Rejected" && !item.RejectionReason; });
            if (reasonPendingIndex !== -1) {
                this.rejectComments = "";
                this.currentDependentIndex = reasonPendingIndex;
                this.bsModalRef = this.modalService.show(rejectionPopup, this.configsm);
                return;
            }
        }
        if (this.userObj.VisaStatus === "Rejected") {
            if (this.userObj.CancellationComments) {
                this.VisaProcessUpdation('Visa Rejected');
            }
            else {
                this.rejectComments = "";
                this.currentDependentIndex = -1;
                this.bsModalRef = this.modalService.show(rejectionPopup, this.configsm);
            }
        }
        else {
            this.VisaProcessUpdation("Travel Approved");
        }
    };
    NewtravelRequestComponent.prototype.VisaProcessUpdation = function (status) {
        var _this = this;
        if (this.userObj.Travel_x0020_For === "Self along with Dependents") {
            this.DependentAdd.forEach(function (item) {
                var matchedDependent = _this.DependentArrayView.find(function (value) { return value.GivenName === item.GivenName && value.SurName === item.SurName; });
                item.VisaValidTill = matchedDependent.VisaValidTill;
                item.VisaNumber = matchedDependent.VisaNo;
                item.VisaStatus = matchedDependent.VisaStatus;
                item.TypeofVisa = matchedDependent.TypeofVisa;
                item.RejectionReason = matchedDependent.VisaStatus === "Rejected" ? matchedDependent.RejectionReason : "";
                if (item.VisaNo) {
                    delete item.VisaNo;
                }
            });
        }
        var travelStatus = "";
        var trackerData = {
            ActualUserEmpID: this.informService.actualUserId,
            LoggedInUserEmpID: this.informService.Current.EmployeeID,
            TravelTicketNo: this.userObj.ID,
            PreviousStatus: this.userObj.TravelStatus
        };
        if (status === "Travel Approved" &&
            this.getDateWithoutTime(this.tripDeatilsArray[this.userObj.firstLegIndex].TravelDate) <= this.todayWithoutTime) {
            trackerData.ActivityPerformed = "RescheduleRequired";
            travelStatus = "Reschedule Required";
        }
        else if (status == "Visa Rejected") {
            trackerData.ActivityPerformed = "VisaRejected";
            trackerData.VisaRejectionReason = this.userObj.CancellationComments;
            travelStatus = status;
        }
        var objects = {
            Id: this.rgid,
            TravelStatus: travelStatus,
            VisaStatus: this.userObj.VisaStatus,
            VisaValidTill: this.userObj.VisaValidTill ? this.userObj.VisaValidTill : null,
            TypeofVisa: this.userObj.TypeofVisa,
            VisaNo: this.userObj.VisaNo,
            processedby: this.informService.Current.EmployeeID,
            processedbyname: this.informService.Current.EmployeeName,
            CancellationComments: this.userObj.VisaStatus === "Rejected" ? this.userObj.CancellationComments : ""
        };
        this.userObject.UpdateObj = objects;
        this.userObject.IsVisaValidityUpdated = true;
        this.userObject.changedDependentsVisa = [];
        if (this.DependentAdd.length > 0) {
            this.DependentAdd.forEach(function (dependent) {
                var oldData = _this.initialDependentAdd.find(function (item) { return item.GivenName === dependent.GivenName && item.SurName === dependent.SurName; });
                if (oldData) {
                    if ((((!oldData.VisaValidTill) && dependent.VisaValidTill) ||
                        (oldData.VisaValidTill && dependent.VisaValidTill &&
                            ((_this.getDateWithoutTime(new Date(oldData.VisaValidTill)) >
                                _this.getDateWithoutTime(new Date(dependent.VisaValidTill.toDateString()))) ||
                                (_this.getDateWithoutTime(new Date(oldData.VisaValidTill))
                                    < _this.getDateWithoutTime(new Date(dependent.VisaValidTill.toDateString())))))) ||
                        (((!oldData.VisaValidTill) && dependent.VisaNumber) || (oldData.VisaNumber && dependent.VisaNumber && oldData.VisaNumber != dependent.VisaNumber)) ||
                        ((!oldData.TypeofVisa && dependent.TypeofVisa) || (oldData.TypeofVisa && dependent.TypeofVisa && oldData.TypeofVisa != dependent.TypeofVisa))
                        || (oldData.VisaStatus != dependent.VisaStatus)) {
                        _this.userObject.changedDependentsVisa.push(dependent);
                    }
                }
                else {
                    _this.userObject.changedDependentsVisa.push(dependent);
                }
            });
        }
        this.userObject.extras = {
            GivenName: this.userObj.GivenName,
            SurName: this.userObj.SurName
        };
        this.informService
            .UpdateVisaProcess(this.userObject, trackerData)
            .then(function () {
            _this.toaster.successToastr("Visa details updated successfully");
            if (_this.bsModalRef) {
                _this.bsModalRef.hide();
            }
            _this.router.navigate(["/visaprocess"]);
        });
    };
    NewtravelRequestComponent.prototype.VisaProcessRejectionDeny = function () {
        if (this.currentDependentIndex == -1) {
            this.userObj.VisaStatus = "";
        }
        else {
            this.DependentArrayView[this.currentDependentIndex].VisaStatus = "";
        }
        this.rejectComments = "";
        this.bsModalRef.hide();
    };
    NewtravelRequestComponent.prototype.updateAsVoid = function () {
        var _this = this;
        var payload = {
            Id: this.rgid,
            TravelStatus: 'Void',
        };
        var trackerData = {
            ActualUserEmpID: this.informService.actualUserId,
            LoggedInUserEmpID: this.informService.Current.EmployeeID,
            TravelTicketNo: this.userObj.ID,
            PreviousStatus: this.userObj.TravelStatus,
            ActivityPerformed: "ManualVoid",
            IsSameUserLoggedIn: this.informService.actualUserId == this.informService.Current.EmployeeID ? true : false
        };
        this.informService
            .UpdateVoid(payload, trackerData)
            .then(function (res) {
            _this.toaster.successToastr("Updated successfully");
            _this.router.navigate(["/UpdateTicket"]);
        });
    };
    NewtravelRequestComponent.prototype.rejectedVisaReason = function () {
        if (this.currentDependentIndex == -1) {
            this.userObj.CancellationComments = this.rejectComments;
        }
        else {
            this.DependentArrayView[this.currentDependentIndex].RejectionReason = this.rejectComments;
        }
        this.rejectComments = "";
        this.bsModalRef.hide();
    };
    NewtravelRequestComponent.prototype.download = function (file, name) {
        // saveAs(`https://mavericsystems.sharepoint.com/sites/app_data_center/_layouts/Download.aspx?sourceurl=${file}`, name);
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])("file"),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
    ], NewtravelRequestComponent.prototype, "file", void 0);
    NewtravelRequestComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: "app-newtravel-request",
            template: __webpack_require__(/*! ./newtravel-request.component.html */ "./src/app/newtravel-request/newtravel-request.component.html"),
            styles: [__webpack_require__(/*! ./newtravel-request.component.css */ "./src/app/newtravel-request/newtravel-request.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_2__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_4__["BsModalService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_7__["ToastrManager"]])
    ], NewtravelRequestComponent);
    return NewtravelRequestComponent;
}());



/***/ }),

/***/ "./src/app/proxyuser/proxyuser.component.css":
/*!***************************************************!*\
  !*** ./src/app/proxyuser/proxyuser.component.css ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".row.text-center.proxy {\r\n    margin-top: 10px;\r\n    justify-content: center;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcHJveHl1c2VyL3Byb3h5dXNlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksZ0JBQWdCO0lBQ2hCLHVCQUF1QjtBQUMzQiIsImZpbGUiOiJzcmMvYXBwL3Byb3h5dXNlci9wcm94eXVzZXIuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5yb3cudGV4dC1jZW50ZXIucHJveHkge1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59Il19 */"

/***/ }),

/***/ "./src/app/proxyuser/proxyuser.component.html":
/*!****************************************************!*\
  !*** ./src/app/proxyuser/proxyuser.component.html ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n  <h4 class=\"card-header\">Proxy User</h4>\r\n  <div class=\"card-body\">\r\n\r\n\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"EmployeeID\">Employee Id</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" autocomplete=\"off\" class=\"form-control\" name=\"SearchId\" [(ngModel)]=\"SearchId\"\r\n            placeholder=\"Proxy User Id\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <button type=\"button\" class=\"btn btn-primary px-4\" [disabled]=\"activate\" (click)=\"ProxySet()\">Search</button>\r\n        <!-- <div class=\"form-group\">\r\n      <label for=\"EmployeeName\">Employee Name</label>\r\n    </div> -->\r\n      </div>\r\n      <!-- <div class=\"col-md-3\">\r\n    <div class=\"form-group\">\r\n      <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n        style=\"text-transform: capitalize\" name=\"EmployeeName\" [(ngModel)]=\"userObj.EmployeeName\"\r\n        placeholder=\"Employee Name\" #EmployeeName=\"ngModel\" readonly  />\r\n\r\n    </div>\r\n  </div> -->\r\n    </div>\r\n\r\n\r\n\r\n\r\n    <form name=\"form\" #f=\"ngForm\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"EmployeeID\">Employee Id</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Title\" [(ngModel)]=\"userObj.Title\" placeholder=\"Employee Id\"\r\n              readonly />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"EmployeeName\">Employee Name</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"EmployeeName\" [(ngModel)]=\"userObj.full_name\"\r\n              placeholder=\"Employee Name\" readonly />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Department\">Department</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Department\" [(ngModel)]=\"userObj.department\"\r\n              placeholder=\"Department\" readonly />\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Designation\">Designation</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Designation\" [(ngModel)]=\"userObj.designation\"\r\n              placeholder=\"Designation\" readonly />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"BusinessUnit\">Business Unit</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"BusinessUnit\" [(ngModel)]=\"userObj.business_unit\"\r\n              placeholder=\"Business Unit\" readonly />\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"DeliveryUnit\">Delivery Unit</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"DeliveryUnit\" [(ngModel)]=\"userObj.cluster\"\r\n              placeholder=\"Delivery Unit\" readonly />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Gender\">Gender</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"Gender\" [(ngModel)]=\"userObj.gender\" placeholder=\"Gender\"\r\n            #Gender=\"ngModel\" readonly />\r\n\r\n        </div>\r\n        <!-- <div class=\"col-md-3\">\r\n      <div class=\"form-group\">\r\n        <label for=\"Age\">Age</label>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-3\">\r\n      <div class=\"form-group\">\r\n        <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n          style=\"text-transform: capitalize\" name=\"Age\" [(ngModel)]=\"userObj.Age\" placeholder=\"Age\" #Age=\"ngModel\"\r\n          readonly  />\r\n      </div>\r\n    </div> -->\r\n        <!-- <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"DOB\">Date Of Birth</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <input class=\"form-control\" autocomplete=\"off\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" bsDatepicker name=\"dob\"\r\n            [(ngModel)]=\"userObj.dob\" [bsConfig]=\"bsConfig\" placeholder=\"Date Of Birth\" disabled  />\r\n        </div>\r\n      </div> -->\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"BaseLocation\">Base Location</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"BaseLocation\" [(ngModel)]=\"userObj.base_location\"\r\n            placeholder=\"Base Location\" readonly />\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <!-- <div class=\"col-md-3\">\r\n      <div class=\"form-group\">\r\n        <label for=\"BaseLocation\">Base Location</label>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-3\">\r\n      <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n        style=\"text-transform: capitalize\" name=\"BaseLocation\" [(ngModel)]=\"userObj.base_location\"\r\n        placeholder=\"Base Location\" readonly  />\r\n    </div> -->\r\n        <!-- <div class=\"col-md-3\">\r\n      <div class=\"form-group\">\r\n        <label for=\"DOB\">Date Of Birth</label>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-3\">\r\n      <div class=\"form-group\">\r\n        <input class=\"form-control\" autocomplete=\"off\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" bsDatepicker name=\"DOB\"\r\n          [(ngModel)]=\"userObj.dob\" [bsConfig]=\"bsConfig\" placeholder=\"Date Of Birth\" disabled  />\r\n      </div>\r\n    </div> -->\r\n      </div>\r\n    </form>\r\n    <div class=\"row text-center proxy\">\r\n      <div class=\"text-center\">\r\n        <button type=\"button\" class=\"btn btn-primary px-3\" [disabled]=\"activate\"\r\n          (click)=\"ProxyConfirm()\">Confirm</button>\r\n      </div>\r\n      <div class=\"text-center ml-2\">\r\n        <button type=\"button\" class=\"btn btn-primary px-3\" [disabled]=\"Deactivate\"\r\n          (click)=\"ProxyDeactivate()\">Release</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./src/app/proxyuser/proxyuser.component.ts":
/*!**************************************************!*\
  !*** ./src/app/proxyuser/proxyuser.component.ts ***!
  \**************************************************/
/*! exports provided: ProxyuserComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProxyuserComponent", function() { return ProxyuserComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");





var ProxyuserComponent = /** @class */ (function () {
    function ProxyuserComponent(infoService, toaster, router) {
        this.infoService = infoService;
        this.toaster = toaster;
        this.router = router;
        this.userObj = {};
        this.ProxyArray = [];
        this.userObjind = [];
        this.Deactivate = true;
        this.activate = false;
    }
    ProxyuserComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.ProxyEmail = this.infoService.getLocalStorage("ProxyEmail");
        // this.infoService.GetCurrentUser(() => {
        if (this.ProxyEmail != null || this.ProxyEmail != undefined) {
            this.activate = true;
            this.Deactivate = false;
            this.infoService.ProxyUserObject(this.ProxyEmail).then(function (res) {
                _this.userObj = res[0];
                // this.userObj = this.infoService.Current;
                // this.userObj.Title = this.userObj.EmployeeID;
                // this.userObj.full_name = this.userObj.EmployeeName;
                // this.userObj.department = this.userObj.Department;
                // this.userObj.designation = this.userObj.Designation;
                // this.userObj.business_unit = this.userObj.BusinessUnit;
                // this.userObj.cluster = this.userObj.DeliveryUnit;
                // this.userObj.gender = this.userObj.Gender;
                // this.userObj.base_location = this.userObj.BaseLocation;
            });
        }
        // });
    };
    ProxyuserComponent.prototype.ProxySet = function () {
        var _this = this;
        this.infoService.ProxyUser(this.SearchId).then(function (res) {
            _this.ProxyArray = res;
            _this.userObjind = _this.ProxyArray.filter(function (el) { return el.Title == _this.SearchId; });
            if (_this.ProxyArray.length == 0) {
                _this.toaster.errorToastr("Employee ID Does Not Exist");
                _this.SearchId = "";
            }
            if (_this.ProxyArray.length > 0) {
                if (_this.userObjind[0].is_active == true) {
                    if (_this.userObjind.length == 0) {
                        _this.toaster.errorToastr("Employee ID Does Not Exist");
                    }
                    else {
                        _this.userObj = _this.userObjind[0];
                        _this.ProxyEmail = _this.userObjind[0].maveric_email_id;
                        _this.SearchId = "";
                        _this.Deactivate = true;
                    }
                }
                else {
                    _this.toaster.errorToastr("Employee ID is inactive");
                }
            }
        });
    };
    ProxyuserComponent.prototype.ProxyConfirm = function () {
        this.infoService.setLocalStorage("ProxyEmail", this.ProxyEmail);
        this.Proxy = this.infoService.getLocalStorage("ProxyEmail");
        if (this.Proxy != null || this.Proxy != undefined) {
            this.toaster.successToastr("Proxy user activated");
            this.activate = true;
            this.Deactivate = false;
        }
        this.infoService.ProxySetEmail(this.Proxy);
        /*  this.infoService.GetCurrentUser((res) => {
          }); */
        this.router.navigate(["/"]);
    };
    ProxyuserComponent.prototype.ProxyDeactivate = function () {
        this.infoService.removeItem("ProxyEmail");
        this.Proxy = this.infoService.getLocalStorage("ProxyEmail");
        if (this.Proxy == null) {
            this.toaster.successToastr("Proxy user deactivated");
            this.userObj.Title = "";
            this.userObj.full_name = "";
            this.userObj.department = "";
            this.userObj.designation = "";
            this.userObj.business_unit = "";
            this.userObj.cluster = "";
            this.userObj.gender = "";
            this.userObj.base_location = "";
            this.Deactivate = true;
            this.activate = false;
        }
        this.infoService.ProxyRemoveEmail(this.Proxy);
        this.router.navigate(["/"]);
    };
    ProxyuserComponent.prototype.number = function (event) {
        var charCode = event.which ? event.which : event.keyCode;
        if (charCode <= 126) {
            return false;
        }
        return true;
    };
    ProxyuserComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: "app-proxyuser",
            template: __webpack_require__(/*! ./proxyuser.component.html */ "./src/app/proxyuser/proxyuser.component.html"),
            styles: [__webpack_require__(/*! ./proxyuser.component.css */ "./src/app/proxyuser/proxyuser.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_2__["InfoService"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_3__["ToastrManager"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"]])
    ], ProxyuserComponent);
    return ProxyuserComponent;
}());



/***/ }),

/***/ "./src/app/reports/reports.component.css":
/*!***********************************************!*\
  !*** ./src/app/reports/reports.component.css ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3JlcG9ydHMvcmVwb3J0cy5jb21wb25lbnQuY3NzIn0= */"

/***/ }),

/***/ "./src/app/reports/reports.component.html":
/*!************************************************!*\
  !*** ./src/app/reports/reports.component.html ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n  <div class=\"col-md-1\">\r\n  </div>\r\n  <div class=\"col-md-2  mt-5 mb-5\">\r\n    <label class=\" col-form-label\" for=\"select1\">Choose Cluster</label>\r\n    <select type=\"text\" [(ngModel)]=\"cluster\" name=\"cluster\" class=\"form-control\" (change)=\"FilterCluster(cluster)\"\r\n      placeholder=\" Choose Cluster\">\r\n      <option [value]=\"du\" *ngFor=\"let du of clusterData\">\r\n        {{du}}</option>\r\n    </select>\r\n  </div>\r\n  <div class=\"col-md-1  mt-5\">\r\n    <button type=\"button\" class=\"btn btn-primary\" style=\"margin-top: 37px;\" (click)=\"clearDates()\">\r\n      Clear\r\n    </button>\r\n  </div>\r\n  <div class=\"col-md-2  mt-5 mb-5\">\r\n    <label class=\" col-form-label\" for=\"select1\">Choose Status</label>\r\n\r\n    <select [(ngModel)]=\"TravelStatus\" name=\"TravelStatus\" class=\"form-control\" placeholder=\" Choose Status\"\r\n      (change)=\"Filter($event)\">\r\n      <option value=\"Pending Approval\">New Travel Request</option>\r\n      <option value=\"Travel Approved\">Approved Request</option>\r\n      <option value=\"Rejected\">Rejected Request</option>\r\n      <option value=\"Booked\">Booked</option>\r\n      <option value=\"Reschedule Approved\">Reschedule Approved</option>\r\n      <option value=\"Reschedule Requested\">Reschedule Requested</option>\r\n      <option value=\"Cancelled\">Cancelled</option>\r\n      <option value=\"Cancellation Requested\">Cancellation Request</option>\r\n      <option value=\"All\">All</option>\r\n    </select>\r\n  </div>\r\n  <div class=\"col-md-1  mt-5\">\r\n    <button type=\"button\" class=\"btn btn-primary\" style=\"margin-top: 37px;\" (click)=\"clear()\">\r\n      Clear\r\n    </button>\r\n  </div>\r\n  <div class=\"col-md-2   mt-5 mb-5\">\r\n    <label class=\" col-form-label\" for=\"select1\">Choose Dates</label>\r\n    <input class=\"form-control\" (keydown)=\"number($event)\" autocomplete=\"off\" bsDaterangepicker [(ngModel)]=\"dateRange\"\r\n      [bsConfig]=\"bsConfig\" (ngModelChange)=\"onChange($event)\" required />\r\n\r\n  </div>\r\n  <div class=\"col-md-1  mt-5\">\r\n    <button type=\"button\" class=\"btn btn-primary\" style=\"margin-top: 37px;\" (click)=\"clearDates()\">\r\n      Clear\r\n    </button>\r\n  </div>\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n <div >\r\n<button (click)=\"exportexcel()\">download</button>\r\n </div>\r\n<!-- <table datatable id=\"excel-tablee\" [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n  <thead>\r\n    <tr>\r\n      <th class=\"th\" *ngFor=\"let temp of reportDetails\">{{temp}}</th>\r\n    </tr>\r\n\r\n  </thead>\r\n  <tbody>\r\n    <tr class=\"ts\" *ngFor=\"let obj of filterArray\">\r\n      <td class=\"ts\" *ngFor=\"let c of columnData\">\r\n        {{obj[c]}}</td>\r\n    </tr>\r\n  </tbody>\r\n</table> -->\r\n<!-- <table datatable id=\"excel-table\" [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n  <thead>\r\n    <tr>\r\n      <th class=\"th\" *ngFor=\"let temp of reportDetails\">{{temp}}</th>\r\n    </tr>\r\n\r\n  </thead>\r\n  <tbody>\r\n    <tr class=\"ts\" *ngFor=\"let obj of filterArray\">\r\n      <td class=\"ts\" *ngFor=\"let c of columnData\">\r\n        {{obj[c]}}</td>\r\n    </tr>\r\n  </tbody>\r\n</table> -->\r\n\r\n\r\n\r\n<div class=\"mt-5\" *ngIf=\"datatable == true && fulldetails && fulldetails.length == 0\">\r\n  <h5 class=\"text-center mt-5\">No data available</h5>\r\n</div>\r\n<div class=\"\" *ngIf=\"datatable == false && fulldetails && fulldetails.length > 0\">\r\n  <table id=\"table1\" datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n    <thead>\r\n      <tr>\r\n        <th>Transaction ID</th>\r\n        <th> Emp ID</th>\r\n        <th> Emp Name</th>\r\n        <th> Department </th>\r\n        <th> Designation </th>\r\n        <th> Business Unit</th>\r\n        <th> Delivery Unit</th>\r\n        <th> Base Location</th>\r\n        <th>Project Travel</th>\r\n        <th>Project ID </th>\r\n        <th> Project Name </th>\r\n        <th> Client Name</th>\r\n        <th> Cluster</th>\r\n        <th> Approval Authority</th>\r\n        <th>Approver's Supervisor </th>\r\n        <th>Requested Date </th>\r\n        <th> Travel Category </th>\r\n        <th> Travel Purpose </th>\r\n        <th>Accommodation Required? (Yes / No) </th>\r\n        <th>Client Debit? (Yes / No) </th>\r\n        <th> Travel Type (International / Domestic) </th>\r\n        <th> Visa Status</th>\r\n        <th>Type of Visa </th>\r\n        <th>Advance Required (Yes / No) </th>\r\n        <th> Travel Session (One Way / Round Trip / Multicity)</th>\r\n        <th> From City</th>\r\n        <th> To City</th>\r\n        <th>Onward Date</th>\r\n        <th>Return Date</th>\r\n        <th>Reporting Date </th>\r\n        <th> Approval Status</th>\r\n        <th> Deviation Reason</th>\r\n        <th> Travel Status </th>\r\n        <th> Approved On </th>\r\n        <th> Approved by</th>\r\n\r\n        <th> Rejection Reason</th>\r\n        <th> Actual Date </th>\r\n        <th>Travel Mode </th>\r\n        <th>Travel For</th>\r\n        <th> Airline Provider</th>\r\n        <th>Invoice No </th>\r\n        <th> Invoice Date</th>\r\n        <th>Visa Valid Till</th>\r\n        <th>Vendor Name </th>\r\n        <th>Booking Remarks </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr *ngFor=\"let i = index ; let x of filterArray\">\r\n        <td>{{x.Id}}</td>\r\n        <td> {{x.EmployeeID}}</td>\r\n        <td>{{x.EmployeeName}} </td>\r\n        <td> {{x.Department}}</td>\r\n        <td>{{x.Designation}} </td>\r\n        <td>{{x.BusinessUnit }} </td>\r\n        <td>{{x.DeliveryUnit }} </td>\r\n        <td>{{x.BaseLocation}} </td>\r\n        <td>{{x.IsProjectTravel}}</td>\r\n        <td>{{x.ProjectId}} </td>\r\n        <td>{{x.Project}} </td>\r\n        <td>{{x.ClientName }} </td>\r\n        <td>{{x.DeliveryUnit}} </td>\r\n        <td> {{x.ApprovalAuthority}}</td>\r\n        <td>{{x.ApproversSuperior}} </td>\r\n        <td> {{x.RequestedDate }}</td>\r\n        <td> {{x.TravelCategory }}</td>\r\n        <td>{{x.TravelPurpose}} </td>\r\n        <td> {{x.AccommodationRequired === false ? 'No' : 'Yes'}}</td>\r\n     \r\n\r\n      \r\n        <td> {{x.ClientDebit  === false ? 'No' : 'Yes'}}</td>\r\n        <td>{{x.TravelType }} </td>\r\n        <td>{{x.VisaStatus  }} </td>\r\n        <td> {{x.TypeofVisa}}</td>\r\n        <td> {{x.AdvanceRequired  === false ? 'No':'Yes'}}</td>\r\n       \r\n        <td>{{x.TripType}} </td>\r\n        <td> {{x.FromCity}}</td>\r\n        <td> {{x.ToCity}}</td>\r\n        <td>{{x.OnwardDate}}</td>\r\n        <td>{{x.ReturnDate}}</td>\r\n        <td>{{x.ReportingDate }} </td>\r\n        <td>{{x.TicketStatus}} </td>\r\n        <td> {{x.DeviationReason }}</td>\r\n        <td>{{x.TravelStatus}} </td>\r\n        <td> </td>\r\n        <td>{{x.TravelApprover}} </td>\r\n        <td>{{x.RejectionReason }} </td>\r\n\r\n        <td>{{x.OnwardDate }}</td>\r\n        <td>{{x.TravelMode }} </td>\r\n        <td>{{x.TravelFor}}</td>\r\n        <td>{{x.Flight  }}</td>\r\n        <td>{{x.InvoiceNo  }} </td>\r\n        <td>{{x.InvoiceDate     }} </td>\r\n        <td>{{x.VisaValidTill}}</td>\r\n        <td>{{x.VendorName  }} </td>\r\n        <td>{{x.TravelDeskRemarks  }} </td>\r\n\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>"

/***/ }),

/***/ "./src/app/reports/reports.component.ts":
/*!**********************************************!*\
  !*** ./src/app/reports/reports.component.ts ***!
  \**********************************************/
/*! exports provided: ReportsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReportsComponent", function() { return ReportsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _shared_daterangefilter_pipe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/daterangefilter.pipe */ "./src/app/shared/daterangefilter.pipe.ts");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! xlsx */ "./node_modules/xlsx/xlsx.js");
/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(xlsx__WEBPACK_IMPORTED_MODULE_6__);







var ReportsComponent = /** @class */ (function () {
    function ReportsComponent(informService, activatedRoute) {
        this.informService = informService;
        this.activatedRoute = activatedRoute;
        this.TravelStatus = '';
        this.cluster = '';
        this.dtOptions = {};
        this.bsConfig = { dateInputFormat: 'DD-MMM-YYYY', adaptivePosition: true, showWeekNumbers: false };
        this.reportStatus = "";
        this.userObj = {};
        this.datatable = false;
        this.GetTravelRequestReport = [];
        this.fulldetails = [];
        this.filterArray = [];
        this.columnData = [];
        this.reportDetails = [];
        this.clusterData = [];
        this.fileName = 'ExcelSheet.xlsx';
        this.array1 = new Array();
        this.array2 = new Array();
        this.n = 2; //Total table
        this.ProxyEmail = this.informService.getLocalStorage('ProxyEmail');
        if (this.ProxyEmail != null || this.ProxyEmail != undefined) {
            this.ProxyName = this.ProxyEmail;
        }
        this.status = this.activatedRoute.snapshot.params['status'];
        this.minDate = new Date();
    }
    ReportsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.userObj = this.informService.Current;
        this.informService.GetCurrentUser(function () {
        });
        this.dtOptions = {
            pagingType: 'full_numbers',
            pageLength: 10,
            paging: true,
            searching: false,
            info: true,
            ordering: false
        };
        this.informService.getCluster().then(function (res) {
            _this.clusterData = res;
        });
        this.informService.GetTravelRequestReport().then(function (resp) {
            if (resp) {
                _this.datatable = false;
                _this.fulldetails = resp.fullTravelDetails;
                _this.reporArray = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["cloneDeep"])(_this.fulldetails);
                // var result = this.fulldetails.reduce(function (res, obj) {
                //   return (Object.keys(obj).length >= Object.keys(res).length) ? obj : res;
                // });
                // let index = this.fulldetails.findIndex(el => el === result)
                // this.columnData = Object.keys(this.fulldetails[index]);
                // this.columnData.forEach(el => {
                //   const filteredData = el.replace(/([A-Z])/g, ' $1').trim()
                //   this.reportDetails.push(filteredData)
                // })
                _this.filterArray = _this.fulldetails;
            }
            else {
                _this.datatable = true;
            }
        });
        // for ( let x=1; x<=this.n; x++ ) {
        //   this.array1[x-1] = x;
        //   this.array2[x-1] = x + 'th';
        //   }
    };
    ReportsComponent.prototype.number = function (event) {
        var charCode = event.which ? event.which : event.keyCode;
        if (charCode <= 126) {
            return false;
        }
        return true;
    };
    ReportsComponent.prototype.Filter = function (ev) {
        var _this = this;
        this.TravelStatus = ev.target.value;
        if (this.TravelStatus === 'All') {
            this.filterArray = this.reporArray;
        }
        else {
            this.filterArray = this.fulldetails.filter(function (x) { return x.TravelStatus == _this.TravelStatus; });
        }
    };
    ReportsComponent.prototype.FilterCluster = function (cluster) {
        var _this = this;
        this.filterArray = this.fulldetails.filter(function (x) { return x.DeliveryUnit == _this.cluster; });
    };
    ReportsComponent.prototype.onChange = function (eve) {
        this.filterPipe = new _shared_daterangefilter_pipe__WEBPACK_IMPORTED_MODULE_4__["DaterangefilterPipe"]();
        this.filterArray = this.filterPipe.transform(this.filterArray, eve);
    };
    ReportsComponent.prototype.clear = function () {
        this.filterArray = this.reporArray;
        this.TravelStatus = '';
        this.dateRange = '';
        this.cluster = '';
    };
    ReportsComponent.prototype.exportexcel = function () {
        var wsss;
        var fileName = 'Sheet1.xlsx';
        var wb = xlsx__WEBPACK_IMPORTED_MODULE_6__["utils"].book_new();
        var ws = xlsx__WEBPACK_IMPORTED_MODULE_6__["utils"].json_to_sheet(this.filterArray);
        xlsx__WEBPACK_IMPORTED_MODULE_6__["utils"].book_append_sheet(wb, ws, 'Sheet1');
        this.filterArray.forEach(function (element) {
            if (element.travelAdvanceArray.length > 0) {
                var wsss_1 = xlsx__WEBPACK_IMPORTED_MODULE_6__["utils"].json_to_sheet(element.travelAdvanceArray);
            }
            xlsx__WEBPACK_IMPORTED_MODULE_6__["utils"].book_append_sheet(wb, wsss, 'Sheet2');
        });
        xlsx__WEBPACK_IMPORTED_MODULE_6__["writeFile"](wb, this.fileName);
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], ReportsComponent.prototype, "reportStatus", void 0);
    ReportsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-reports',
            template: __webpack_require__(/*! ./reports.component.html */ "./src/app/reports/reports.component.html"),
            styles: [__webpack_require__(/*! ./reports.component.css */ "./src/app/reports/reports.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_5__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]])
    ], ReportsComponent);
    return ReportsComponent;
}());



/***/ }),

/***/ "./src/app/shared/TravelCost.ts":
/*!**************************************!*\
  !*** ./src/app/shared/TravelCost.ts ***!
  \**************************************/
/*! exports provided: TravelCost */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TravelCost", function() { return TravelCost; });
var TravelCost = /** @class */ (function () {
    function TravelCost() {
        this.Card = 0.0;
        this.Cash = 0.0;
        this.Amount = 0.0;
    }
    return TravelCost;
}());



/***/ }),

/***/ "./src/app/shared/adminUse.ts":
/*!************************************!*\
  !*** ./src/app/shared/adminUse.ts ***!
  \************************************/
/*! exports provided: AdminUse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdminUse", function() { return AdminUse; });
var AdminUse = /** @class */ (function () {
    function AdminUse() {
    }
    return AdminUse;
}());

// export class Trobj  {
//     FromCity: any;
//     ToCity: any;
//     date: Date;
//     time: any;
//     mode: any;
//     vendorName: any;
//     ticketStatus: any;
//     ticketIssue: Date;
//     amountPaid: any;
//     Refund: any;
//     invoiceNo: any;
//     invoiceDate: Date;
//     departureDate: Date;
//     actualDate: Date;
//     Provider: any;
//     Action: any;
//     Cost: number;
// }


/***/ }),

/***/ "./src/app/shared/costUpdate.ts":
/*!**************************************!*\
  !*** ./src/app/shared/costUpdate.ts ***!
  \**************************************/
/*! exports provided: CostUpdate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostUpdate", function() { return CostUpdate; });
var CostUpdate = /** @class */ (function () {
    function CostUpdate() {
    }
    return CostUpdate;
}());



/***/ }),

/***/ "./src/app/shared/daterangefilter.pipe.ts":
/*!************************************************!*\
  !*** ./src/app/shared/daterangefilter.pipe.ts ***!
  \************************************************/
/*! exports provided: DaterangefilterPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DaterangefilterPipe", function() { return DaterangefilterPipe; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);



var DaterangefilterPipe = /** @class */ (function () {
    function DaterangefilterPipe() {
    }
    DaterangefilterPipe.prototype.transform = function (users, userDate) {
        var filteredArray = new Array();
        if (users && users.length && userDate.length === 2) {
            var startDate_1 = new Date(moment__WEBPACK_IMPORTED_MODULE_2__(userDate[0]).format('MM-DD-YYYY'));
            var endDate_1 = new Date(moment__WEBPACK_IMPORTED_MODULE_2__(userDate[1]).format('MM-DD-YYYY'));
            var sc = new Date(moment__WEBPACK_IMPORTED_MODULE_2__(users[0].RequestedDate).format('MM-DD-YYYY'));
            // tslint:disable-next-line: max-line-length
            filteredArray = users.filter(function (x) { return new Date(moment__WEBPACK_IMPORTED_MODULE_2__(x.RequestedDate).format('MMM-DD-YYYY')) >= startDate_1 && new Date(moment__WEBPACK_IMPORTED_MODULE_2__(x.RequestedDate).format('MMM-DD-YYYY')) <= endDate_1; });
            // filteredArray = users.filter(x => moment(x.scheduledDate).format('DD-MMM-YYYY') >= startDate && moment(x.scheduledDate).format('DD-MMM-YYYY') <= endDate);
            return filteredArray;
        }
        else {
            return users;
        }
    };
    DaterangefilterPipe = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
            name: 'daterangefilter'
        })
    ], DaterangefilterPipe);
    return DaterangefilterPipe;
}());



/***/ }),

/***/ "./src/app/shared/guard/auth.guard.ts":
/*!********************************************!*\
  !*** ./src/app/shared/guard/auth.guard.ts ***!
  \********************************************/
/*! exports provided: AuthGuard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthGuard", function() { return AuthGuard; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _info_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../info.service */ "./src/app/shared/info.service.ts");




var AuthGuard = /** @class */ (function () {
    function AuthGuard(router, infoService) {
        this.router = router;
        this.infoService = infoService;
    }
    AuthGuard.prototype.canActivate = function () {
        if (this.infoService.isAdmin) {
            return true;
        }
        this.router.navigate(['/']);
        return false;
    };
    AuthGuard = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _info_service__WEBPACK_IMPORTED_MODULE_3__["InfoService"]])
    ], AuthGuard);
    return AuthGuard;
}());



/***/ }),

/***/ "./src/app/shared/info.service.ts":
/*!****************************************!*\
  !*** ./src/app/shared/info.service.ts ***!
  \****************************************/
/*! exports provided: InfoService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InfoService", function() { return InfoService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var sp_pnp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sp-pnp-js */ "./node_modules/sp-pnp-js/lib/pnp.js");
/* harmony import */ var sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(sp_pnp_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_4__);





// import { IItem } from "sp-pnp-js/core/";
//import { CurrentUser } from 'sp-pnp-js/lib/sharepoint/siteusers';

var InfoService = /** @class */ (function () {
    function InfoService() {
        var _this = this;
        this.DateFormate = "DD-MM-YYYY";
        this.DependentsArray = [];
        this.TravelArray = [];
        this.TraveldetailsArray = [];
        this.resultObj = {};
        this.Current = {
            functional_reporting_to: "",
            EmployeeID: "",
            EmployeeName: "",
            Department: "",
            Designation: "",
            BusinessUnit: "",
            DeliveryUnit: "",
            Gender: "Male",
            Age: 0,
            DOB: "",
            MailID: "",
            BaseLocation: "",
        };
        this.GetIds = [];
        this.GetByTravelDependId = [];
        this.Hrinf = [];
        this.names = [];
        this.dept = [];
        this.Versions = [];
        this.TravelApprovalArray = [];
        this.GetArray = [];
        this.GetRoute = [];
        this.GetDependent = [];
        this.GetCostArray = [];
        this.VersionsView = [];
        this.DependentsAll = [];
        this.TravelArrayEdit = [];
        this.TraveldetailsById = {};
        this.VersionsViewRoute = [];
        this.GetRoutesArray = [];
        this.AdvanceDetailsArrays = [];
        this.GetPrevious = [];
        this.proxy = [];
        this.DobSetting = [];
        this.info = [];
        this.VersionsViewPrevious = [];
        this.Traveldetails = [];
        this.TravelApproval = [];
        this.proxyobj = [];
        this.GetCancellist = [];
        this.DefaultProjectUser = [];
        this.TravelProjectArrays = [];
        this.Traveldependentsdetails = [];
        this.Opentrue = false;
        this.Rescheduledtrue = false;
        this.Cancelledtrue = false;
        this.Bookedtrue = false;
        this.RescheduleRequestedtrue = false;
        this.CancellationRequestedtrue = false;
        this.ProjectListDetails = [];
        this.DependentsDetailsArrays = [];
        this.ticketArray = [];
        this.filteredArray = [];
        this.mainCostArray = [];
        this.filteredCostArray = [];
        this.filteredDependentArray = [];
        this.travelRequestDetails = [];
        this.cluster = [];
        this.travelAdvanceArray = [];
        this.visaRejectionComments = [];
        this.TravelCategory = [
            { Id: 1, name: "Project Delivery", department_type_name: "DELIVERY" },
            { Id: 2, name: "Delivery Management", department_type_name: "" },
            { Id: 3, name: "Business Development", department_type_name: "" },
            { Id: 4, name: "Delivery Support", department_type_name: "" },
            { Id: 5, name: "Dependent Travel", department_type_name: "" },
        ];
        this.TravelPurpose = [
            { Id: 1, TCId: 1, name: "Project Deployment" },
            { Id: 2, TCId: 1, name: "Project Release" },
            { Id: 3, TCId: 1, name: "Onsite / Offshore Movement" },
            { Id: 4, TCId: 1, name: "Visa Renewal" },
            { Id: 5, TCId: 1, name: "Professional Development / Training" },
            { Id: 6, TCId: 1, name: "Personal Emergency" },
            { Id: 7, TCId: 2, name: "Customer Governance" },
            { Id: 8, TCId: 2, name: "Escalation Management" },
            { Id: 9, TCId: 2, name: "Customer Engagement" },
            { Id: 10, TCId: 2, name: "Project Audit" },
            { Id: 11, TCId: 2, name: "Delivery Impact" },
            { Id: 12, TCId: 3, name: "Opportunity Conversion" },
            { Id: 13, TCId: 3, name: "Customer Engagement" },
            { Id: 14, TCId: 3, name: "Account Management" },
            { Id: 15, TCId: 3, name: "Conference / Workshops" },
            { Id: 16, TCId: 3, name: "Events / Awards" },
            { Id: 17, TCId: 4, name: "Employee Engagement" },
            { Id: 18, TCId: 4, name: "Performance Management" },
            { Id: 19, TCId: 4, name: "Account Operations Management" },
            { Id: 20, TCId: 4, name: "Infrastructure Management" },
            { Id: 21, TCId: 4, name: "Visa & Immigration" },
            { Id: 22, TCId: 4, name: "Accommodation Management" },
            { Id: 23, TCId: 4, name: "Training / Workshop / Orientation" },
            { Id: 24, TCId: 4, name: "Recruitment" },
            { Id: 25, TCId: 4, name: "Recreation" },
            { Id: 26, TCId: 4, name: "Legal & Compliance" },
            { Id: 27, TCId: 4, name: "Financial Auditing" },
            { Id: 28, TCId: 4, name: "Vendor & Procurement Management" },
            { Id: 29, TCId: 5, name: "Dependent Travel" },
        ];
        this.Action = [
            { Id: 1, name: "Booking", key: "Booked" },
            { Id: 2, name: "Reschedule", key: "Rescheduled" },
            { Id: 3, name: "Cancel", key: "Cancelled" },
        ];
        this.TravelMode = [
            { Id: 1, name: "Bus" },
            { Id: 2, name: "Train" },
            { Id: 3, name: "Flight" },
            { Id: 4, name: "Not Applicable" },
        ];
        this.TravelStatus = [
            { Id: 1, name: "Open" },
            { Id: 2, name: "Booked" },
            { Id: 3, name: "Cancelled" },
            { Id: 3, name: "Rescheduled" },
        ];
        this.Proof = [
            { name: "Aadhaar Number", key: "AadhaarNumber" },
            { name: "Driving License", key: "DrivingLicense" },
            { name: "Voter Identity", key: "VoterIdentity" },
            { name: "PAN Number", key: "PANNumber" },
        ];
        this.DeviationReason = [];
        this.CancelArrayDelivery = [];
        this.CancelArrayNonDelivery = [];
        this.commentArray = [];
        this.RescheduleArray = [];
        this.RescheduleNonArray = [];
        this.DomesticRescheduleArray = [];
        this.DomesticRescheduleNonArray = [];
        this.commentsnon = [];
        this.Meal = [{ name: "Veg" }, { name: "Non-Veg" }];
        this.TypeofVisa = [
            { name: "Work Visa" },
            { name: "Business Visa" },
            { name: "Visit Visa" },
            { name: "On Arrival Visa" },
            { name: "Return to home country visa" },
        ];
        this.VisaProcessTypeofVisa = [
            { name: "Work Visa" },
            { name: "Business Visa" },
            { name: "Visit Visa" },
        ];
        this.DependentTypeofVisa = [
            { name: "Work Visa" },
            { name: "Business Visa" },
            { name: "Visit Visa" },
            { name: "On Arrival Visa" },
            { name: "Dependent Visa" },
            { name: "Return to home country visa" },
        ];
        this.VisaStatus = [
            { name: "Submitted" },
            { name: "Obtained" },
            { name: "On-arrival" },
            { name: "Return to home country" }
        ];
        this.VisaProcessVisaStatus = [
            { name: "Obtained" },
            { name: "Rejected" }
        ];
        this.DependentsVisaStatus = [
            { name: "Obtained" },
            { name: "On-arrival" },
            { name: "Return to home country" }
        ];
        this.AirWay = [
            { name: "AMERICAN AIRLINES" },
            { name: "AIR CANADA" },
            { name: "AIR FRANCE" },
            { name: "AIR INDIA" },
            { name: "BRITISH AIRWAYS" },
            { name: "CATHAY PACIFIC" },
            { name: "DELTA AIRLINES" },
            { name: "EMIRATES" },
            { name: "ETHIOPIAN AIRLINE" },
            { name: "ETIHAD AIRWAYS" },
            { name: "GULF AIR" },
            { name: "KLM ROYAL DUTCH" },
            { name: "KUWAIT AIRWAYS" },
            { name: "LUFTHANSA" },
            { name: "SILKAIR" },
            { name: "MALAYSIA AIRLINES" },
            { name: "AIR MAURITIUS" },
            { name: "QATAR AIRWAYS" },
            { name: "ROYAL JORDANIAN" },
            { name: "SINGAPORE AIRLINES" },
            { name: "SAUDI ARABIAN AIRLINE" },
            { name: "THAI AIRWAYS" },
            { name: "TURKISH AIRLINES" },
            { name: "UNITED AIRLINES" },
            { name: "SRILANKAN AIRLINES" },
            { name: "VIRGIN ATLANTIC" },
            { name: "OMAN AIR" },
            { name: "Malindo Airways" },
            { name: "Vistara" },
            { name: "Indigo" },
            { name: "Spicejet" },
            { name: "Truejet" },
            { name: "Airindia Express" },
            { name: "Scoot Airways" },
            { name: "Salam Air" },
            { name: "Jet Blue" },
            { name: "GO AIR" },
            { name: "Others" },
        ];
        this.VendorInfo = [
            { id: 1, name: "INTERNATIONAL TRAVEL HOUSE LIMITED" },
            { id: 2, name: "YATRA ONLINE PVT LTD" },
            { id: 3, name: "RIYA BUSINESS TRAVEL" },
            { id: 4, name: "CORPORATE CARD" },
            { id: 5, name: "NOT APPLICABLE" },
        ];
        this.TimeArray = [
            { id: 1, name: "12 Midnight – 6 AM" },
            { id: 2, name: "6 AM – 12 Noon" },
            { id: 3, name: "12 Noon – 6 PM" },
            { id: 4, name: "6 PM – 12 Midnight" },
            { id: 5, name: "No Preference" },
        ];
        setTimeout(function () {
            _this.GetCurrentUser();
        }, 1000);
    }
    // Current: any = {};
    InfoService.prototype.GetCurrentUser = function (cb) {
        var _this = this;
        this.ProxyEmail = this.getLocalStorage("ProxyEmail");
        sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("hr_employee_info")
                .items.select("Title,GUID,OU,functional_reporting_to,full_name,department,designation,business_unit,cluster,base_location,gender,dob,maveric_email_id,cost_center")
                // .filter(`substringof('${name}',maveric_email_id)`)
                .filter("maveric_email_id eq '" + r.Email + "'")
                .top(1)
                .get()
                .then(function (result) {
                _this.actualUserId = result[0].Title;
                return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.siteUsers
                    .getByEmail(result[0].maveric_email_id)
                    .groups.get()
                    .then(function (groupsData) {
                    var isAdmin = groupsData.filter(function (obj) { return obj.Title === "Admins"; });
                    _this.isAdmin = isAdmin.length > 0 ? true : false;
                });
            });
            var name = r.UserPrincipalName;
            // this.SetUserType(r.UserPrincipalName);
            if (_this.ProxyEmail != null || _this.ProxyEmail != undefined) {
                name = _this.ProxyEmail;
            }
            // name = "balajip@maveric-systems.com";
            // name = "abhinandna@maveric-systems.com";
            // name = "ashokkumart@maveric-systems.com";
            _this.SetUserType(name);
            _this.getComments();
            return (sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("hr_employee_info")
                .items.select("Title,GUID,OU,functional_reporting_to,full_name,department,designation,business_unit,cluster,base_location,gender,dob,maveric_email_id,cost_center")
                // .filter(`substringof('${name}',maveric_email_id)`)
                .filter("maveric_email_id eq '" + name + "'")
                .top(1)
                .get()
                .then(function (res) {
                if (res.length > 0) {
                    _this.Current.EmployeeID = res[0].Title;
                    _this.Current.EmployeeName = res[0].full_name;
                    _this.Current.Department = res[0].department;
                    _this.Current.Designation = res[0].designation;
                    _this.Current.FullBusinessUnit = res[0].business_unit;
                    _this.Current.FullDeliveryUnit = res[0].cluster;
                    if (res[0].OU) {
                        var units = res[0].OU.split("-");
                        if (units && units.length > 0) {
                            _this.Current.DeliveryUnit = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["last"])(units);
                            _this.Current.BusinessUnit = units.length > 1 ? units[units.length - 2] : "";
                        }
                    }
                    // this.Current.BusinessUnit = res[0].business_unit;
                    // this.Current.DeliveryUnit = res[0].OU;
                    _this.Current.BaseLocation = res[0].base_location;
                    _this.Current.Gender = res[0].gender;
                    _this.Current.Age = _this.CalculateAge(res[0].dob);
                    _this.Current.DOB = new Date(res[0].dob);
                    _this.Current.MailID = res[0].maveric_email_id;
                    _this.Current.functional_reporting_to =
                        res[0].functional_reporting_to;
                    _this.Current.CostCenter = res[0].cost_center;
                    _this.Current.OU = res[0].OU;
                    // this.GetTravelProfileDetails();
                    if (cb)
                        cb(_this.Current);
                }
                else {
                    // alert("User Profile not availabe")
                }
            }));
        });
        //return this.CurrentUser;
    };
    InfoService.prototype.getComments = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Comments")
            .items.select("Comments", "TypeName")
            .filter("Is_Active eq 1")
            .getAll()
            .then(function (res) {
            _this.DeviationReason = res.filter(function (data) { return data.TypeName === "Deviation"; }).map(function (item) { return item.Comments; });
            _this.CancelArrayDelivery = res.filter(function (data) { return data.TypeName === "ProjectTravelCancellation"; }).map(function (item) { return item.Comments; });
            _this.CancelArrayNonDelivery = res.filter(function (data) { return data.TypeName === "NonProjectTravelCancellation"; }).map(function (item) { return item.Comments; });
            _this.commentArray = res.filter(function (data) { return data.TypeName === "ProjectTravelRejection"; }).map(function (item) { return item.Comments; });
            _this.commentsnon = res.filter(function (data) { return data.TypeName === "NonProjectTravelRejection"; }).map(function (item) { return item.Comments; });
            _this.RescheduleArray = res.filter(function (data) { return data.TypeName === "INProjectTravelReschedule"; }).map(function (item) { return item.Comments; });
            _this.RescheduleNonArray = res.filter(function (data) { return data.TypeName === "INNonProjectTravelReschedule"; }).map(function (item) { return item.Comments; });
            _this.DomesticRescheduleArray = res.filter(function (data) { return data.TypeName === "DomProjectTravelReschedule"; }).map(function (item) { return item.Comments; });
            _this.DomesticRescheduleNonArray = res.filter(function (data) { return data.TypeName === "DomNonProjectTravelReschedule"; }).map(function (item) { return item.Comments; });
            _this.visaRejectionComments = res.filter(function (data) { return data.TypeName === "VisaRejection"; }).map(function (item) { return item.Comments; });
        });
    };
    InfoService.prototype.ProxyUserObject = function (mail) {
        var _this = this;
        // var id = String(EmployeeID);
        return (sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("hr_employee_info")
            .items.select("Title,GUID,is_active,functional_reporting_to,full_name,department,designation,business_unit,cluster,base_location,gender,dob,maveric_email_id")
            // .filter("Title eq " + id).top(1).get().then((res: any) => {
            // .filter(`substringof('${mail}',maveric_email_id)`)
            .filter("maveric_email_id eq '" + mail + "'")
            .getAll()
            .then(function (res) {
            return (_this.proxyobj = res);
        }));
    };
    InfoService.prototype.ProxyUser = function (EmployeeID) {
        var _this = this;
        var id = String(EmployeeID);
        return (sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("hr_employee_info")
            .items.select("Title,GUID,is_active,functional_reporting_to,full_name,department,designation,business_unit,cluster,base_location,gender,dob,maveric_email_id")
            // .filter(`substringof('${EmployeeID}',Title)`)
            .filter("Title eq '" + EmployeeID + "'")
            .getAll()
            .then(function (res) {
            return (_this.proxy = res);
        }));
    };
    InfoService.prototype.DobSet = function (EmployeeID) {
        var _this = this;
        var id = String(EmployeeID);
        return (sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("hr_employee_info")
            .items.select("Title,GUID,functional_reporting_to,full_name,department,designation,business_unit,cluster,base_location,gender,dob,maveric_email_id")
            // .filter("Title eq " + id).top(1).get().then((res: any) => {
            .filter("substringof('" + EmployeeID + "',Title)")
            .getAll()
            .then(function (res) {
            return (_this.DobSetting = res);
        }));
    };
    InfoService.prototype.GetGUID = function (Id) {
        var _this = this;
        // var id = String(Id);
        return (sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("hr_employee_info")
            .items.select("ID,id,Title,GUID")
            // .filter("Title eq " + id).top(1).get().then((res: any) => {
            .filter("substringof('" + Id + "',ID)")
            .getAll()
            .then(function (res) {
            return (_this.GetGUIDList = res);
        }));
    };
    InfoService.prototype.GetLocation = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            // .getByTitle("hr_employee_location")
            .getByTitle("TravelCityName")
            .items.select("location,ID,country,country_id,region,region_id")
            .filter("is_active eq 1")
            .getAll()
            .then(function (res) {
            if (res.length > 0) {
                return (_this.LocationArray = res);
            }
            else {
                return _this.LocationArray;
            }
        });
    };
    InfoService.prototype.GetHrInfo = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("hr_employee_info")
            .items.select("ID,Title,department,full_name,Id,maveric_email_id,functional_reporting_to")
            .getAll()
            .then(function (res) {
            if (res.length > 0) {
                return (_this.Hrinf = res);
            }
            else {
                return _this.Hrinf;
            }
        });
    };
    InfoService.prototype.GetCurrency = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("travel_m_currency")
            .items.select("id,currency_types,travel_allow_cash,travel_allow_card")
            .filter("is_active eq 1")
            .getAll()
            .then(function (res) {
            if (res.length > 0) {
                return (_this.GetCurrencyType = res);
            }
            else {
                return _this.Hrinf;
            }
        });
    };
    InfoService.prototype.GetDepertName = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("hr_department")
            .items.select("Department_name,department_type_name")
            .getAll()
            .then(function (res) {
            if (res.length > 0) {
                return (_this.dept = res);
            }
            else {
                return _this.dept;
            }
        });
    };
    InfoService.prototype.GetBookingNames = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("project_names")
            .items.select("clientname__c,clientprismcode__c ,ID,project_id,deliverymanagerprismcode__c,technicalpartnerprismcode__c,accountmanagerprismcode__c,projectoraclecode__c,project_name,projectdepartmentname__c,ProjectBUOACode_c,ProjectBUName__c,ProjectOrg_Str_name__c,ProjectOrgPrismID_Str__c,ProjectOrg_id__c,Project_department_type__c,Additional_project_location_pris,cust_prj_client_classification__,Additional_project_location_id_c,Project_Location_1__c,Project_Location_Prism_code__c,cust_prj_location__c,Project_Location__c,locationid,region_name__c,cust_prj_category__c,cust_projectbillingtype__c,cust_prj_engagement_type,cost_centerid,cost_center_name__c,Project_stage_name__c,project_stageid,projectdepartmentprismcode__c,Cust_Department_Name__c")
            .getAll()
            .then(function (res) {
            if (res.length > 0) {
                return (_this.names = res);
            }
            else {
                return _this.names;
            }
        });
    };
    // GetDefaultProjectUser(): any {
    //   return pnp.sp.web.lists
    //     .getByTitle('project_user_default_project').items.select('Title,record_id,employeename__c,employeeprismcode__c,cust_benchproject__c,default_project_name_c,modifieddatetime__c')
    //     .getAll().then((res) => {
    //       // .filter("employeeprismcode__c eq '" + this.Current.EmployeeID + "'").getAll().then((res) => {
    //       // return this.DefaultProjectUser = res;
    //       this.DefaultProjectUser = [];
    //       res.forEach(element => {
    //         if (element.employeeprismcode__c == this.Current.EmployeeID) {
    //           this.DefaultProjectUser.push(element);
    //         }
    //       });
    //       return this.DefaultProjectUser = res;
    //       // if (res.length > 0) {
    //       //   return this.DefaultProjectUser = res;
    //       // } else {
    //       //   return this.DefaultProjectUser = res;
    //       // }
    //     });
    // }
    InfoService.prototype.GetDefaultProjectUser = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("project_user_default_project")
            .items.select("Title,record_id,employeename__c,employeeprismcode__c,cust_benchproject__c,default_project_name_c,modifieddatetime__c")
            .getAll()
            .then(function (res) {
            // .filter("employeeprismcode__c eq '" + this.Current.EmployeeID + "'").getAll().then((res) => {
            return (_this.DefaultProjectUser = res);
        });
    };
    InfoService.prototype.GetTravelRequestFull = function (isViewTicket) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.select("id,Title,GUID,ReportingDate,EmployeeID,EmployeeName,TravelPurpose,TravelType,TravelStatus,Project,projectoraclecode__c")
            .getAll()
            .then(function (res) {
            var data = lodash__WEBPACK_IMPORTED_MODULE_3__["reverse"](res);
            if (isViewTicket) {
                data = data.filter(function (item) { return item.TravelStatus === "Travel Approved" || item.TravelStatus === "Booked" || item.TravelStatus === "Reschedule Approved" || item.TravelStatus === "Rescheduled" || item.TravelStatus === "Cancellation Requested" || item.TravelStatus === "Cancelled"; });
            }
            return data && data.length > 0 ? data : [];
        });
    };
    InfoService.prototype.GetDependents = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            var name = _this.Current.MailID;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("Dependents")
                .items.select("id,Title,GivenName,SurName,PassportNo,DOBPassport,PassportExpiryDate,Gender,Relationship")
                .filter("substringof('" + name + "',Title)")
                .getAll()
                .then(function (res) {
                res.forEach(function (element) {
                    element.DepndPassportExpDate = new Date(element.PassportExpiryDate);
                    element.DepndPassportExpDate = element.DepndPassportExpDate.setMonth(element.DepndPassportExpDate.getMonth() - 6);
                });
                if (res.length > 0) {
                    return (_this.DependentsArray = res);
                }
                else {
                    return (_this.DependentsArray = res);
                }
            });
        });
    };
    InfoService.prototype.GetDependentsById = function (Title) {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            // let name = this.Current.MailID;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("Dependents")
                .items.select("id,Title,GivenName,SurName,PassportNo,DOBPassport,PassportExpiryDate,Gender,Relationship")
                .filter("substringof('" + Title + "',Title)")
                .getAll()
                .then(function (res) {
                res.forEach(function (element) {
                    element.DepndPassportExpDate = new Date(element.PassportExpiryDate);
                    element.DepndPassportExpDate = element.DepndPassportExpDate.setMonth(element.DepndPassportExpDate.getMonth() - 6);
                });
                if (res.length > 0) {
                    return (_this.DependentsAll = res);
                }
                else {
                    return _this.DependentsAll;
                }
            });
        });
    };
    InfoService.prototype.GetProjectoid = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            var name = _this.Current.EmployeeID.toString();
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("project_booking")
                .items.select("id,ID,bookingprojectoaid__c,bookedresourceprismcode__c,deploymentdate__c,enddate__c,cust_resb_prj_location__c,booking_typeid,bookingtype_name__c,b_project_billing_type__c")
                .filter("bookedresourceprismcode__c eq '" + name + "'")
                .getAll()
                .then(function (res) {
                return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("project_user_default_project")
                    .items.select("Title,record_id,employeename__c,employeeprismcode__c,cust_benchproject__c,default_project_name_c,modifieddatetime__c")
                    .filter("employeeprismcode__c eq '" + name + "'")
                    .getAll()
                    .then(function (respone) {
                    // .filter("employeeprismcode__c eq '" + this.Current.EmployeeID + "'").getAll().then((res) => {
                    // return this.DefaultProjectUser = respone;
                    if (respone.length > 0) {
                        respone.forEach(function (element) {
                            res.push({
                                bookedresourceprismcode__c: element.employeeprismcode__c,
                                bookingprojectoaid__c: element.cust_benchproject__c,
                                deploymentdate__c: new Date(1990, 1, 1),
                                enddate__c: new Date(2050, 1, 1),
                            });
                        });
                    }
                    return (_this.projectoaidlist = res);
                });
            });
        });
    };
    InfoService.prototype.GetProject = function (EmployeeID) {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("project_booking")
            .items.select("id,ID,bookingprojectoaid__c,bookedresourceprismcode__c")
            .filter("bookedresourceprismcode__c eq '" + EmployeeID + "'")
            .getAll()
            .then(function (res) {
            return (_this.projectoaidlist = res);
        });
    };
    InfoService.prototype.GetByDependentsId = function (Id) {
        var _this = this;
        var Id = Id;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            var name = r.UserPrincipalName;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("Dependents")
                .items.getById(Id)
                .select("id,Title,GivenName,SurName,PassportNo,DOBPassport,PassportExpiryDate,Gender,Relationship")
                .get()
                .then(function (res) {
                if (res) {
                    return (_this.GetByIdDependentArray = res);
                }
                else {
                    return _this.GetByIdDependentArray;
                }
            });
        });
    };
    InfoService.prototype.getCostDetails = function (CostId) {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelCost")
            .items.select("id,SegmentId,From,To,Title,CostFor,TravelCost,AgentCost,TotalCost,Remarks,TravelTicketNoId,Created,Modified,EditorId,Author/Title,Flight")
            .expand("Author")
            .filter("TravelTicketNoId eq " + CostId)
            .getAll()
            .then(function (res) {
            if (res) {
                return (_this.GetCostArray = res);
            }
            else {
                return _this.GetCostArray;
            }
        });
    };
    InfoService.prototype.TravelRequestRejectedUpdateVersion = function (Objects) {
        var Id = Objects.Id;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Route")
            .items.getById(Id)
            .update(Objects)
            .then(function (res) {
            return res.item;
        });
    };
    InfoService.prototype.GetAllVersions = function (VerId) {
        var _this = this;
        var list = sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists.getByTitle("TravelRequest");
        var item = list.items.getById(VerId);
        return item.versions
            .expand("Versions")
            .get()
            .then(function (response) {
            return (_this.VersionsView = response);
        });
    };
    InfoService.prototype.GetAllVersionsPrevious = function (VerId) {
        var _this = this;
        var list = sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists.getByTitle("Route");
        var item = list.items.orderBy("Created", true).getById(VerId);
        return item.versions
            .expand("Versions")
            .get()
            .then(function (res) {
            return (_this.VersionsViewPrevious = res);
        });
    };
    InfoService.prototype.GetAllVersionsRoute = function (VerIdRoute) {
        var _this = this;
        var list = sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists.getByTitle("Route");
        var item = list.items.orderBy("Created", true).getById(VerIdRoute);
        return item.versions
            .expand("Versions")
            .get()
            .then(function (res) {
            return (_this.VersionsViewRoute = res);
        });
    };
    InfoService.prototype.method = function (Ide) {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Route")
            .items.getById(Ide)
            .versions.expand("Versions")
            .get()
            .then(function (res) {
            return (_this.VersionsViewRoute = res);
        });
    };
    InfoService.prototype.Previousmethod = function (ReferenceId) {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Route")
            .items.select("Id,Title,TravelTicketNoId,TicketStatus,Form,To,TravelDate,FirstPreferance,SecondPreferance,ReferenceLeg,ArrivalDate")
            .filter("Id eq " + ReferenceId)
            .getAll()
            .then(function (result) {
            _this.GetPrevious = result;
            return _this.GetPrevious;
        });
    };
    InfoService.prototype.GetRouteCancel = function (Id) {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Route")
            .items.select("Id,Title,TravelTicketNoId,TicketStatus,Form,To,TravelDate,FirstPreferance,SecondPreferance,ReferenceLeg,ArrivalDate")
            .filter("TravelTicketNoId eq " + Id)
            .getAll()
            .then(function (results) {
            _this.GetCancellist = results;
            return _this.GetCancellist;
        });
    };
    InfoService.prototype.getCluster = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("hr_employee_info")
                .items.select("cluster")
                .getAll()
                .then(function (res) {
                res.forEach(function (element) {
                    if (element.cluster != null) {
                        _this.cluster.push(element.cluster);
                    }
                });
                return _this.cluster;
            });
        });
    };
    InfoService.prototype.GetTravelRequestReport = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelRequest")
                .items.select("clientname__c,projectoraclecode__c,Created,Id,EmployeeID,EmployeeName,Department,Designation,BusinessUnit,DeliveryUnit,BaseLocation,Project,TravelCategory,ApprovalAuthority,ApproversSuperior,TravelApprover,ReportingDate,TravelPurpose,TravelMeal,AccommodationRequired,ClientDebit,AdvanceRequired,TravelType,VisaStatus,TripType,TypeofVisa,VisaValidTill,DeviationReason,Travel_x0020_For,TravelStatus,IsProjectTravel,VisaNo,Remarks,TravelDeskRemarks,Form,To,TravelMode,InvoiceNo,InvoiceDate,VendorName,FileName, ClientDebitFileName")
                .getAll()
                .then(function (res) {
                var travelReqestArray = res;
                var data = lodash__WEBPACK_IMPORTED_MODULE_3__["reverse"](travelReqestArray);
                _this.travelRequestDetails = data;
                data.forEach(function (element) {
                    element.RequestedDate = moment__WEBPACK_IMPORTED_MODULE_4__(element.Created).format('DD-MMM-YYYY');
                    element.AdvanceRequired = element.AdvanceRequired === false ? 'No' : 'Yes';
                    element.ClientDebit = element.ClientDebit === true ? 'Yes' : 'No';
                    element.IsProjectTravel = element.IsProjectTravel === true ? 'Yes' : 'No';
                    element.AccommodationRequired = element.IsProjectTravel === true ? 'Yes' : 'No';
                    element.FileName === null ? 'Nil' : JSON.parse(element.FileName).forEach(function (el) {
                        element.FileName = el.FileName;
                    });
                    element.FromCity = element.Form;
                    element.ToCity = element.To;
                    element.RejectionReason = element.Remarks;
                    element.ProjectId = element.projectoraclecode__c;
                    element.TravelFor = element.Travel_x0020_For;
                    element.ClientName = element.clientname__c;
                    element.VisaValidTill = moment__WEBPACK_IMPORTED_MODULE_4__(element.VisaValidTill).format('DD-MMM-YYYY');
                    element.InvoiceDate = moment__WEBPACK_IMPORTED_MODULE_4__(element.InvoiceDate).format('DD-MMM-YYYY');
                    element.ReportingDate = moment__WEBPACK_IMPORTED_MODULE_4__(element.ReportingDate).format('DD-MMM-YYYY');
                    delete element.Form;
                    delete element.To;
                    delete element.projectoraclecode__c;
                    delete element.Travel_x0020_For;
                    delete element.clientname__c;
                    delete element.ID;
                    delete element.Created;
                    return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("Route")
                        .items.select("id,Title,TravelTicketNoId,TicketStatus,Form,To,TravelDate,FirstPreferance,SecondPreferance,ActualDate,ArrivalDate")
                        .filter("TravelTicketNoId eq " + element.Id)
                        .getAll()
                        .then(function (routeArray) {
                        routeArray.forEach(function (ele) {
                            data.forEach(function (element) {
                                if (element.Id == ele.TravelTicketNoId) {
                                    element.OnwardDate = moment__WEBPACK_IMPORTED_MODULE_4__(routeArray[0].ActualDate).format('DD-MMM-YYYY');
                                    routeArray[0].ActualDate,
                                        element.ReturnDate = moment__WEBPACK_IMPORTED_MODULE_4__(routeArray[routeArray.length - 1].ActualDate).format('DD-MMM-YYYY');
                                    element.FirstPreferance = routeArray[0].FirstPreferance;
                                    element.SecondPreferance = routeArray[routeArray.length - 1].SecondPreferance;
                                }
                            });
                        });
                    });
                });
                // this.getTravelCost().then((res) => {
                // })
                // this.getDependentTravelByTicketId().then((res) => {
                // })
                return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("TravelAdvance")
                    .items.select("id,TravelTicketNoId,Title,Currency,Card,Cash,Amount")
                    .get()
                    .then(function (travelAdvanceArray) {
                    data.forEach(function (el) {
                        var newarr = travelAdvanceArray.filter(function (x) { return x.TravelTicketNoId === el.Id; });
                        el.travelAdvanceArray = newarr;
                        // if (newarr.length) {
                        //   this.travelAdvanceArray.push(...newarr);
                        //   this.filteredArray.push(newarr)
                        // }
                    });
                    // data.forEach(element => {
                    // })
                    // for (let i = 0; i < this.filteredArray.length; i++) {
                    //   this.filteredArray[i].forEach((el, index) => {
                    //     data.forEach(element => {
                    //       if (element.Id == el.TravelTicketNoId) {
                    //         element[`Currency ${index + 1}`] = el.Currency;
                    //         element[`Cash ${index + 1}`] = el.Cash;
                    //         element[`Card ${index + 1}`] = el.Card
                    //       }
                    //     });
                    //   });
                    // }
                    var obj = {
                        fullTravelDetails: data,
                        travelAdvance: _this.travelAdvanceArray
                    };
                    return obj;
                });
            });
        });
    };
    InfoService.prototype.getTravelCost = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelCost")
            .items.select("CostFor,TravelCost,AgentCost,TotalCost,Remarks,TravelTicketNoId,Flight")
            .get()
            .then(function (travelCostArray) {
            _this.travelRequestDetails.forEach(function (el) {
                var newarr = travelCostArray.filter(function (x) { return x.TravelTicketNoId === el.Id; });
                el.travelCostArray = newarr;
                // if (newarr.length) {
                //   this.filteredCostArray.push(newarr)
                // }
            });
            // for (let i = 0; i < this.filteredCostArray.length; i++) {
            //   let TotalCost = 0
            //   this.filteredCostArray[i].forEach((el, index) => {
            //     this.travelRequestDetails.forEach(element => {
            //       if (element.Id == el.TravelTicketNoId) {
            //         if (el.CostFor === "Reschedule" || el.CostFor === "Booking" || el.CostFor === "Cancel") {
            //           TotalCost += +el.TotalCost
            //           element.TotalCost = TotalCost
            //           element[`CostFor ${index + 1}`] = el.CostFor
            //           element[`AgentCost ${index + 1}`] = el.AgentCost
            //           element[`TravelCost ${index + 1}`] = el.TravelCost
            //         }
            //       }
            //     });
            //   });
            // }
            return _this.travelRequestDetails;
        });
    };
    InfoService.prototype.getDependentTravelByTicketId = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelDependents")
            .items.select("id,TravelTicketNoId,Title,GivenName,SurName,PassportNo,DOBPassport,PassportExpiryDate,Gender,Relationship")
            .get()
            .then(function (dependentArray) {
            _this.travelRequestDetails.forEach(function (el) {
                var newarr = dependentArray.filter(function (x) { return x.TravelTicketNoId === el.Id; });
                if (newarr.length) {
                    _this.filteredDependentArray.push(newarr);
                }
            });
            for (var i = 0; i < _this.filteredDependentArray.length; i++) {
                _this.filteredDependentArray[i].forEach(function (el, index) {
                    _this.travelRequestDetails.forEach(function (element) {
                        if (element.Id == el.TravelTicketNoId) {
                            element["Name " + (index + 1)] = el.GivenName;
                            element["SurName " + (index + 1)] = el.SurName;
                            element["Gender " + (index + 1)] = el.Gender;
                            element["Relationship " + (index + 1)] = el.Relationship;
                        }
                    });
                });
            }
        });
    };
    InfoService.prototype.GetTravelRequestById = function (Ide) {
        var _this = this;
        var Ide = Ide;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            // let name = r.UserPrincipalName;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelRequest")
                .items.select("CancellationComments,CostCenterOrCluster,clientname__c,clientprismcode__c,projectoraclecode__c,id,Title,GUID,EmployeeID,EmployeeName,Department,Designation,BusinessUnit,DeliveryUnit,Gender,Age,BaseLocation,Project,TravelCategory,ApprovalAuthority,ApproversSuperior,TravelApprover,ReportingDate,TravelPurpose,Mobile,TravelMeal,AccommodationRequired,ClientDebit,AdvanceRequired,GivenName,TravelType,SurName,PassportNo,PassportExpiryDate,VisaStatus,IdentityProof,IDProofNumber,TripType,TypeofVisa,VisaValidTill,DateofBirth,DeviationReason,TravelStatus,TicketStatus,IsProjectTravel,IsDeviationRequest,VisaNo,Cost,Remarks,TravelDeskRemarks,Form,To,TravelMode,InvoiceNo,InvoiceDate,VendorName,FileName,ClientDebitFileName,Travel_x0020_For")
                .filter("substringof('" + Ide + "',GUID)")
                .getAll()
                .then(function (res) {
                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("VisaValidTill")
                    .items.select("VisaValidTill,TypeOfVisa,VisaNumber,ModifiedOn,TravelTicketNo, ID, GivenName, SurName")
                    .filter("TravelTicketNo eq " + res[0].Id)
                    .getAll()
                    .then(function (result) {
                    res.VisaValidityLog = lodash__WEBPACK_IMPORTED_MODULE_3__["reverse"](result);
                });
                res.forEach(function (element) {
                    if (element.InvoiceDate == null) {
                        element.InvoiceDate = "";
                    }
                    if (element.ReportingDate == null) {
                        element.ReportingDate = "";
                    }
                    if (element.PassportExpiryDate == null) {
                        element.PassportExpiryDate = "";
                    }
                    element.PassportExpDate = element.PassportExpiryDate;
                    if (element.VisaValidTill == null) {
                        element.VisaValidTill = element.VisaValidTill;
                    }
                    if (element.VisaValidTill == "1970-01-01T00:00:00Z") {
                        element.VisaValidTill = element.VisaValidTill;
                    }
                    if (element.VisaValidTill != null) {
                        element.VisaValidTill = new Date(element.VisaValidTill);
                    }
                });
                var ID = res[0].ID;
                return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("Route")
                    .items.orderBy("TravelDate", true)
                    .select("id,Title,TravelTicketNoId,TicketStatus,Form,To,TravelDate,FirstPreferance,SecondPreferance,ReferenceLeg,ActualDate,ArrivalDate")
                    .filter("TravelTicketNoId eq " + ID)
                    .get()
                    .then(function (result) {
                    _this.GetAllVersions(ID);
                    result.forEach(function (element) {
                        if (element.ActualDate == null) {
                            element.ActualDate = element.TravelDate;
                        }
                        if (element.ActualDate == "1970-01-01T00:00:00Z") {
                            element.ActualDate = element.TravelDate;
                        }
                    });
                    _this.GetRoute = result;
                    return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("TravelDependents")
                        .items.select("id,RejectionReason,TravelTicketNoId,Title,GivenName,SurName,VisaValidTill,VisaNumber,TypeofVisa,VisaStatus,PassportNo,DOBPassport,PassportExpiryDate,Gender,Relationship")
                        .filter("TravelTicketNoId eq " + ID)
                        .getAll()
                        .then(function (respon) {
                        respon.forEach(function (element) {
                            element.DepndPassportExpDate = new Date(element.PassportExpiryDate);
                            element.DepndPassportExpDate = element.DepndPassportExpDate.setMonth(element.DepndPassportExpDate.getMonth() - 6);
                        });
                        _this.GetDependent = respon;
                        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                            .getByTitle("TravelAdvance")
                            .items.select("id,TravelTicketNoId,Title,Currency,Card,Cash,Amount")
                            .filter("TravelTicketNoId eq " + ID)
                            .getAll()
                            .then(function (respon) {
                            _this.AdvanceDetails = respon;
                            var list = sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists.getByTitle("TravelRequest");
                            var item = list.items
                                .orderBy("Created", true)
                                .getById(ID);
                            return item.versions
                                .expand("Versions")
                                .get()
                                .then(function (resp) {
                                _this.Versions = resp;
                                return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                    .getByTitle("ClientDebitFiles")
                                    .items.select("Id")
                                    .filter("TravelTicketNo eq " + ID)
                                    .getAll()
                                    .then(function (filesResponse) {
                                    if (filesResponse.length > 0 && filesResponse[0].Id) {
                                        var item_1 = sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                            .getByTitle("ClientDebitFiles")
                                            .items.getById(filesResponse[0].Id);
                                        return item_1.attachmentFiles.get().then(function (filesRes) {
                                            var TravelObject = {
                                                TravelRequest: res[0],
                                                tripDeatilsArray: _this.GetRoute,
                                                DependentAdd: _this.GetDependent,
                                                AdvanceDetails: _this.AdvanceDetails,
                                                TravelProjectList: _this.ProjectListDetails,
                                                Remarks: _this.Versions,
                                                clientDebitFiles: filesResponse[0],
                                                clientDebitSrcFiles: filesRes,
                                            };
                                            return TravelObject;
                                        });
                                    }
                                    else {
                                        var TravelObject = {
                                            TravelRequest: res[0],
                                            tripDeatilsArray: _this.GetRoute,
                                            DependentAdd: _this.GetDependent,
                                            AdvanceDetails: _this.AdvanceDetails,
                                            Remarks: _this.Versions,
                                            TravelProjectList: _this.ProjectListDetails,
                                            clientDebitFiles: [],
                                            clientDebitSrcFiles: [],
                                        };
                                        return TravelObject;
                                    }
                                });
                                // const TravelObject = {
                                //   TravelRequest: res[0],
                                //   tripDeatilsArray: this.GetRoute,
                                //   DependentAdd: this.GetDependent,
                                //   AdvanceDetails: this.AdvanceDetails,
                                //   Remarks: this.Versions,
                                //   VisaValidityLog: res.VisaValidityLog
                                // };
                                // return TravelObject;
                            });
                            // let list = pnp.sp.web.lists.getByTitle('TravelRequest');
                            // let item = list.items.getById(ID).select("Title", "Remarks");
                            // return item.expand('Remarks').get().then((resp) => {
                            //   this.Versions = resp;
                            //   const TravelObject = {
                            //     TravelRequest: res[0],
                            //     tripDeatilsArray: this.GetRoute,
                            //     DependentAdd: this.GetDependent,
                            //     AdvanceDetails: this.AdvanceDetails,
                            //     Remarks: this.Versions
                            //   }
                            //   return TravelObject;
                            // });
                        });
                    });
                });
            });
        });
    };
    InfoService.prototype.GetTravelRequestEditById = function (Ide) {
        var _this = this;
        var Ide = Ide;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            // let name = r.UserPrincipalName;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelRequest")
                .items.select("CostCenterOrCluster,clientname__c,clientprismcode__c,projectoraclecode__c,id,Title,GUID,EmployeeID,EmployeeName,Department,Designation,BusinessUnit,DeliveryUnit,Gender,Age,BaseLocation,Project,TravelCategory,ApprovalAuthority,ApproversSuperior,TravelApprover,ReportingDate,TravelPurpose,Mobile,TravelMeal,AccommodationRequired,ClientDebit,AdvanceRequired,GivenName,TravelType,SurName,PassportNo,PassportExpiryDate,VisaStatus,IdentityProof,IDProofNumber,TripType,TypeofVisa,VisaValidTill,DateofBirth,DeviationReason,TravelStatus,TicketStatus,VisaNo,IsProjectTravel,IsDeviationRequest,Cost,Remarks,TravelDeskRemarks,Form,To,TravelMode,InvoiceNo,InvoiceDate,VendorName,FileName,ClientDebitFileName,Travel_x0020_For")
                .filter("substringof('" + Ide + "',GUID)")
                .getAll()
                .then(function (res) {
                res.forEach(function (element) {
                    if (element.InvoiceDate == null) {
                        element.InvoiceDate = "";
                    }
                    if (element.ReportingDate == null) {
                        element.ReportingDate = "";
                    }
                    if (element.PassportExpiryDate == null) {
                        element.PassportExpiryDate = "";
                    }
                    if (element.VisaValidTill == null) {
                        element.VisaValidTill = element.VisaValidTill;
                    }
                    if (element.VisaValidTill == "1970-01-01T00:00:00Z") {
                        element.VisaValidTill = element.VisaValidTill;
                    }
                    if (element.VisaValidTill != null) {
                        element.VisaValidTill = new Date(element.VisaValidTill);
                    }
                });
                var ID = res[0].ID;
                _this.GetAllVersions(ID);
                return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("Route")
                    .items.orderBy("TravelDate", true)
                    .select("id,Title,TravelTicketNoId,TicketStatus,Form,To,TravelDate,FirstPreferance,SecondPreferance,ReferenceLeg,ActualDate,ArrivalDate")
                    .filter("TravelTicketNoId eq " + ID)
                    .get()
                    .then(function (result) {
                    result.forEach(function (element) {
                        if (element.ActualDate == null) {
                            element.ActualDate = element.TravelDate;
                        }
                        if (element.ActualDate == "1970-01-01T00:00:00Z") {
                            element.ActualDate = element.TravelDate;
                        }
                    });
                    _this.GetRoute = result;
                    return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("TravelDependents")
                        .items.select("id,TravelTicketNoId,Title,GivenName,SurName,VisaValidTill,VisaNumber,TypeofVisa,VisaStatus,PassportNo,DOBPassport,PassportExpiryDate,Gender,Relationship")
                        .filter("TravelTicketNoId eq " + ID)
                        .getAll()
                        .then(function (respone) {
                        respone.forEach(function (element) {
                            element.DepndPassportExpDate = new Date(element.PassportExpiryDate);
                            element.DepndPassportExpDate = element.DepndPassportExpDate.setMonth(element.DepndPassportExpDate.getMonth() - 6);
                        });
                        _this.GetDependent = respone;
                        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                            .getByTitle("TravelAdvance")
                            .items.select("id,TravelTicketNoId,Title,Currency,Card,Cash,Amount")
                            .filter("TravelTicketNoId eq " + ID)
                            .getAll()
                            .then(function (respone) {
                            _this.AdvanceDetails = respone;
                            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                .getByTitle("TravelProject")
                                .items.select("id,TravelTicketNoId,Title,Additional_project_location_id_c,Additional_project_location_pris,Cust_Department_Name__c,ProjectBUName__c,ProjectBUOACode_c,ProjectList,ProjectOrgPrismID_Str__c,ProjectOrg_Str_name__c,ProjectOrg_id__c,Project_Location_1__c,Project_Location_Prism_code__c,Project_Location__c,Project_department_type__c,Project_stage_name__c,cost_center_name__c,cost_centerid,cust_prj_category__c,cust_prj_client_classification__,cust_prj_engagement_type,cust_prj_location__c,cust_projectbillingtype__c,locationid,project_stageid,projectdepartmentname__c,projectdepartmentprismcode__c,region_name__c,projectoraclecode__c")
                                .filter("TravelTicketNoId eq " + ID)
                                .getAll()
                                .then(function (responses) {
                                _this.ProjectListDetails = responses;
                                var list = sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists.getByTitle("TravelRequest");
                                var item = list.items
                                    .orderBy("Created", true)
                                    .getById(ID);
                                return item.versions
                                    .expand("Versions")
                                    .get()
                                    .then(function (res) {
                                    _this.Versions = res;
                                    res.forEach(function (element) {
                                        element.PassportExpDate = element.PassportExpiryDate;
                                    });
                                    return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                        .getByTitle("ClientDebitFiles")
                                        .items.select("Id")
                                        .filter("TravelTicketNo eq " + ID)
                                        .getAll()
                                        .then(function (filesResponse) {
                                        if (filesResponse.length > 0 && filesResponse[0].Id) {
                                            var item_2 = sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                                .getByTitle("ClientDebitFiles")
                                                .items.getById(filesResponse[0].Id);
                                            return item_2.attachmentFiles.get().then(function (filesRes) {
                                                var TravelObject = {
                                                    TravelRequest: res[0],
                                                    tripDeatilsArray: _this.GetRoute,
                                                    DependentAdd: _this.GetDependent,
                                                    AdvanceDetails: _this.AdvanceDetails,
                                                    TravelProjectList: _this.ProjectListDetails,
                                                    Remarks: _this.Versions,
                                                    clientDebitFiles: filesResponse[0],
                                                    clientDebitSrcFiles: filesRes,
                                                };
                                                return TravelObject;
                                            });
                                        }
                                        else {
                                            var TravelObject = {
                                                TravelRequest: res[0],
                                                tripDeatilsArray: _this.GetRoute,
                                                DependentAdd: _this.GetDependent,
                                                AdvanceDetails: _this.AdvanceDetails,
                                                TravelProjectList: _this.ProjectListDetails,
                                                Remarks: _this.Versions,
                                                clientDebitFiles: [],
                                                clientDebitSrcFiles: [],
                                            };
                                            return TravelObject;
                                        }
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    };
    InfoService.prototype.GetByRoutesId = function (Id) {
        var _this = this;
        var Id = Id;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Route")
            .items.select("id,Title,TravelTicketNoId,TicketStatus,Form,To,TravelDate,FirstPreferance,SecondPreferance,ArrivalDate")
            .filter("TravelTicketNoId eq " + Id)
            .getAll()
            .then(function (res) {
            return (_this.GetIds = res);
        });
    };
    InfoService.prototype.UdateDependents = function (Obj) {
        var _this = this;
        var Id = Obj.Id;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            Obj.Title = _this.Current.MailID;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("Dependents")
                .items.getById(Id)
                .update(Obj)
                .then(function (res) {
                return res.item;
            });
        });
    };
    InfoService.prototype.DeleteDependents = function (Ida) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Dependents")
            .items.getById(Ida)
            .delete()
            .then(function (res) {
            return res;
        });
    };
    InfoService.prototype.InsertDependents = function (Obj) {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            Obj.Title = _this.Current.MailID;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("Dependents")
                .items.add(Obj)
                .then(function (res) {
                return res.item;
            });
        });
    };
    InfoService.prototype.GetTravelProfileDetails = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            var name = _this.Current.MailID;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelProfile")
                .items.select("id,Title,PANNumber,AadhaarNumber,VoterIdentity,DrivingLicense,GivenName,SurName,PassportNo,DOBPassport,PassportExpiryDate,Mobile")
                .filter("Title eq '" + name + "'")
                .get()
                .then(function (res) {
                res.forEach(function (element) {
                    if (element.DOBPassport == null) {
                        element.DOBPassport = "";
                    }
                    if (element.PassportExpiryDate == null) {
                        element.PassportExpiryDate = "";
                    }
                    element.PassportExpDate = element.PassportExpiryDate;
                });
                if (res.length > 0) {
                    return (_this.TravelArray = res);
                }
                else {
                    return [];
                }
            });
        });
    };
    InfoService.prototype.GetTravelProfileDetailsEdit = function (Title) {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelProfile")
            .items.select("id,Title,PANNumber,AadhaarNumber,VoterIdentity,DrivingLicense,GivenName,SurName,PassportNo,DOBPassport,PassportExpiryDate,Mobile")
            .filter("substringof('" + Title + "',Title)")
            .get()
            .then(function (res) {
            if (res.length > 0) {
                return (_this.TravelArrayEdit = res);
            }
            else {
                return _this.TravelArrayEdit;
            }
        });
    };
    InfoService.prototype.GetMyTravelDetailsProxy = function (name) {
        var _this = this;
        // return pnp.sp.web.currentUser.get().then((r) => {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.select("id,GUID,Title,ReportingDate,TravelPurpose,TravelType,TravelStatus,Project,IsProjectTravel,projectoraclecode__c")
            .filter("substringof('" + name + "',Title)")
            .getAll()
            .then(function (result) {
            _this.Traveldetails = result;
            var data = lodash__WEBPACK_IMPORTED_MODULE_3__["reverse"](_this.Traveldetails);
            if (data.length > 0) {
                return data;
            }
            else {
                return (_this.Traveldetails = result);
            }
        });
        // });
    };
    InfoService.prototype.GetVisaValiditiesWithProxy = function (name) {
        var _this = this;
        // return pnp.sp.web.currentUser.get().then((r) => {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.select("TypeofVisa,VisaNo,VisaValidTill,id,GUID,Title,ReportingDate,TravelPurpose,TravelType,TravelStatus,Project,IsProjectTravel,projectoraclecode__c")
            .filter("substringof('" + name + "',Title) and VisaValidTill ne null")
            .getAll()
            .then(function (result) {
            _this.Traveldetails = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["uniqBy"])(result, 'VisaValidTill');
            var data = lodash__WEBPACK_IMPORTED_MODULE_3__["reverse"](_this.Traveldetails);
            if (data.length > 0) {
                return data;
            }
            else {
                return (_this.Traveldetails = result);
            }
        });
    };
    InfoService.prototype.GetDependentsProxy = function (name) {
        var _this = this;
        // return pnp.sp.web.currentUser.get().then((r) => {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelDependents")
            .items.select("id,TravelTicketNoId,Title,GivenName,SurName,PassportNo,DOBPassport,PassportExpiryDate,Gender,Relationship")
            .filter("substringof('" + name + "',Title)")
            .get()
            .then(function (result) {
            if (result.length > 0) {
                return (_this.Traveldependentsdetails = result);
            }
            else {
                return (_this.Traveldependentsdetails = result);
            }
        });
        // });
    };
    InfoService.prototype.GetMyTravelDetails = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            var name = _this.Current.MailID;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelRequest")
                .items.select("id,GUID,Title,ReportingDate,TravelPurpose,TravelType,TravelStatus,Project,IsProjectTravel,projectoraclecode__c")
                .filter("substringof('" + name + "',Title)")
                .getAll()
                .then(function (response) {
                _this.TraveldetailsArray = response;
                var data = lodash__WEBPACK_IMPORTED_MODULE_3__["reverse"](_this.TraveldetailsArray);
                if (data.length > 0) {
                    return data;
                }
                else {
                    return (_this.TraveldetailsArray = response);
                }
            });
        });
    };
    InfoService.prototype.GetVisaValidities = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            var name = _this.Current.MailID;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelRequest")
                .items.select("TypeofVisa,VisaNo,VisaValidTill,id,GUID,Title,ReportingDate,TravelPurpose,TravelType,TravelStatus,Project,IsProjectTravel,projectoraclecode__c")
                .filter("substringof('" + name + "',Title) and VisaValidTill ne null")
                .getAll()
                .then(function (response) {
                _this.TraveldetailsArray = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["uniqBy"])(response, 'VisaValidTill');
                var data = lodash__WEBPACK_IMPORTED_MODULE_3__["reverse"](_this.TraveldetailsArray);
                if (data.length > 0) {
                    return data;
                }
                else {
                    return (_this.TraveldetailsArray = response);
                }
            });
        });
    };
    InfoService.prototype.GetMyTravelDetailsById = function (Id) {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.getById(Id)
            .select("id,GUID,Title,ReportingDate,TravelPurpose,TravelType,TravelStatus,Project,IsProjectTravel")
            .get()
            .then(function (res) {
            return (_this.TraveldetailsById = res);
        });
    };
    InfoService.prototype.GetMyApprovalDetailsProxy = function (name) {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.select("id,Title,GUID,EmployeeID,EmployeeName,Form,To,TripType,TravelApprover,ApprovalAuthority,ApproversSuperior,ReportingDate,TravelPurpose,TravelType,TravelStatus,Project,projectoraclecode__c")
            .filter("TravelApprover eq  '" + name + "'")
            .getAll()
            .then(function (response) {
            _this.TravelApproval = response;
            var data = lodash__WEBPACK_IMPORTED_MODULE_3__["reverse"](_this.TravelApproval);
            if (data.length > 0) {
                return data;
            }
            else {
                return (_this.TravelApproval = response);
            }
        });
    };
    InfoService.prototype.GetMyApprovalDetails = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            var name = _this.Current.MailID;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelRequest")
                .items.select("id,Title,GUID,EmployeeID,EmployeeName,Form,To,TripType,TravelApprover,ApprovalAuthority,ApproversSuperior,ReportingDate,TravelPurpose,TravelType,TravelStatus,Project,projectoraclecode__c")
                .filter("TravelApprover eq  '" + name + "'")
                .getAll()
                .then(function (res) {
                _this.TravelApprovalArray = res;
                var data = lodash__WEBPACK_IMPORTED_MODULE_3__["reverse"](_this.TravelApprovalArray);
                if (data.length > 0) {
                    return data;
                }
                else {
                    return (_this.TravelApprovalArray = res);
                }
            });
        });
    };
    InfoService.prototype.InsertTravelProfile = function (Obj) {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            Obj.Title = _this.Current.MailID;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelProfile")
                .items.add(Obj)
                .then(function (res) {
                return res;
            });
        });
    };
    InfoService.prototype.UpdateTravelProfile = function (Obj) {
        var _this = this;
        var TravelId = Obj.Id;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            Obj.Title = _this.Current.MailID;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelProfile")
                .items.getById(TravelId)
                .update(Obj)
                .then(function (res) {
                return res.item;
            });
        });
    };
    InfoService.prototype.TravelRequestApprovedInitialUpdate = function (ReqObj, trackerData) {
        var Id = ReqObj.Id;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.getById(Id)
            .update(ReqObj)
            .then(function (res) {
            // pnp.sp.web.lists
            //   .getByTitle("TravelTicketStatusTracker")
            //   .items.add(trackerData)
            //   .then();
            return res.item;
        });
    };
    InfoService.prototype.TravelRequestApprovedUpdate = function (ReqObj, trackerData) {
        var Id = ReqObj.Id;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.getById(Id)
            .update(ReqObj)
            .then(function (res) {
            // if (trackerData.ActivityPerformed) {
            //   pnp.sp.web.lists
            //     .getByTitle("TravelTicketStatusTracker")
            //     .items.add(trackerData)
            //     .then();
            // }
            return res.item;
        });
    };
    // TravelRequestUpdate(Travelobj: any, Attach: any) {
    //   const Attachment: any[] = Attach.Attachment;
    //   return pnp.sp.web.lists.getByTitle('TravelRequest').items.getById(Travelobj.Id).update(Travelobj).then((response: any) => {
    //     for (let i = 0; i < Attachment.length; i++) {
    //       let v = Attachment[i];
    //       let item = pnp.sp.web.lists.getByTitle("TravelRequest").items.getById(Attach.Id);
    //       item.attachmentFiles.add(v.name, v);
    //     }
    //     return response;
    //   });
    // }
    InfoService.prototype.TravelRequestUpdate = function (Travelobj, Ticket, CostTravelObj, userObj, trackerData) {
        var _this = this;
        return new Promise(function (res, rej) {
            var tripDeatilsArray = Ticket.Trip;
            var CostTravelArray = CostTravelObj.costTravel;
            var Id = Travelobj.Id;
            for (var i = 0; i < tripDeatilsArray.length; i++) {
                if (tripDeatilsArray[i].Actions === "Book") {
                    var Ids = tripDeatilsArray[i].ID;
                    var obj = {
                        TicketStatus: "Booked",
                        ActualDate: tripDeatilsArray[i].ActualDate,
                        ArrivalDate: tripDeatilsArray[i].ArrivalDate
                    };
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("Route")
                        .items.getById(Ids)
                        .update(obj)
                        .then(function (respo) {
                        _this.routerespo = respo;
                        sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                            .getByTitle("Route")
                            .items.select("id,Title,TravelTicketNoId,TicketStatus,Form,To,TravelDate,FirstPreferance,SecondPreferance,ActualDate,ArrivalDate")
                            .filter("TravelTicketNoId eq " + Id)
                            .getAll()
                            .then(function (responses) {
                            _this.GetArray = responses;
                            _this.Opentrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Open"; })
                                    .length > 0;
                            _this.Rescheduledtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Rescheduled"; })
                                    .length > 0;
                            _this.Cancelledtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Cancelled"; })
                                    .length > 0;
                            _this.Bookedtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Booked"; })
                                    .length > 0;
                            _this.RescheduleRequestedtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Reschedule Requested"; }).length > 0;
                            _this.CancellationRequestedtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Cancel Requested"; }).length > 0;
                            var Travel = {
                                TravelStatus: "Booked",
                                TicketStatus: "Open",
                            };
                            if (_this.Opentrue) {
                                Travel.TicketStatus = "Open";
                            }
                            else if (_this.Rescheduledtrue) {
                                Travel.TicketStatus = "Rescheduled";
                            }
                            else if (_this.Cancelledtrue) {
                                Travel.TicketStatus = "Cancelled";
                            }
                            else if (_this.Bookedtrue) {
                                Travel.TicketStatus = "Booked";
                            }
                            var newlyBookedLegs = tripDeatilsArray.filter(function (item) { return item.Actions === "Book" && (item.ReferenceLeg == null || item.ReferenceLeg == undefined); });
                            if (newlyBookedLegs.length === 0) {
                                if (!userObj.isNotBooked) {
                                    Travel.TravelStatus = "Rescheduled";
                                }
                            }
                            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                .getByTitle("TravelRequest")
                                .items.getById(Id)
                                .update(Travel)
                                .then();
                            return responses;
                        });
                    });
                }
                else if (tripDeatilsArray[i].Actions === "Reschedule") {
                    var Ids = tripDeatilsArray[i].ID;
                    var obj = {
                        TicketStatus: "Rescheduled",
                        ActualDate: tripDeatilsArray[i].ActualDate,
                    };
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("Route")
                        .items.getById(Ids)
                        .update(obj)
                        .then(function (resu) {
                        _this.routres = resu;
                        sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                            .getByTitle("Route")
                            .items.select("id,Title,TravelTicketNoId,TicketStatus,Form,To,TravelDate,FirstPreferance,SecondPreferance,ActualDate,ArrivalDate")
                            .filter("TravelTicketNoId eq " + Id)
                            .getAll()
                            .then(function (responses) {
                            _this.GetArray = responses;
                            _this.Opentrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Open"; })
                                    .length > 0;
                            _this.Rescheduledtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Rescheduled"; })
                                    .length > 0;
                            _this.Cancelledtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Cancelled"; })
                                    .length > 0;
                            _this.Bookedtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Booked"; })
                                    .length > 0;
                            _this.RescheduleRequestedtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Reschedule Requested"; }).length > 0;
                            _this.CancellationRequestedtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Cancel Requested"; }).length > 0;
                            var Travel = {
                                TravelStatus: "Rescheduled",
                                TicketStatus: "Open",
                            };
                            if (_this.Opentrue) {
                                Travel.TicketStatus = "Open";
                            }
                            else if (_this.Rescheduledtrue) {
                                Travel.TicketStatus = "Rescheduled";
                            }
                            else if (_this.Cancelledtrue) {
                                Travel.TicketStatus = "Cancelled";
                            }
                            else if (_this.Bookedtrue) {
                                Travel.TicketStatus = "Booked";
                            }
                            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                .getByTitle("TravelRequest")
                                .items.getById(Id)
                                .update(Travel)
                                .then();
                            return responses;
                        });
                    });
                }
                else if (tripDeatilsArray[i].Actions === "Cancel") {
                    var Ids = tripDeatilsArray[i].ID;
                    var obj = {
                        TicketStatus: "Cancelled",
                    };
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("Route")
                        .items.getById(Ids)
                        .update(obj)
                        .then(function (result) {
                        _this.routeresu = result;
                        sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                            .getByTitle("Route")
                            .items.select("id,Title,TravelTicketNoId,TicketStatus,Form,To,TravelDate,FirstPreferance,SecondPreferance,ActualDate,ArrivalDate")
                            .filter("TravelTicketNoId eq " + Id)
                            .getAll()
                            .then(function (responses) {
                            _this.GetArray = responses;
                            _this.Opentrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Open"; })
                                    .length > 0;
                            _this.Rescheduledtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Rescheduled"; })
                                    .length > 0;
                            _this.Cancelledtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Cancelled"; })
                                    .length > 0;
                            _this.Bookedtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Booked"; })
                                    .length > 0;
                            _this.RescheduleRequestedtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Reschedule Requested"; }).length > 0;
                            _this.CancellationRequestedtrue =
                                _this.GetArray.filter(function (e) { return e.TicketStatus == "Cancel Requested"; }).length > 0;
                            var Travel = {
                                TravelStatus: "Cancelled",
                                TicketStatus: "Open",
                            };
                            if (_this.Opentrue) {
                                Travel.TicketStatus = "Open";
                            }
                            else if (_this.Rescheduledtrue) {
                                Travel.TicketStatus = "Rescheduled";
                            }
                            else if (_this.Cancelledtrue) {
                                Travel.TicketStatus = "Cancelled";
                            }
                            else if (_this.Bookedtrue) {
                                Travel.TicketStatus = "Booked";
                            }
                            if (_this.RescheduleRequestedtrue) {
                                userObj.Remarks && userObj.Remarks === 'Visa Delay' ? Travel.TravelStatus = "Reschedule Approved" :
                                    userObj.IsProjectTravel ? Travel.TravelStatus = "Reschedule Requested" : Travel.TravelStatus = "Reschedule Approved";
                            }
                            else if (_this.CancellationRequestedtrue) {
                                Travel.TravelStatus = "Cancellation Requested";
                            }
                            else if (_this.Rescheduledtrue) {
                                var rescheduledTickets = _this.GetArray.filter(function (e) { return e.TicketStatus == "Rescheduled"; });
                                rescheduledTickets.forEach(function (item) {
                                    var rescheduledNewTicket = _this.GetArray.find(function (tkt) { return tkt.ReferenceId == item.Id; });
                                    if (rescheduledNewTicket.TicketStatus == "Booked") {
                                        Travel.TravelStatus = "Rescheduled";
                                        return;
                                    }
                                });
                            }
                            else if (_this.Bookedtrue) {
                                Travel.TravelStatus = "Booked";
                            }
                            else if (_this.Opentrue) {
                                Travel.TravelStatus = "Travel Approved";
                            }
                            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                .getByTitle("TravelRequest")
                                .items.getById(Id)
                                .update(Travel)
                                .then();
                            return responses;
                        });
                    });
                }
            }
            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelRequest")
                .items.getById(Id)
                .update(Travelobj)
                .then(function (response) {
                // if (trackerData) {
                //   pnp.sp.web.lists
                //     .getByTitle("TravelTicketStatusTracker")
                //     .items.add(trackerData)
                //     .then();
                // }
                if (CostTravelArray.length > 0) {
                    for (var i = 0; i < CostTravelArray.length; i++) {
                        sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                            .getByTitle("TravelCost")
                            .items.add(CostTravelArray[i])
                            .then(function (respon) {
                            if (respon) {
                                res(true);
                            }
                            else {
                                res(false);
                            }
                        });
                    }
                }
                else {
                    res(true);
                }
            })
                .catch(function (error) {
                res(false);
            });
        });
    };
    InfoService.prototype.CostAdd = function (costObj) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelCost")
            .items.add(costObj)
            .then(function (res) {
            return res;
        });
    };
    InfoService.prototype.CostUpdates = function (costObj) {
        var Id = costObj.TravelTicketNoId;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelCost")
            .items.getById(Id)
            .update(costObj)
            .then(function (res) {
            return res;
        });
    };
    InfoService.prototype.TravelRequestBookedUpdate = function (Travelobj, RouteObj) {
        var _this = this;
        var Id = Travelobj.Id;
        var Idr = RouteObj.Id;
        RouteObj.TicketStatus = "Booked";
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Route")
            .items.getById(Idr)
            .update(RouteObj)
            .then(function (result) {
            _this.CostResponse = result;
            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("Route")
                .items.select("id,Title,TravelTicketNoId,TicketStatus,Form,To,TravelDate,FirstPreferance,SecondPreferance,ActualDate,ArrivalDate")
                .filter("TravelTicketNoId eq " + Id)
                .getAll()
                .then(function (res) {
                _this.GetArray = res;
                Travelobj.TicketStatus = "Open";
                if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Cancelled"; })
                    .length == _this.GetArray.length) {
                    Travelobj.TravelStatus = "Cancelled";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Rescheduled"; })
                    .length == _this.GetArray.length) {
                    Travelobj.TravelStatus = "Rescheduled";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Rescheduled"; })
                    .length > 0) {
                    Travelobj.TravelStatus = "Rescheduled";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Open"; }).length ==
                    0 &&
                    (_this.GetArray.filter(function (e) { return e.TicketStatus == "Cancel Requested"; })
                        .length > 0 ||
                        _this.GetArray.filter(function (e) { return e.TicketStatus == "Reschedule Requested"; }).length > 0)) {
                    Travelobj.TravelStatus = "Booked";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Open"; }).length == 0) {
                    Travelobj.TravelStatus = "Booked";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Open"; }).length > 0) {
                    // Travelobj.TravelStatus = "Travel Approved";
                    Travelobj.TicketStatus = "Partially Booked";
                }
                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("TravelRequest")
                    .items.getById(Id)
                    .update(Travelobj)
                    .then(function (response) {
                    return response;
                });
                return res;
            });
            return result;
        });
    };
    InfoService.prototype.TravelRequestRescheduleUpdates = function (Travelobj, RouteObj) {
        var _this = this;
        var Id = Travelobj.Id;
        var Idr = RouteObj.Id;
        RouteObj.TicketStatus = "Rescheduled";
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Route")
            .items.getById(Idr)
            .update(RouteObj)
            .then(function (result) {
            _this.CostResponse = result;
            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("Route")
                .items.select("id,Title,TravelTicketNoId,TicketStatus,Form,To,TravelDate,FirstPreferance,SecondPreferance,ActualDate,ArrivalDate")
                .filter("TravelTicketNoId eq " + Id)
                .getAll()
                .then(function (res) {
                _this.GetArray = res;
                Travelobj.TicketStatus = "Open";
                if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Cancelled"; })
                    .length == _this.GetArray.length) {
                    Travelobj.TravelStatus = "Cancelled";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Rescheduled"; })
                    .length == _this.GetArray.length) {
                    Travelobj.TravelStatus = "Rescheduled";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Rescheduled"; })
                    .length > 0) {
                    Travelobj.TravelStatus = "Rescheduled";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Open"; }).length == 0) {
                    Travelobj.TravelStatus = "Booked";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Open"; }).length > 0) {
                    // Travelobj.TravelStatus = "Reschedule Approved";
                    Travelobj.TicketStatus = "Partially Booked";
                }
                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("TravelRequest")
                    .items.getById(Id)
                    .update(Travelobj)
                    .then(function (response) {
                    return response;
                });
                return res;
            });
            return result;
        });
    };
    InfoService.prototype.TravelRequestCancelUpdatetion = function (Travelobj, RouteObj) {
        var _this = this;
        var Id = Travelobj.Id;
        var Idr = RouteObj.Id;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Route")
            .items.getById(Idr)
            .update(RouteObj)
            .then(function (result) {
            _this.CostResponse = result;
            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("Route")
                .items.select("id,Title,TravelTicketNoId,TicketStatus,Form,To,TravelDate,FirstPreferance,SecondPreferance,ArrivalDate")
                .filter("TravelTicketNoId eq " + Id)
                .getAll()
                .then(function (res) {
                _this.GetArray = res;
                Travelobj.TicketStatus = "Open";
                if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Cancelled"; })
                    .length == _this.GetArray.length) {
                    Travelobj.TravelStatus = "Cancelled";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Rescheduled"; })
                    .length == _this.GetArray.length) {
                    Travelobj.TravelStatus = "Rescheduled";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Rescheduled"; })
                    .length > 0) {
                    Travelobj.TravelStatus = "Rescheduled";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Open"; }).length ==
                    0 &&
                    (_this.GetArray.filter(function (e) { return e.TicketStatus == "Cancel Requested"; })
                        .length > 0 ||
                        _this.GetArray.filter(function (e) { return e.TicketStatus == "Reschedule Requested"; }).length > 0)) {
                    Travelobj.TravelStatus = "Booked";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Open"; }).length == 0) {
                    Travelobj.TravelStatus = "Booked";
                    Travelobj.TicketStatus = "Completed";
                }
                else if (_this.GetArray.filter(function (e) { return e.TicketStatus == "Open"; }).length > 0) {
                    // Travelobj.TravelStatus = "Cancellation Requested";
                    Travelobj.TicketStatus = "Partially Booked";
                }
                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("TravelRequest")
                    .items.getById(Id)
                    .update(Travelobj)
                    .then(function (response) {
                    return response;
                });
                return res;
            });
            return result;
        });
    };
    InfoService.prototype.TravelRequestCancelUpdate = function (Obj) {
        var Id = Obj.Id;
        var Idr = Obj.Trobj.Id;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("Route")
                .items.getById(Idr)
                .update(Obj.Trobj)
                .then(function (res) {
                delete Obj.Trobj;
                return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("TravelRequest")
                    .items.getById(Id)
                    .update(Obj)
                    .then(function (res) {
                    return res.item;
                });
            });
        });
    };
    InfoService.prototype.TravelTicketUpdate = function (Obj) {
        var Ida = Obj.AttachId;
        var files = Obj.fileToUpload;
        var item = sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists.getByTitle("TravelRequest").items.getById(Ida);
        return item.attachmentFiles.add(files.name, files).then(function (res) {
            return res;
        });
    };
    InfoService.prototype.GetTravelTicket = function (AtaId) {
        // let item = pnp.sp.web.lists.getByTitle("TravelRequest").items.select("Id,Title,Attachments,AttachmentFiles,Created,Modified")
        // .expand("AttachmentFiles")
        // .filter("Id eq " + AtaId)
        // return item.get().then(res => {
        //   return res;
        var item = sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.getById(AtaId);
        return item.attachmentFiles.get().then(function (res) {
            res.forEach(function (element) {
                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web
                    .getFileByServerRelativeUrl(element.ServerRelativeUrl)
                    .get()
                    .then(function (response) {
                    element.CreatedTime = response.TimeCreated;
                });
            });
            return res;
        });
    };
    InfoService.prototype.DeleteTicket = function (DelObj) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var DelId, Names, item;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                switch (_a.label) {
                    case 0:
                        DelId = DelObj.delId;
                        Names = DelObj.delname;
                        return [4 /*yield*/, sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                .getByTitle("TravelRequest")
                                .items.getById(DelId)];
                    case 1:
                        item = _a.sent();
                        return [4 /*yield*/, item.attachmentFiles.getByName(Names).delete()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    InfoService.prototype.TravelRequestRejectedUpdation = function (Obj, trackerData) {
        var Id = Obj.Id;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelRequest")
                .items.getById(Id)
                .update(Obj)
                .then(function (res) {
                // pnp.sp.web.lists
                //   .getByTitle("TravelTicketStatusTracker")
                //   .items.add(trackerData)
                //   .then();
                return res;
            });
        });
    };
    InfoService.prototype.TravelRequestRejectedUpdate = function (Obj, RouteObj) {
        var Id = Obj.Id;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.getById(Id)
            .update(Obj)
            .then(function (res) {
            for (var i = 0; i < RouteObj.tripDeatilsArray.length; i++) {
                // delete RouteObj.tripDeatilsArray[i].fromDisable;
                // delete RouteObj.tripDeatilsArray[i].toDisable;
                // delete RouteObj.tripDeatilsArray[i].TravelDateDisable;
                // delete RouteObj.tripDeatilsArray[i].ID;
                // delete RouteObj.tripDeatilsArray[i].IsCurrentVersion;
                // delete RouteObj.tripDeatilsArray[i].Id;
                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("Route")
                    .items.getById(RouteObj.tripDeatilsArray[i].Id)
                    .update(RouteObj.tripDeatilsArray[i]);
            }
            return res;
        });
    };
    InfoService.prototype.CancelRequested = function (obj, trackerData) {
        var ObjId = obj.Id;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.getById(ObjId)
            .update(obj)
            .then(function (res) {
            // pnp.sp.web.lists
            // .getByTitle("TravelTicketStatusTracker")
            // .items.add(trackerData)
            // .then();
            return res;
        });
    };
    InfoService.prototype.CancelRequestedRoute = function (Data, trackerData) {
        var Id = Data.Id;
        for (var i = 0; i < Data.Route.length; i++) {
            if (Data.Route[i].TicketStatus === "Cancelled") {
            }
            else {
                var Ids = Data.Route[i].ID;
                var obj = {
                    TicketStatus: "Cancel Requested",
                };
                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists.getByTitle("Route").items.getById(Ids).update(obj);
            }
        }
        delete Data.Route;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.getById(Id)
            .update(Data)
            .then(function (res) {
            // pnp.sp.web.lists
            // .getByTitle("TravelTicketStatusTracker")
            // .items.add(trackerData)
            // .then();
            return res.item;
        });
        // }
    };
    InfoService.prototype.NewTravelRequestInsert = function (travelObj, clientDebitFiles) {
        var _this = this;
        delete travelObj.resultObj.DOB;
        delete travelObj.resultObj.functional_reporting_to;
        delete travelObj.resultObj.PassportExpDate;
        // delete travelObj.resultObj.MailID;
        travelObj.resultObj.Title = travelObj.resultObj.MailID;
        delete travelObj.resultObj.MailID;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            var name = _this.Current.MailID;
            travelObj.resultObj.TravelStatus = "Pending Approval";
            travelObj.resultObj.TicketStatus = "Open";
            travelObj.resultObj.Form = travelObj.tripDeatilsArray[0].Form;
            travelObj.resultObj.To = travelObj.tripDeatilsArray[0].To;
            travelObj.resultObj.projectoraclecode__c = travelObj.TravelProjectList[0].projectoraclecode__c;
            if (travelObj.resultObj.DeviationReason == undefined ||
                travelObj.resultObj.DeviationReason == null ||
                travelObj.resultObj.DeviationReason == "") {
                travelObj.resultObj.TravelApprover =
                    travelObj.resultObj.ApprovalAuthority;
                travelObj.resultObj.IsDeviationRequest = false;
            }
            else {
                travelObj.resultObj.TravelApprover =
                    travelObj.resultObj.ApproversSuperior;
                travelObj.resultObj.IsDeviationRequest = true;
            }
            if (!travelObj.resultObj.IsProjectTravel) {
                travelObj.resultObj.TravelApprover =
                    travelObj.resultObj.ApprovalAuthority;
            }
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelRequest")
                .items.add(travelObj.resultObj)
                .then(function (res) {
                var ID = res.data.ID;
                travelObj.trackerData.TravelTicketNo = ID;
                // pnp.sp.web.lists
                //   .getByTitle("TravelTicketStatusTracker")
                //   .items.add(travelObj.trackerData)
                //   .then();
                if (travelObj.resultObj.TravelType === "International") {
                    if (travelObj.resultObj.Travel_x0020_For !== 'Dependent') {
                        sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                            .getByTitle("VisaValidTill")
                            .items.add({
                            "VisaValidTill": travelObj.resultObj.VisaValidTill,
                            "TravelTicketNo": ID,
                            "TypeOfVisa": travelObj.resultObj.TypeofVisa,
                            "VisaNumber": travelObj.resultObj.VisaNo,
                            "ModifiedOn": new Date(),
                            "GivenName": travelObj.resultObj.GivenName,
                            "SurName": travelObj.resultObj.SurName
                        }).then();
                    }
                    if (travelObj.resultObj.Travel_x0020_For !== 'Self') {
                        travelObj.DependentAdd.forEach(function (dependent) {
                            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                .getByTitle("VisaValidTill")
                                .items.add({
                                "VisaValidTill": dependent.VisaValidTill,
                                "TravelTicketNo": ID,
                                "TypeOfVisa": dependent.TypeofVisa,
                                "VisaNumber": dependent.VisaNumber,
                                "ModifiedOn": new Date(),
                                "GivenName": dependent.GivenName,
                                "SurName": dependent.SurName
                            }).then();
                        });
                    }
                }
                for (var i = 0; i < travelObj.tripDeatilsArray.length; i++) {
                    delete travelObj.tripDeatilsArray[i].fromDisable;
                    delete travelObj.tripDeatilsArray[i].toDisable;
                    delete travelObj.tripDeatilsArray[i].TravelDateDisable;
                    delete travelObj.tripDeatilsArray[i].ID;
                    delete travelObj.tripDeatilsArray[i].Id;
                    delete travelObj.tripDeatilsArray[i].Actions;
                    travelObj.tripDeatilsArray[i].TravelTicketNoId = ID;
                    travelObj.tripDeatilsArray[i].ActualDate =
                        travelObj.tripDeatilsArray[i].TravelDate;
                    travelObj.tripDeatilsArray[i].TicketStatus = "Open";
                    travelObj.tripDeatilsArray[i].Title = travelObj.resultObj.Title;
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("Route")
                        .items.add(travelObj.tripDeatilsArray[i])
                        .then();
                }
                for (var i = 0; i < travelObj.DependentAdd.length; i++) {
                    delete travelObj.DependentAdd[i].Selected;
                    delete travelObj.DependentAdd[i].ID;
                    delete travelObj.DependentAdd[i].Id;
                    travelObj.DependentAdd[i].Title = travelObj.resultObj.Title;
                    travelObj.DependentAdd[i].TravelTicketNoId = ID;
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("TravelDependents")
                        .items.add(travelObj.DependentAdd[i])
                        .then();
                }
                for (var i = 0; i < travelObj.AdvanceDetails.length; i++) {
                    delete travelObj.AdvanceDetails[i].carddisable;
                    delete travelObj.AdvanceDetails[i].cashdisable;
                    travelObj.AdvanceDetails[i].Title = travelObj.resultObj.Title;
                    travelObj.AdvanceDetails[i].TravelTicketNoId = ID;
                    travelObj.AdvanceDetails[i].Card = travelObj.AdvanceDetails[i].Card.toString();
                    travelObj.AdvanceDetails[i].Cash = travelObj.AdvanceDetails[i].Cash.toString();
                    travelObj.AdvanceDetails[i].Amount = travelObj.AdvanceDetails[i].Amount.toString();
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("TravelAdvance")
                        .items.add(travelObj.AdvanceDetails[i])
                        .then();
                }
                for (var i = 0; i < travelObj.TravelProjectList.length; i++) {
                    delete travelObj.TravelProjectList[i].clientname__c;
                    delete travelObj.TravelProjectList[i].clientprismcode__c;
                    delete travelObj.TravelProjectList[i].accountmanagerprismcode__c;
                    delete travelObj.TravelProjectList[i].deliverymanagerprismcode__c;
                    delete travelObj.TravelProjectList[i].technicalpartnerprismcode__c;
                    delete travelObj.TravelProjectList[i].project_id;
                    delete travelObj.TravelProjectList[i].project_name;
                    delete travelObj.TravelProjectList[i].ID;
                    delete travelObj.TravelProjectList[i].Id;
                    travelObj.TravelProjectList[i].Title = travelObj.resultObj.Title;
                    travelObj.TravelProjectList[i].TravelTicketNoId = ID;
                    // travelObj.TravelProjectList[i].project_id = travelObj.TravelProjectList[i].project_id.toString();
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("TravelProject")
                        .items.add(travelObj.TravelProjectList[i])
                        .then();
                }
                if (clientDebitFiles.length > 0) {
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("ClientDebitFiles")
                        .items.add({ "TravelTicketNo": ID.toString() })
                        .then(function (result) {
                        // clientDebitFiles.forEach((files) => {
                        var item = sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists.getByTitle("ClientDebitFiles").items.getById(result.data.ID);
                        item.attachmentFiles.addMultiple(clientDebitFiles).then();
                        // });
                    });
                }
                return res.data.ID;
            });
        });
    };
    InfoService.prototype.NewTravelRequestEdit = function (travelObj, removableFiles, newFiles) {
        var _this = this;
        delete travelObj.Remarks;
        delete travelObj.TravelRequest;
        delete travelObj.resultObj;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            var name = _this.Current.MailID;
            travelObj.EditsObjects.TravelStatus = "Pending Approval";
            travelObj.EditsObjects.TicketStatus = "Open";
            travelObj.EditsObjects.Form = travelObj.tripDeatilsArray[0].Form;
            travelObj.EditsObjects.To = travelObj.tripDeatilsArray[0].To;
            for (var i = 0; i < travelObj.tripDeatilsArray.length; i++) {
                delete travelObj.tripDeatilsArray[i].isPasswordExpireInSixMnt;
                delete travelObj.tripDeatilsArray[i].DependSixMnt;
            }
            if (travelObj.TravelProjectList.length > 0 && (travelObj.TravelProjectList[0].projectoraclecode__c == undefined ||
                travelObj.TravelProjectList[0].projectoraclecode__c == null)) {
                travelObj.EditsObjects.projectoraclecode__c =
                    travelObj.TravelProjectList[0].projectoraclecode__c;
            }
            if (travelObj.EditsObjects.DeviationReason == undefined ||
                travelObj.EditsObjects.DeviationReason == null ||
                travelObj.EditsObjects.DeviationReason == "") {
                travelObj.EditsObjects.TravelApprover =
                    travelObj.EditsObjects.ApprovalAuthority;
                travelObj.EditsObjects.IsDeviationRequest = false;
            }
            else {
                travelObj.EditsObjects.TravelApprover =
                    travelObj.EditsObjects.ApproversSuperior;
                travelObj.EditsObjects.IsDeviationRequest = true;
            }
            if (!travelObj.EditsObjects.IsProjectTravel) {
                travelObj.EditsObjects.TravelApprover = travelObj.EditsObjects.ApprovalAuthority;
            }
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelRequest")
                .items.getById(travelObj.EditsObjects.ID)
                .update(travelObj.EditsObjects)
                .then(function (res) {
                // pnp.sp.web.lists
                //   .getByTitle("TravelTicketStatusTracker")
                //   .items.add(travelObj.trackerData)
                //   .then();
                if (travelObj.IsVisaValidityUpdated == true && travelObj.EditsObjects.TravelType == "International") {
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("VisaValidTill")
                        .items.add({
                        "VisaValidTill": travelObj.EditsObjects.VisaValidTill,
                        "TravelTicketNo": travelObj.EditsObjects.ID,
                        "TypeOfVisa": travelObj.EditsObjects.TypeofVisa,
                        "VisaNumber": travelObj.EditsObjects.VisaNo,
                        "ModifiedOn": new Date(),
                        "GivenName": travelObj.EditsObjects.GivenName,
                        "SurName": travelObj.EditsObjects.SurName,
                    }).then();
                }
                if (travelObj.changedDependentsVisa.length > 0 && travelObj.EditsObjects.TravelType == "International") {
                    travelObj.changedDependentsVisa.forEach(function (dependent) {
                        sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                            .getByTitle("VisaValidTill")
                            .items.add({
                            "VisaValidTill": dependent.VisaValidTill,
                            "TravelTicketNo": travelObj.EditsObjects.ID,
                            "TypeOfVisa": dependent.TypeofVisa,
                            "VisaNumber": dependent.VisaNumber,
                            "ModifiedOn": new Date(),
                            "GivenName": dependent.GivenName,
                            "SurName": dependent.SurName,
                        }).then();
                    });
                }
                return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("Route")
                    .items.select("id,Title,TravelTicketNoId,TicketStatus,Form,To,TravelDate,FirstPreferance,SecondPreferance,ArrivalDate")
                    .filter("TravelTicketNoId eq " + travelObj.EditsObjects.ID)
                    .getAll()
                    .then(function (result) {
                    _this.GetRoutesArray = result;
                    for (var i = 0; i < _this.GetRoutesArray.length; i++) {
                        var IdA = _this.GetRoutesArray[i].ID;
                        sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                            .getByTitle("Route")
                            .items.getById(IdA)
                            .delete();
                    }
                    for (var i = 0; i < travelObj.tripDeatilsArray.length; i++) {
                        delete travelObj.tripDeatilsArray[i].fromDisable;
                        delete travelObj.tripDeatilsArray[i].toDisable;
                        delete travelObj.tripDeatilsArray[i].TravelDateDisable;
                        delete travelObj.tripDeatilsArray[i].ID;
                        delete travelObj.tripDeatilsArray[i].Id;
                        // delete travelObj.tripDeatilsArray[i].Actions;
                        travelObj.tripDeatilsArray[i].TravelTicketNoId =
                            travelObj.EditsObjects.ID;
                        travelObj.tripDeatilsArray[i].ActualDate =
                            travelObj.tripDeatilsArray[i].TravelDate;
                        travelObj.tripDeatilsArray[i].TicketStatus = "Open";
                        travelObj.tripDeatilsArray[i].Title =
                            travelObj.EditsObjects.Title;
                        sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                            .getByTitle("Route")
                            .items.add(travelObj.tripDeatilsArray[i]);
                    }
                    return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("TravelAdvance")
                        .items.select("id,TravelTicketNoId,Title,Currency,Card,Cash,Amount")
                        .filter("TravelTicketNoId eq " + travelObj.EditsObjects.ID)
                        .getAll()
                        .then(function (respone) {
                        _this.AdvanceDetailsArrays = respone;
                        for (var i = 0; i < _this.AdvanceDetailsArrays.length; i++) {
                            var IdA = _this.AdvanceDetailsArrays[i].ID;
                            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                .getByTitle("TravelAdvance")
                                .items.getById(IdA)
                                .delete();
                        }
                        for (var i = 0; i < travelObj.AdvanceDetails.length; i++) {
                            delete travelObj.AdvanceDetails[i].carddisable;
                            delete travelObj.AdvanceDetails[i].cashdisable;
                            delete travelObj.AdvanceDetails[i].Actions;
                            travelObj.AdvanceDetails[i].Title =
                                travelObj.EditsObjects.Title;
                            travelObj.AdvanceDetails[i].TravelTicketNoId =
                                travelObj.EditsObjects.ID;
                            travelObj.AdvanceDetails[i].Card = travelObj.AdvanceDetails[i].Card.toString();
                            travelObj.AdvanceDetails[i].Cash = travelObj.AdvanceDetails[i].Cash.toString();
                            travelObj.AdvanceDetails[i].Amount = travelObj.AdvanceDetails[i].Amount.toString();
                            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                .getByTitle("TravelAdvance")
                                .items.add(travelObj.AdvanceDetails[i]);
                        }
                        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                            .getByTitle("TravelDependents")
                            .items.select("id,TravelTicketNoId,Title,GivenName,SurName,VisaValidTill,VisaNumber,TypeofVisa,VisaStatus,PassportNo,DOBPassport,PassportExpiryDate,Gender,Relationship")
                            .filter("TravelTicketNoId eq " + travelObj.EditsObjects.ID)
                            .getAll()
                            .then(function (responedepend) {
                            _this.DependentsDetailsArrays = responedepend;
                            for (var i = 0; i < _this.DependentsDetailsArrays.length; i++) {
                                var IdA = _this.DependentsDetailsArrays[i].ID;
                                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                    .getByTitle("TravelDependents")
                                    .items.getById(IdA)
                                    .delete();
                            }
                            for (var j = 0; j < travelObj.DependentAdd.length; j++) {
                                delete travelObj.DependentAdd[j].ID;
                                delete travelObj.DependentAdd[j].Id;
                                if (travelObj.DependentAdd[j].Selected != null ||
                                    travelObj.DependentAdd[j].Selected != undefined ||
                                    travelObj.DependentAdd[j].Selected != "") {
                                    delete travelObj.DependentAdd[j].Selected;
                                    delete travelObj.DependentAdd[j].DepndPassportExpDate;
                                }
                                else {
                                }
                                travelObj.DependentAdd[j].Title =
                                    travelObj.EditsObjects.Title;
                                travelObj.DependentAdd[j].TravelTicketNoId =
                                    travelObj.EditsObjects.ID;
                                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                    .getByTitle("TravelDependents")
                                    .items.add(travelObj.DependentAdd[j])
                                    .then();
                            }
                            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                .getByTitle("TravelProject")
                                .items.select("id,TravelTicketNoId,Title")
                                .filter("TravelTicketNoId eq " + travelObj.EditsObjects.ID)
                                .getAll()
                                .then(function (respo) { return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                                var i, Idp, i, item, obj, obj, obj;
                                var _this = this;
                                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                                    this.TravelProjectArrays = respo;
                                    for (i = 0; i < this.TravelProjectArrays.length; i++) {
                                        Idp = this.TravelProjectArrays[i].ID;
                                        sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                            .getByTitle("TravelProject")
                                            .items.getById(Idp)
                                            .delete();
                                    }
                                    for (i = 0; i < travelObj.TravelProjectList.length; i++) {
                                        delete travelObj.TravelProjectList[i]
                                            .accountmanagerprismcode__c;
                                        delete travelObj.TravelProjectList[i]
                                            .deliverymanagerprismcode__c;
                                        delete travelObj.TravelProjectList[i]
                                            .technicalpartnerprismcode__c;
                                        delete travelObj.TravelProjectList[i].project_id;
                                        delete travelObj.TravelProjectList[i].project_name;
                                        delete travelObj.TravelProjectList[i].ID;
                                        delete travelObj.TravelProjectList[i].Id;
                                        travelObj.TravelProjectList[i].Title =
                                            travelObj.EditsObjects.Title;
                                        travelObj.TravelProjectList[i].TravelTicketNoId =
                                            travelObj.EditsObjects.ID;
                                        // travelObj.TravelProjectList[i].project_id = travelObj.TravelProjectList[i].project_id.toString();
                                        sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                            .getByTitle("TravelProject")
                                            .items.add(travelObj.TravelProjectList[i])
                                            .then();
                                    }
                                    if (travelObj.EditsObjects.ClientDebit === "true" || travelObj.EditsObjects.ClientDebit === true) {
                                        if (removableFiles.length > 0 || newFiles.length > 0) {
                                            if (removableFiles.length > 0) {
                                                removableFiles.forEach(function (name) { return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                                                    var item;
                                                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0: return [4 /*yield*/, sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                                                    .getByTitle("ClientDebitFiles")
                                                                    .items.getById(travelObj.clientDebitFiles.Id)];
                                                            case 1:
                                                                item = _a.sent();
                                                                return [4 /*yield*/, item.attachmentFiles.getByName(name).delete()];
                                                            case 2:
                                                                _a.sent();
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                }); });
                                            }
                                            if (newFiles.length > 0) {
                                                if (travelObj.clientDebitFiles.Id) {
                                                    item = sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists.getByTitle("ClientDebitFiles")
                                                        .items.getById(travelObj.clientDebitFiles.Id);
                                                    item.attachmentFiles.addMultiple(newFiles).then();
                                                    // });
                                                }
                                                else {
                                                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                                        .getByTitle("ClientDebitFiles")
                                                        .items.add({ "TravelTicketNo": travelObj.EditsObjects.ID.toString() })
                                                        .then(function (result) {
                                                        // newFiles.forEach((files) => {
                                                        var item = sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists.getByTitle("ClientDebitFiles").items.getById(result.data.ID);
                                                        item.attachmentFiles.addMultiple(newFiles).then();
                                                        // });
                                                    });
                                                }
                                            }
                                            obj = {
                                                Travel: res.item,
                                                Route: this.GetRoutesArray,
                                                Adv: this.AdvanceDetailsArrays,
                                                DependentTravel: this.DependentsDetailsArrays,
                                                projectTravel: this.TravelProjectArrays,
                                            };
                                            return [2 /*return*/, obj];
                                        }
                                        else {
                                            obj = {
                                                Travel: res.item,
                                                Route: this.GetRoutesArray,
                                                Adv: this.AdvanceDetailsArrays,
                                                DependentTravel: this.DependentsDetailsArrays,
                                                projectTravel: this.TravelProjectArrays,
                                            };
                                            return [2 /*return*/, obj];
                                        }
                                    }
                                    else if (travelObj.clientDebitFiles.Id) {
                                        return [2 /*return*/, sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                                                .getByTitle("ClientDebitFiles")
                                                .items.getById(travelObj.clientDebitFiles.Id)
                                                .delete()
                                                .then(function () {
                                                var obj = {
                                                    Travel: res.item,
                                                    Route: _this.GetRoutesArray,
                                                    Adv: _this.AdvanceDetailsArrays,
                                                    DependentTravel: _this.DependentsDetailsArrays,
                                                    projectTravel: _this.TravelProjectArrays,
                                                };
                                                return obj;
                                            })];
                                    }
                                    else {
                                        obj = {
                                            Travel: res.item,
                                            Route: this.GetRoutesArray,
                                            Adv: this.AdvanceDetailsArrays,
                                            DependentTravel: this.DependentsDetailsArrays,
                                            projectTravel: this.TravelProjectArrays,
                                        };
                                        return [2 /*return*/, obj];
                                    }
                                    return [2 /*return*/];
                                });
                            }); });
                        });
                    });
                });
                // const ID = res.data.ID;
                // return res.item;
            });
        });
    };
    InfoService.prototype.InsertNewTravelRequest = function (travelObj) {
        var _this = this;
        delete travelObj.resultObj.DOB;
        delete travelObj.resultObj.functional_reporting_to;
        // delete travelObj.resultObj.MailID;
        travelObj.resultObj.Title = travelObj.resultObj.MailID;
        delete travelObj.resultObj.MailID;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            var name = _this.Current.MailID;
            travelObj.resultObj.TravelStatus = "Pending Approval";
            travelObj.resultObj.TicketStatus = "Open";
            if ((travelObj.resultObj.DeviationReason == undefined &&
                travelObj.resultObj.DeviationReason == null) ||
                travelObj.resultObj.DeviationReason == "") {
                travelObj.resultObj.TravelApprover =
                    travelObj.resultObj.ApprovalAuthority;
                travelObj.resultObj.IsDeviationRequest = false;
            }
            else {
                travelObj.resultObj.TravelApprover =
                    travelObj.resultObj.ApproversSuperior;
                travelObj.resultObj.IsDeviationRequest = true;
            }
            if (!travelObj.resultObj.IsProjectTravel) {
                travelObj.resultObj.TravelApprover =
                    travelObj.resultObj.ApprovalAuthority;
            }
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelRequest")
                .items.add(travelObj.resultObj)
                .then(function (res) {
                var ID = res.data.ID;
                for (var i = 0; i < travelObj.tripDeatilsArray.length; i++) {
                    delete travelObj.tripDeatilsArray[i].fromDisable;
                    delete travelObj.tripDeatilsArray[i].toDisable;
                    delete travelObj.tripDeatilsArray[i].TravelDateDisable;
                    delete travelObj.tripDeatilsArray[i].ID;
                    delete travelObj.tripDeatilsArray[i].Id;
                    travelObj.tripDeatilsArray[i].TravelTicketNoId = ID;
                    travelObj.tripDeatilsArray[i].TicketStatus = "Open";
                    travelObj.tripDeatilsArray[i].Title = travelObj.resultObj.Title;
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("Route")
                        .items.add(travelObj.tripDeatilsArray[i]);
                }
                for (var i = 0; i < travelObj.DependentAdd.length; i++) {
                    delete travelObj.DependentAdd[i].Selected;
                    delete travelObj.DependentAdd[i].ID;
                    delete travelObj.DependentAdd[i].Id;
                    travelObj.DependentAdd[i].Title = travelObj.resultObj.Title;
                    travelObj.DependentAdd[i].TravelTicketNoId = ID;
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("TravelDependents")
                        .items.add(travelObj.DependentAdd[i]);
                }
                return res.item;
            });
        });
    };
    InfoService.prototype.InsertNewTravelRequestReschedule = function (travelObj, trackerData) {
        var _this = this;
        var Idrs = travelObj.UpdateObj.Id;
        var Title = travelObj.UpdateObj.Title;
        for (var i = 0; i < travelObj.tripDeatilsArray.length; i++) {
            delete travelObj.tripDeatilsArray[i].isPasswordExpireInSixMnt;
            delete travelObj.tripDeatilsArray[i].DependSixMnt;
            if (travelObj.tripDeatilsArray[i].Actions === "Update") {
                var Ids = travelObj.tripDeatilsArray[i].ID;
                var obj = {
                    TicketStatus: "Reschedule Requested",
                };
                // travelObj.tripDeatilsArray[i].TicketStatus = 'Cancel Requested';
                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists.getByTitle("Route").items.getById(Ids).update(obj);
                delete travelObj.tripDeatilsArray[i].fromDisable;
                delete travelObj.tripDeatilsArray[i].toDisable;
                delete travelObj.tripDeatilsArray[i].TravelDateDisable;
                delete travelObj.tripDeatilsArray[i].ID;
                delete travelObj.tripDeatilsArray[i].Id;
                delete travelObj.tripDeatilsArray[i].Actions;
                delete travelObj.tripDeatilsArray[i].minDate;
                delete travelObj.tripDeatilsArray[i].minTravelDate;
                travelObj.tripDeatilsArray[i].TravelTicketNoId = Idrs;
                travelObj.tripDeatilsArray[i].TicketStatus = "Open";
                travelObj.tripDeatilsArray[i].Title = Title;
                travelObj.tripDeatilsArray[i].ReferenceLeg = Ids;
                travelObj.tripDeatilsArray[i].ActualDate =
                    travelObj.tripDeatilsArray[i].TravelDate;
                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("Route")
                    .items.add(travelObj.tripDeatilsArray[i])
                    .then();
            }
            else if (travelObj.tripDeatilsArray[i].Actions === "New") {
                delete travelObj.tripDeatilsArray[i].fromDisable;
                delete travelObj.tripDeatilsArray[i].toDisable;
                delete travelObj.tripDeatilsArray[i].TravelDateDisable;
                delete travelObj.tripDeatilsArray[i].ID;
                delete travelObj.tripDeatilsArray[i].Id;
                delete travelObj.tripDeatilsArray[i].Actions;
                delete travelObj.tripDeatilsArray[i].minDate;
                delete travelObj.tripDeatilsArray[i].minTravelDate;
                travelObj.tripDeatilsArray[i].TravelTicketNoId = Idrs;
                travelObj.tripDeatilsArray[i].TicketStatus = "Open";
                travelObj.tripDeatilsArray[i].Title = Title;
                travelObj.tripDeatilsArray[i].ActualDate =
                    travelObj.tripDeatilsArray[i].TravelDate;
                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("Route")
                    .items.add(travelObj.tripDeatilsArray[i])
                    .then();
            }
            else if (travelObj.tripDeatilsArray[i].Actions === "Delete") {
                var obj = {
                    TicketStatus: "Cancel Requested",
                };
                // travelObj.tripDeatilsArray[i].TicketStatus = 'Cancel Requested';
                var Ids = travelObj.tripDeatilsArray[i].ID;
                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("Route")
                    .items.getById(Ids)
                    .update(obj)
                    .then();
            }
            else if (travelObj.tripDeatilsArray[i].Actions === "NoUpdate" &&
                travelObj.tripDeatilsArray[i].TicketStatus === "Open") {
                var Ids = travelObj.tripDeatilsArray[i].ID;
                var obj = {
                    TicketStatus: "Open",
                };
                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("Route")
                    .items.getById(Ids)
                    .update(obj)
                    .then();
            }
        }
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.getById(Idrs)
            .update(travelObj.UpdateObj)
            .then(function (res) {
            // if (trackerData.ActivityPerformed) {
            //   pnp.sp.web.lists
            //     .getByTitle("TravelTicketStatusTracker")
            //     .items.add(trackerData)
            //     .then();
            // }
            if (travelObj.IsVisaValidityUpdated == true && travelObj.TravelType == "International") {
                sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("VisaValidTill")
                    .items.add({
                    "VisaValidTill": travelObj.UpdateObj.VisaValidTill,
                    "TravelTicketNo": travelObj.UpdateObj.Id,
                    "TypeOfVisa": travelObj.UpdateObj.TypeofVisa,
                    "VisaNumber": travelObj.UpdateObj.VisaNo,
                    "ModifiedOn": new Date(),
                    "GivenName": travelObj.extras.GivenName,
                    "SurName": travelObj.extras.SurName,
                }).then();
            }
            if (travelObj.changedDependentsVisa.length > 0 && travelObj.TravelType == "International") {
                travelObj.changedDependentsVisa.forEach(function (dependent) {
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("VisaValidTill")
                        .items.add({
                        "VisaValidTill": dependent.VisaValidTill,
                        "TravelTicketNo": travelObj.UpdateObj.Id,
                        "TypeOfVisa": dependent.TypeofVisa,
                        "VisaNumber": dependent.VisaNumber,
                        "ModifiedOn": new Date(),
                        "GivenName": dependent.GivenName,
                        "SurName": dependent.SurName,
                    }).then();
                });
            }
            if (travelObj.TravelRequest.TravelType == "International" && (travelObj.TravelRequest.Travel_x0020_For === "Dependent" || travelObj.TravelRequest.Travel_x0020_For === "Self along with Dependents")) {
                travelObj.DependentAdd.forEach(function (dependent) {
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("TravelDependents")
                        .items.getById(dependent.Id)
                        .update({
                        "VisaValidTill": dependent.VisaValidTill,
                        "VisaStatus": dependent.VisaStatus,
                        "TypeofVisa": dependent.TypeofVisa,
                        "VisaNumber": dependent.VisaNumber
                    });
                });
            }
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelAdvance")
                .items.select("id,TravelTicketNoId,Title,Currency,Card,Cash,Amount")
                .filter("TravelTicketNoId eq " + Idrs)
                .getAll()
                .then(function (respone) {
                _this.AdvanceDetailsArrays = respone;
                for (var i = 0; i < _this.AdvanceDetailsArrays.length; i++) {
                    var IdA = _this.AdvanceDetailsArrays[i].ID;
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("TravelAdvance")
                        .items.getById(IdA)
                        .delete();
                }
                for (var i = 0; i < travelObj.AdvanceDetails.length; i++) {
                    delete travelObj.AdvanceDetails[i].carddisable;
                    delete travelObj.AdvanceDetails[i].cashdisable;
                    delete travelObj.AdvanceDetails[i].Actions;
                    travelObj.AdvanceDetails[i].Title = travelObj.AdvanceDetails[i].Title;
                    travelObj.AdvanceDetails[i].TravelTicketNoId = Idrs;
                    travelObj.AdvanceDetails[i].Card = travelObj.AdvanceDetails[i].Card.toString();
                    travelObj.AdvanceDetails[i].Cash = travelObj.AdvanceDetails[i].Cash.toString();
                    travelObj.AdvanceDetails[i].Amount = travelObj.AdvanceDetails[i].Amount.toString();
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("TravelAdvance")
                        .items.add(travelObj.AdvanceDetails[i]);
                }
                return res.item;
            });
        });
    };
    InfoService.prototype.UpdateVisaProcess = function (travelObj, trackerData) {
        var Idrs = travelObj.UpdateObj.Id;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.getById(Idrs)
            .update(travelObj.UpdateObj)
            .then(function (res) {
            // if (trackerData.ActivityPerformed) {
            //   pnp.sp.web.lists
            //     .getByTitle("TravelTicketStatusTracker")
            //     .items.add(trackerData)
            //     .then();
            // }
            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("VisaValidTill")
                .items.add({
                "VisaValidTill": travelObj.UpdateObj.VisaValidTill,
                "TravelTicketNo": travelObj.UpdateObj.Id,
                "TypeOfVisa": travelObj.UpdateObj.TypeofVisa,
                "VisaNumber": travelObj.UpdateObj.VisaNo,
                "ModifiedOn": new Date(),
                "GivenName": travelObj.extras.GivenName,
                "SurName": travelObj.extras.SurName,
            }).then();
            if (travelObj.changedDependentsVisa && travelObj.changedDependentsVisa.length > 0) {
                travelObj.changedDependentsVisa.forEach(function (dependent) {
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("VisaValidTill")
                        .items.add({
                        "VisaValidTill": dependent.VisaValidTill,
                        "TravelTicketNo": travelObj.UpdateObj.Id,
                        "TypeOfVisa": dependent.TypeofVisa,
                        "VisaNumber": dependent.VisaNumber,
                        "ModifiedOn": new Date(),
                        "GivenName": dependent.GivenName,
                        "SurName": dependent.SurName,
                    }).then();
                });
                travelObj.DependentAdd.forEach(function (dependent) {
                    sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("TravelDependents")
                        .items.getById(dependent.Id)
                        .update({
                        "VisaValidTill": dependent.VisaValidTill,
                        "VisaStatus": dependent.VisaStatus,
                        "TypeofVisa": dependent.TypeofVisa,
                        "VisaNumber": dependent.VisaNumber,
                        "RejectionReason": dependent.RejectionReason
                    });
                });
            }
        });
    };
    InfoService.prototype.UpdateVoid = function (data, trackerData) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.getById(data.Id)
            .update(data)
            .then(function () {
            // pnp.sp.web.lists
            // .getByTitle("TravelTicketStatusTracker")
            // .items.add(trackerData)
            // .then();
        });
    };
    InfoService.prototype.CalculateAge = function (d) {
        return new Date().getFullYear() - new Date(d).getFullYear();
    };
    InfoService.prototype.SetUserType = function (mailid) {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.siteUsers
            .getByEmail(mailid)
            .groups.get()
            .then(function (groupsData) {
            var IsAdmin = groupsData.filter(function (obj) {
                return obj.Title === "Admins";
            });
            var IsTravelDesk = groupsData.filter(function (obj) {
                return obj.Title === "Travel Desk";
            });
            var IsSupportTeam = groupsData.filter(function (obj) {
                return obj.Title === "Support Team";
            });
            var IsFinanceTeam = groupsData.filter(function (obj) {
                return obj.Title === "Travel Finance View";
            });
            // var IsVisaTeam = groupsData.filter((obj) => {
            //   return obj.Title === "Travel Finance View";
            // });
            var IsSuperAdminTeam = groupsData.filter(function (obj) {
                return obj.Title === "Super Admin Access Travel Application";
            });
            if (IsAdmin.length > 0) {
                _this.UserType = "Admin";
            }
            else if (IsTravelDesk.length > 0) {
                _this.UserType = "Travel Desk";
            }
            else if (IsSupportTeam.length > 0) {
                _this.UserType = "Support Team";
            }
            else if (IsFinanceTeam.length > 0) {
                _this.UserType = "Finance Team";
            }
            //  else if (IsVisaTeam.length > 0) {
            //   this.UserType = "Visa Team";
            // } 
            else if (IsSuperAdminTeam.length > 0) {
                _this.UserType = "Super Admin";
            }
            else {
                _this.UserType = "EmployeeUser";
            }
            _this.isFinanceUserType = IsFinanceTeam.length > 0 ? true : false;
            // this.isVisaUserType = IsVisaTeam.length > 0 ? true : false;
            _this.IsSuperAdminUserType = IsSuperAdminTeam.length > 0 ? true : false;
            _this.visaOfficerLocations = [];
            // if (this.isVisaUserType || this.IsSuperAdminUserType) {
            sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("VisaOfficerLocation")
                .items.select("ID,country_id,country,region,region_id,officer_employee_id,officer_mail_id,officer_name,location_id,location,created_on,created_by,modified_on,modified_by")
                .filter("substringof('" + mailid + "',officer_mail_id)  and is_active eq 1")
                .getAll()
                .then(function (res) {
                _this.visaOfficerLocations = res;
            });
            // } else {
            //   this.visaOfficerLocations = [];
            // }
        });
    };
    InfoService.prototype.setLocalItem = function (key, resultObj) {
        localStorage.setItem(key, JSON.stringify(this.resultObj));
    };
    InfoService.prototype.getlocalItem = function (key) {
        if (localStorage.getItem(key)) {
            return JSON.parse(localStorage.getItem(key));
        }
        else {
            return null;
        }
    };
    InfoService.prototype.setLocalStorage = function (key, value) {
        localStorage.setItem(key, btoa(JSON.stringify(value)));
    };
    InfoService.prototype.getLocalStorage = function (key) {
        if (localStorage.getItem(key)) {
            return JSON.parse(atob(localStorage.getItem(key)));
        }
        else {
            return null;
        }
    };
    InfoService.prototype.ProxySetEmail = function (Proxymail) {
        this.ProxyEmail = this.getLocalStorage("ProxyEmail");
    };
    InfoService.prototype.ProxyRemoveEmail = function (Proxymail) {
        this.ProxyEmail = this.getLocalStorage("ProxyEmail");
    };
    InfoService.prototype.removeItem = function (key) {
        return localStorage.removeItem(key);
    };
    InfoService.prototype.IsAdmin = function (mailid) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.siteUsers
            .getByEmail(mailid)
            .groups.get()
            .then(function (groupsData) {
            var IsAdmin = groupsData.filter(function (obj) {
                return obj.Title === "Admins";
            });
            if (IsAdmin.length > 0) {
                return true;
            }
            else {
                return false;
            }
        });
    };
    InfoService.prototype.GetFeedbackRestricted = function () {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("hr_employee_info")
            .items.select("ID,Title,department,full_name,Id,maveric_email_id,is_feedback_restricted")
            .filter("is_feedback_restricted eq 1")
            .getAll()
            .then(function (res) {
            if (res.length > 0) {
                return res;
            }
            return [];
        });
    };
    InfoService.prototype.GetFeedbackNonRestricted = function () {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("hr_employee_info")
            .items.select("ID,Title,department,full_name,Id,maveric_email_id,is_feedback_restricted")
            .filter("is_feedback_restricted ne 1 and Title ne null")
            .getAll()
            .then(function (res) {
            if (res.length > 0) {
                return res;
            }
            return [];
        });
    };
    InfoService.prototype.updateRestriction = function (id, value) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("hr_employee_info")
            .items.getById(id)
            .update({ is_feedback_restricted: value })
            .then(function (res) {
            return res.item;
        });
    };
    InfoService.prototype.GetVisaOfficerLocation = function () {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("VisaOfficerLocation")
            .items.select("ID,country_id,country,region,region_id,officer_employee_id,officer_mail_id,officer_name,location_id,location,created_on,created_by,modified_on,modified_by")
            .filter("is_active eq 1")
            .getAll()
            .then(function (res) {
            var data = lodash__WEBPACK_IMPORTED_MODULE_3__["reverse"](res);
            return data && data.length > 0 ? data : [];
        });
    };
    InfoService.prototype.InsertVisaOfficerLocation = function (data) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("VisaOfficerLocation")
            .items.add(data)
            .then(function (res) {
            return res;
        });
    };
    InfoService.prototype.UpdateVisaOfficerLocation = function (data) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("VisaOfficerLocation")
            .items.getById(data.ID)
            .update(data)
            .then(function (res) {
            return res.item;
        });
    };
    InfoService.prototype.GetVisaSubmittedByProxy = function (name) {
        var _this = this;
        // if (this.UserType === 'Super Admin' || this.IsSuperAdminUserType) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelRequest")
            .items.select("id,processedby,processedbyname,TripType,EmployeeName,EmployeeID,GUID,Title,VisaStatus,VisaValidTill,TypeofVisa,VisaNo,ReportingDate,TravelPurpose,TravelType,TravelStatus,Project,Country,Region,IsProjectTravel,projectoraclecode__c")
            .filter("substringof('" + name + "',Title) and TravelType ne 'Domestic' and TripType ne 'MultiCity'")
            .getAll()
            .then(function (result) {
            if (_this.visaOfficerLocations.length > 0) {
                var queryString_1 = "(TravelType ne 'Domestic' and TripType ne 'MultiCity' and substringof('" + _this.visaOfficerLocations[0].location + "',To)";
                _this.visaOfficerLocations.forEach(function (item, index) {
                    if (index !== 0) {
                        queryString_1 = queryString_1 + (" or substringof('" + item.location + "',To)");
                    }
                });
                queryString_1 = queryString_1 + ")";
                return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                    .getByTitle("TravelRequest")
                    .items.select("id,processedby,processedbyname,TripType,EmployeeName,EmployeeID,GUID,Title,VisaStatus,VisaValidTill,TypeofVisa,VisaNo,ReportingDate,TravelPurpose,TravelType,TravelStatus,Project,Country,Region,IsProjectTravel,projectoraclecode__c")
                    .filter(queryString_1)
                    .getAll()
                    .then(function (response) {
                    if (response && response.length > 0) {
                        Array.prototype.push.apply(result, response);
                        result = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["uniqBy"])(result, 'Id');
                    }
                    if (result && result.length > 0) {
                        result = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["orderBy"])(result, "Id", "desc");
                        return result;
                    }
                    else {
                        return [];
                    }
                });
            }
            else if (result && result.length > 0) {
                result = lodash__WEBPACK_IMPORTED_MODULE_3__["reverse"](result);
                return result;
            }
            else {
                return [];
            }
        });
        // } 
        // else if ((this.UserType === 'Visa Team' || this.isVisaUserType) && this.visaOfficerLocations.length > 0) {
        //   let queryString = `(substringof('${this.visaOfficerLocations[0].location}',To)`;
        //   this.visaOfficerLocations.forEach((item, index) => {
        //     if (index !== 0) {
        //       queryString = queryString + ` or substringof('${item.location}',To)`;
        //     }
        //   });
        //   queryString = queryString + `)`
        //   return pnp.sp.web.lists
        //     .getByTitle("TravelRequest")
        //     .items.select(
        //       "id,EmployeeName,EmployeeID,GUID,Title,VisaStatus,VisaValidTill,TypeofVisa,VisaNo,ReportingDate,TravelPurpose,TravelType,TravelStatus,Project,Country,Region,IsProjectTravel,projectoraclecode__c"
        //     )
        //     .filter(queryString)
        //     .getAll()
        //     .then((response: any) => {
        //       if (response && response.length > 0) {
        //         response = _.reverse(response);
        //       } else {
        //         return [];
        //       }
        //     });
        // }
    };
    InfoService.prototype.GetVisaSubmittedList = function () {
        var _this = this;
        // if (this.UserType === 'Super Admin' || this.IsSuperAdminUserType) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.currentUser.get().then(function (r) {
            var name = _this.Current.MailID;
            return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                .getByTitle("TravelRequest")
                .items.select("id,processedby,processedbyname,TripType,EmployeeName,EmployeeID,GUID,Title,VisaStatus,VisaValidTill,TypeofVisa,VisaNo,ReportingDate,TravelPurpose,TravelType,TravelStatus,Project,Country,Region,IsProjectTravel,projectoraclecode__c")
                .filter("substringof('" + name + "',Title) and TravelType ne 'Domestic' and TripType ne 'MultiCity'")
                .getAll()
                .then(function (result) {
                if (_this.visaOfficerLocations.length > 0) {
                    var queryString_2 = "TravelType ne 'Domestic' and TripType ne 'MultiCity' and (substringof('" + _this.visaOfficerLocations[0].location + "',To)";
                    _this.visaOfficerLocations.forEach(function (item, index) {
                        if (index !== 0) {
                            queryString_2 = queryString_2 + (" or substringof('" + item.location + "',To)");
                        }
                    });
                    queryString_2 = queryString_2 + ")";
                    return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
                        .getByTitle("TravelRequest")
                        .items.select("id,processedby,processedbyname,TripType,EmployeeName,EmployeeID,GUID,Title,VisaStatus,VisaValidTill,TypeofVisa,VisaNo,ReportingDate,TravelPurpose,TravelType,TravelStatus,Project,Country,Region,IsProjectTravel,projectoraclecode__c")
                        .filter(queryString_2)
                        .getAll()
                        .then(function (response) {
                        if (response && response.length > 0) {
                            Array.prototype.push.apply(result, response);
                            result = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["uniqBy"])(result, 'Id');
                        }
                        if (result && result.length > 0) {
                            result = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["orderBy"])(result, "Id", "desc");
                            return result;
                        }
                        else {
                            return [];
                        }
                    });
                }
                else if (result && result.length > 0) {
                    result = lodash__WEBPACK_IMPORTED_MODULE_3__["reverse"](result);
                    return result;
                }
                else {
                    return [];
                }
            });
        });
        // } else if ((this.UserType === 'Visa Team' || this.isVisaUserType) && this.visaOfficerLocations.length > 0) {
        //   let queryString = `(substringof('${this.visaOfficerLocations[0].location}',To)`;
        //   this.visaOfficerLocations.forEach((item, index) => {
        //     if (index !== 0) {
        //       queryString = queryString + ` or substringof('${item.location}',To)`;
        //     }
        //   });
        //   queryString = queryString + `)`
        //   return pnp.sp.web.lists
        //     .getByTitle("TravelRequest")
        //     .items.select(
        //       "id,EmployeeName,EmployeeID,GUID,Title,VisaStatus,VisaValidTill,TypeofVisa,VisaNo,ReportingDate,TravelPurpose,TravelType,TravelStatus,Project,Country,Region,IsProjectTravel,projectoraclecode__c"
        //     )
        //     .filter(queryString)
        //     .getAll()
        //     .then((response: any) => {
        //       if (response && response.length > 0) {
        //         response = _.reverse(response);
        //       } else {
        //         return [];
        //       }
        //     });
        // }
    };
    InfoService.prototype.DeleteVisaOfficerLocation = function (Id) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("VisaOfficerLocation")
            .items.getById(Id)
            .delete()
            .then(function (res) {
            return res;
        });
    };
    InfoService.prototype.GetAllLocations = function () {
        var _this = this;
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelCityName")
            .items.select("location,ID,country,country_id,region,city_code,is_active,region_id")
            .getAll()
            .then(function (res) {
            if (res.length > 0) {
                return (_this.LocationArray = res);
            }
            else {
                return _this.LocationArray;
            }
        });
    };
    InfoService.prototype.updateCity = function (data, id) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelCityName")
            .items.getById(id)
            .update(data)
            .then();
    };
    InfoService.prototype.getCountry = function () {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Country")
            .items.select("ID,Country,Region,IsActive,RegionId")
            .getAll()
            .then(function (res) {
            if (res.length > 0) {
                return res;
            }
            else {
                return [];
            }
        });
    };
    InfoService.prototype.InsertLocation = function (data) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelCityName")
            .items.add(data)
            .then(function (res) {
            return res;
        });
    };
    InfoService.prototype.InsertCountry = function (data) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Country")
            .items.add(data)
            .then(function (res) {
            return res;
        });
    };
    InfoService.prototype.GetCountryById = function (Id) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Country")
            .items.getById(Id)
            .select("ID,Country,Region,IsActive,RegionId")
            .get()
            .then(function (res) {
            return res;
        });
    };
    InfoService.prototype.updateCountry = function (data, id) {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Country")
            .items.getById(id)
            .update(data)
            .then();
    };
    InfoService.prototype.getCityByCountryId = function (id) {
        return (sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("TravelCityName")
            .items.select("location,ID,country,country_id,region,region_id")
            .filter("country_id eq '" + id + "' and is_active eq 1")
            .getAll()
            .then(function (res) {
            return res;
        }));
    };
    InfoService.prototype.GetAllRegions = function () {
        return sp_pnp_js__WEBPACK_IMPORTED_MODULE_2___default.a.sp.web.lists
            .getByTitle("Region")
            .items.select("RegionName,ID")
            .filter("IsActive eq 1")
            .getAll()
            .then(function (res) {
            return res;
        });
    };
    InfoService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: "root",
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], InfoService);
    return InfoService;
}());



/***/ }),

/***/ "./src/app/shared/shared.module.ts":
/*!*****************************************!*\
  !*** ./src/app/shared/shared.module.ts ***!
  \*****************************************/
/*! exports provided: SharedModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedModule", function() { return SharedModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _daterangefilter_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./daterangefilter.pipe */ "./src/app/shared/daterangefilter.pipe.ts");




var SharedModule = /** @class */ (function () {
    function SharedModule() {
    }
    SharedModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            declarations: [_daterangefilter_pipe__WEBPACK_IMPORTED_MODULE_3__["DaterangefilterPipe"]],
            imports: [
                _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
            ]
        })
    ], SharedModule);
    return SharedModule;
}());



/***/ }),

/***/ "./src/app/status.pipe.ts":
/*!********************************!*\
  !*** ./src/app/status.pipe.ts ***!
  \********************************/
/*! exports provided: StatusPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StatusPipe", function() { return StatusPipe; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var StatusPipe = /** @class */ (function () {
    function StatusPipe() {
        this.filterStatusArray = [];
    }
    StatusPipe.prototype.transform = function (statusarray, args) {
        if (statusarray && statusarray.length > 0 && args && args !== null) {
            if (args === 'All') {
                return statusarray;
            }
            else {
                this.filterStatusArray = statusarray.filter(function (x) { return x.TravelStatus === args; });
                return this.filterStatusArray;
            }
        }
        else {
            return statusarray;
        }
    };
    StatusPipe = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
            name: 'status'
        })
    ], StatusPipe);
    return StatusPipe;
}());



/***/ }),

/***/ "./src/app/travel-request/travel-request.component.css":
/*!*************************************************************!*\
  !*** ./src/app/travel-request/travel-request.component.css ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "sup {\r\n    color: red;\r\n    font-size: 100%;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdHJhdmVsLXJlcXVlc3QvdHJhdmVsLXJlcXVlc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFVBQVU7SUFDVixlQUFlO0FBQ25CIiwiZmlsZSI6InNyYy9hcHAvdHJhdmVsLXJlcXVlc3QvdHJhdmVsLXJlcXVlc3QuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInN1cCB7XHJcbiAgICBjb2xvcjogcmVkO1xyXG4gICAgZm9udC1zaXplOiAxMDAlO1xyXG59Il19 */"

/***/ }),

/***/ "./src/app/travel-request/travel-request.component.html":
/*!**************************************************************!*\
  !*** ./src/app/travel-request/travel-request.component.html ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n  <div class=\"card-body\">\r\n    <h4 class=\"card-header\" *ngIf=\"datatable1 == false && GetmyTravel && GetmyTravel.length > 0\">My Travels</h4>\r\n    <h4 class=\"card-header\" *ngIf=\"datatable1 == true && GetmyTravel && GetmyTravel.length == 0\">My Travels</h4>\r\n    <div class=\"mt-5\" *ngIf=\"datatable1 == true && GetmyTravel && GetmyTravel.length == 0\">\r\n      <h5 class=\"text-center mt-5\">No data available</h5>\r\n    </div>\r\n    <div class=\"mt-5\" *ngIf=\"datatable1 == false && GetmyTravel && GetmyTravel.length > 0\">\r\n      <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th> Request No</th>\r\n            <th> Project Name</th>\r\n            <th> Reporting Date </th>\r\n            <th> Travel Purpose </th>\r\n            <th> Travel Type </th>\r\n            <th> Travel Status </th>\r\n            <th class=\"text-center\"> Action </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let i = index ; let x of GetmyTravel\">\r\n            <td>{{x.Id}}</td>\r\n            <!-- <td>{{x.projectoraclecode__c}} - {{x.Project}}</td> -->\r\n            <td>{{x.Project}}</td>\r\n            <td>{{x.ReportingDate | date: 'dd-MMM-yyyy'}}</td>\r\n            <td>{{x.TravelPurpose}}</td>\r\n            <td>{{x.TravelType}}</td>\r\n            <td>{{x.TravelStatus}}</td>\r\n            <td class=\"text-center\">\r\n              <span>\r\n                <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                  (click)=\"ToViewDetails('Mytravel',x.GUID)\">View</button>\r\n              </span>\r\n              <span class=\"\" *ngIf=\"x.TravelStatus == 'Pending Approval'\">\r\n                <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                  (click)=\"TravelEdit('Edit',x.GUID)\">Edit</button>\r\n              </span>\r\n              <span class=\"ml-1\"\r\n                *ngIf=\"x.TravelStatus == 'Travel Approved' || x.TravelStatus == 'Booked' || x.TravelStatus == 'Rescheduled' || x.TravelStatus == 'Reschedule Approved' || x.TravelStatus == 'Reschedule Required' || x.TravelStatus == 'Visa Pending' || x.TravelStatus == 'Reschedule Requested'\">\r\n                <button type=\"button\" class=\"btn btn-primary px-1\"\r\n                  (click)=\"TravelReschedule('Reschedule',x.GUID)\">Reschedule</button>\r\n              </span>\r\n              <span class=\"\"\r\n                *ngIf=\"x.TravelStatus == 'Pending Approval' || x.TravelStatus == 'Rescheduled' || x.TravelStatus == 'Travel Approved' || x.TravelStatus == 'Reschedule Approved' || x.TravelStatus == 'Booked' || x.TravelStatus == 'Visa Pending' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested' || x.TravelStatus == 'Reschedule Requested'\">\r\n                <button id=\"btnCancel\" type=\"button\" class=\"btn btn-danger px-4\"\r\n                  (click)=\"TravelCancelUpdate(CancelPopup,x)\">Cancel</button>\r\n              </span>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n<ng-template #CancelPopup>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center\">This request is cancelling all the legs (entire request). Are you sure want to cancel ?</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div>\r\n      <label for=\"comments\">Reason</label>\r\n      <sup>\r\n        <span>*</span>\r\n      </sup>\r\n    </div>\r\n    <!-- <input type=\"text\" autocomplete=\"off\" class=\"form-control\" style=\"text-transform: capitalize\" name=\"comments\"\r\n        [(ngModel)]=\"comments\" placeholder=\"Cancel Reason\" /> -->\r\n    <div class=\"col-md-12\" *ngIf=\"this.GetmyTravelById.IsProjectTravel == true\">\r\n      <div class=\"form-group\">\r\n        <input name=\"comment\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"comments\"\r\n          [typeahead]=\"informService.CancelArrayDelivery\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n          typeaheadOptionField=\"name\" #comment=\"ngModel\" placeholder=\"Reason\" required\r\n          (typeaheadNoResults)=\"typeaheadNoResults($event,'comments')\" />\r\n        <!-- <div *ngIf=\"a.submitted && comment.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"comment.errors['required']\">Reject Reason is required</div>\r\n            </div> -->\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-12\" *ngIf=\"this.GetmyTravelById.IsProjectTravel == false\">\r\n      <div class=\"form-group\">\r\n        <input name=\"comment\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"comments\"\r\n          [typeahead]=\"informService.CancelArrayNonDelivery\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n          typeaheadOptionField=\"name\" #comment=\"ngModel\" placeholder=\"Reason\" required\r\n          (typeaheadNoResults)=\"typeaheadNoResults($event,'comments')\" />\r\n        <!-- <div *ngIf=\"a.submitted && comment.invalid\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"comment.errors['required']\">Reject Reason is required</div>\r\n            </div> -->\r\n      </div>\r\n    </div>\r\n    <div class=\"row text-center request\">\r\n      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-3\"\r\n        (click)=\"TravelRequestCancellingApprove()\">Confirm</button>\r\n      <button id=\"btnClear\" type=\"button\" class=\"btn btn-danger px-4\" (click)=\"TravelRequestCancel()\">Cancel</button>\r\n    </div>\r\n  </div>\r\n</ng-template>"

/***/ }),

/***/ "./src/app/travel-request/travel-request.component.ts":
/*!************************************************************!*\
  !*** ./src/app/travel-request/travel-request.component.ts ***!
  \************************************************************/
/*! exports provided: TravelRequestComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TravelRequestComponent", function() { return TravelRequestComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm5/ngx-bootstrap-modal.js");
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");






var TravelRequestComponent = /** @class */ (function () {
    function TravelRequestComponent(informService, router, toaster, modalService) {
        this.informService = informService;
        this.router = router;
        this.toaster = toaster;
        this.modalService = modalService;
        this.dtOptions = {};
        this.bsConfig = { dateInputFormat: this.informService.DateFormate, adaptivePosition: true, showWeekNumbers: false };
        this.GetmyTravel = [];
        this.MyApproval = [];
        this.userObj = {};
        this.pageShow = false;
        this.configsm = {
            backdrop: true,
            class: 'modal-xl',
            ignoreBackdropClick: true
        };
        this.comments = '';
        this.GetmyTravelById = {};
        this.GetTravelProfileInitial = [];
        this.datatable = false;
        this.datatable1 = false;
        this.Route = [];
        this.previousStatus = "";
        // this.informService.GetCurrentUser(() => {
        // });
        this.ProxyEmail = this.informService.getLocalStorage('ProxyEmail');
        if (this.ProxyEmail != null || this.ProxyEmail != undefined) {
            this.ProxyName = this.ProxyEmail;
        }
    }
    TravelRequestComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.userObj = this.informService.Current;
        this.informService.GetCurrentUser(function () {
            _this.informService.GetTravelProfileDetails().then(function (res) {
                _this.GetTravelProfileInitial = res;
                if (_this.GetTravelProfileInitial.length > 0) {
                    // this.router.navigate(['/']);
                }
                else {
                    _this.router.navigate(['/MyProfile']);
                    _this.toaster.successToastr('Please update your profile');
                }
            });
            if (_this.ProxyName != null || _this.ProxyName != undefined) {
                _this.informService.GetMyTravelDetailsProxy(_this.ProxyName).then(function (resp) {
                    _this.GetmyTravel = resp;
                    if (_this.GetmyTravel.length > 0) {
                        _this.datatable1 = false;
                    }
                    if (_this.GetmyTravel.length == 0) {
                        _this.datatable1 = true;
                    }
                });
            }
            else {
                _this.informService.GetMyTravelDetails().then(function (response) {
                    _this.GetmyTravel = response;
                    if (_this.GetmyTravel.length > 0) {
                        _this.datatable1 = false;
                    }
                    if (_this.GetmyTravel.length == 0) {
                        _this.datatable1 = true;
                    }
                });
            }
        });
        this.dtOptions = {
            pagingType: 'full_numbers',
            pageLength: 10,
            paging: true,
            searching: true,
            info: true,
            ordering: false
        };
        // this.informService.GetMyTravelDetails().then((res: any) => {
        //   this.GetmyTravel = res;
        // });
        // this.informService.GetMyApprovalDetails().then((temp: any) => {
        //   this.MyApproval = temp;
        // });
    };
    // BackToNewTravelRequest() {
    //   this.router.navigate(['/NewTravelRequest']);
    // }
    TravelRequestComponent.prototype.ToViewDetails = function (key, id) {
        // let temp = btoa(Id);
        this.router.navigate(['/NewTravelRequest', key, id]);
    };
    TravelRequestComponent.prototype.TravelEdit = function (key, id) {
        this.router.navigate(['/EditTravelRequest', key, id]);
    };
    TravelRequestComponent.prototype.TravelReschedule = function (key, id) {
        // let temp = btoa(Id);
        this.router.navigate(['/NewTravelRequest', key, id]);
    };
    TravelRequestComponent.prototype.TravelCancelUpdate = function (CancelPopup, x) {
        var _this = this;
        this.CommentId = x.Id;
        this.previousStatus = x.TravelStatus;
        this.TravelStatus = x.TravelStatus;
        this.informService.GetMyTravelDetailsById(this.CommentId).then(function (res) {
            _this.GetmyTravelById = res;
        });
        this.bsModalRef = this.modalService.show(CancelPopup, this.configsm);
    };
    TravelRequestComponent.prototype.TravelRequestCancellingApprove = function () {
        var _this = this;
        if (this.comments && this.comments != '') {
            if (this.TravelStatus == 'Pending Approval') {
                var obj = {
                    Id: this.CommentId,
                    CancellationComments: this.comments,
                    TravelStatus: 'Cancelled'
                };
                var trackerData = {
                    ActualUserEmpID: this.informService.actualUserId,
                    LoggedInUserEmpID: this.informService.Current.EmployeeID,
                    TravelTicketNo: this.CommentId,
                    PreviousStatus: this.previousStatus,
                    ActivityPerformed: "Cancelled",
                    RejectionReason: this.comments,
                    IsSameUserLoggedIn: this.informService.actualUserId == this.informService.Current.EmployeeID ? true : false
                };
                this.informService.CancelRequested(obj, trackerData).then(function (res) {
                    if (res) {
                        _this.bsModalRef.hide();
                        _this.ngOnInit();
                        _this.comments = '';
                        _this.router.navigate(['/']);
                        _this.toaster.successToastr('Travel is Cancelled');
                    }
                });
            }
            else {
                var Id = this.CommentId;
                this.informService.GetRouteCancel(Id).then(function (res) {
                    _this.Route = res;
                    if (_this.Route.length > 0) {
                        _this.Route.forEach(function (element) {
                            if (element.TicketStatus == 'Cancelled') {
                            }
                            else {
                                element.TicketStatus = 'Cancel Requested';
                            }
                        });
                        var obj = {
                            Id: _this.CommentId,
                            CancellationComments: _this.comments,
                            TravelStatus: 'Cancellation Requested',
                            Route: _this.Route
                        };
                        var trackerData = {
                            ActualUserEmpID: _this.informService.actualUserId,
                            LoggedInUserEmpID: _this.informService.Current.EmployeeID,
                            TravelTicketNo: _this.CommentId,
                            PreviousStatus: _this.previousStatus,
                            ActivityPerformed: "CancellationRequested",
                            RejectionReason: _this.comments,
                            IsSameUserLoggedIn: _this.informService.actualUserId == _this.informService.Current.EmployeeID ? true : false
                        };
                        _this.informService.CancelRequestedRoute(obj, trackerData).then(function (res) {
                            if (res) {
                                _this.bsModalRef.hide();
                                _this.ngOnInit();
                                _this.comments = '';
                                _this.router.navigate(['/']);
                                _this.toaster.successToastr('Cancellation requested');
                            }
                        });
                    }
                    //  else {
                    //   let obj = {
                    //     Id: this.CommentId,
                    //     Remarks: this.comments,
                    //     TravelStatus: 'Cancelled'
                    //   }
                    //   this.informService.CancelRequested(obj).then((res: any) => {
                    //     if (res) {
                    //       this.bsModalRef.hide();
                    //       this.ngOnInit();
                    //       this.comments = '';
                    //       this.toaster.successToastr('Travel is Cancelled');
                    //     }
                    //   })
                    // }
                });
            }
        }
        else {
            this.toaster.errorToastr('Please select any cancel reason');
        }
    };
    TravelRequestComponent.prototype.TravelRequestCancel = function () {
        this.bsModalRef.hide();
        this.comments = '';
    };
    TravelRequestComponent.prototype.typeaheadNoResults = function (event, key) {
        if (event) {
            if (key === 'comments') {
                this.comments = '';
            }
        }
    };
    TravelRequestComponent.prototype.getTripText = function (type) {
        if (type == 'OneWay') {
            return 'One Way';
        }
        if (type == 'RoundTrip') {
            return 'Round Trip';
        }
        if (type == 'MultiCity') {
            return 'Multi City';
        }
    };
    TravelRequestComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-travel-request',
            template: __webpack_require__(/*! ./travel-request.component.html */ "./src/app/travel-request/travel-request.component.html"),
            styles: [__webpack_require__(/*! ./travel-request.component.css */ "./src/app/travel-request/travel-request.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_2__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_5__["ToastrManager"],
            ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_4__["BsModalService"]])
    ], TravelRequestComponent);
    return TravelRequestComponent;
}());



/***/ }),

/***/ "./src/app/update/update.component.css":
/*!*********************************************!*\
  !*** ./src/app/update/update.component.css ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3VwZGF0ZS91cGRhdGUuY29tcG9uZW50LmNzcyJ9 */"

/***/ }),

/***/ "./src/app/update/update.component.html":
/*!**********************************************!*\
  !*** ./src/app/update/update.component.html ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n  <h4 class=\"card-header\">Update Ticket</h4>\r\n  <div class=\"row\">\r\n    <div class=\"col-md-7 mt-3 mb-3\"></div>\r\n    <div class=\"col-md-2 mt-3 mb-3 ml-5\">\r\n      <select [(ngModel)]=\"TravelStatus\" name=\"TravelStatus\" class=\"form-control\" (change)=\"Filter($event)\">\r\n        <option value=\"Travel Approved\">Travel Approved</option>\r\n        <option value=\"Pending Approval\">Pending Approval</option>\r\n        <option value=\"Booked\">Booked</option>\r\n        <option value=\"Reschedule Approved\">Reschedule Approved</option>\r\n        <option value=\"Reschedule Requested\">Reschedule Requested</option>\r\n        <option value=\"Reschedule Required\">Reschedule Required</option>\r\n        <option value=\"Cancelled\">Cancelled</option>\r\n        <option value=\"Rescheduled\">Rescheduled</option>\r\n        <option value=\"Cancellation Requested\">Cancellation Requested</option>\r\n        <option value=\"Visa Pending\">Visa Pending</option>\r\n        <option value=\"Visa Rejected\">Visa Rejected</option>\r\n        <option value=\"Void\">Void</option>\r\n        <option value=\"All\">All</option>\r\n      </select>\r\n    </div>\r\n    <div class=\"col-md-2 mt-3 mb-3 ml-5\">\r\n        <input type=\"text\" autocomplete=\"off\" class=\"form-control\" name=\"SearchId\" [(ngModel)]=\"SearchId\"\r\n        placeholder=\"Search\" (ngModelChange)=\"Search($event)\"/>\r\n      </div>\r\n  </div>\r\n  <div class=\"card-body\">\r\n    <div class=\"mt-5\" *ngIf=\"datatable == true && fulldetails && fulldetails.length == 0\">\r\n      <h5 class=\"text-center mt-5\">No data available</h5>\r\n    </div>\r\n    <div class=\"\" *ngIf=\"datatable == false && fulldetails && fulldetails.length > 0\">\r\n      <table id=\"table1\" datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th> Travel Request No</th>\r\n            <th> Associate Name</th>\r\n            <th> Project Name</th>\r\n            <th> Reporting Date </th>\r\n            <th> Travel Purpose </th>\r\n            <th> Travel Type </th>\r\n            <th> Travel Status </th>\r\n            <th class=\"text-center\"> Action </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n            <!-- (fulldetails | status: TravelStatus\" -->\r\n          <tr *ngFor=\"let i = index ; let x of filterArray\">\r\n            <td>{{x.Id}}</td>\r\n            <td>{{x.EmployeeName}} ({{x.EmployeeID}})</td>\r\n            <!-- <td>{{x.projectoraclecode__c}} - {{x.Project}}</td> -->\r\n            <td>{{x.Project}}</td>\r\n            <td>{{x.ReportingDate | date: 'dd-MMM-yyyy'}}</td>\r\n            <td>{{x.TravelPurpose}}</td>\r\n            <td>{{x.TravelType}}</td>\r\n            <td>{{x.TravelStatus}}</td>\r\n            <td class=\"text-center\">\r\n              <span class=\"pl-2\">\r\n                <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                  (click)=\"ToViewDetailsUpdate('UpdateTicket',x.GUID)\">View</button>\r\n              </span>\r\n              <!-- <span class=\"pl-2\">\r\n                <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                (click)=\"AdminViewtravel(x.Id)\">View History</button>\r\n              </span> -->\r\n            </td>\r\n\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/update/update.component.ts":
/*!********************************************!*\
  !*** ./src/app/update/update.component.ts ***!
  \********************************************/
/*! exports provided: UpdateComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdateComponent", function() { return UpdateComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");







var UpdateComponent = /** @class */ (function () {
    // table: any = $('#table1');
    function UpdateComponent(informService, router, toaster, datepipe) {
        this.informService = informService;
        this.router = router;
        this.toaster = toaster;
        this.datepipe = datepipe;
        // status = 'All';
        this.TravelStatus = 'Travel Approved';
        this.fulldetails = [];
        this.dtOptions = {};
        this.GetTravelProfileInitial = [];
        this.datatable = false;
        this.filterArray = [];
        this.GetGuid = {};
    }
    UpdateComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dtOptions = {
            pagingType: 'full_numbers',
            pageLength: 10,
            paging: false,
            searching: false,
            info: false,
            ordering: false
        };
        this.informService.GetCurrentUser(function () {
            _this.informService.GetTravelProfileDetails().then(function (res) {
                _this.GetTravelProfileInitial = res;
                if (_this.GetTravelProfileInitial.length > 0) {
                    _this.router.navigate(['/UpdateTicket']);
                }
                else {
                    _this.router.navigate(['/MyProfile']);
                    _this.toaster.successToastr('Please update your profile');
                }
            });
            // setTimeout(function () {
            _this.informService.GetTravelRequestFull(false).then(function (resp) {
                if (resp && resp.length > 0) {
                    _this.datatable = false;
                    _this.fulldetails = resp;
                    _this.fulldetails.forEach(function (element) {
                        // element.ReportingDate = this.datepipe.transform(element.ReportingDate, 'dd-MMM-yyyy')
                        element.ReportingDate = new Date(element.ReportingDate);
                    });
                    _this.filterArray = _this.fulldetails.filter(function (x) { return x.TravelStatus == _this.TravelStatus; });
                }
                else {
                    _this.datatable = true;
                }
            });
            // }, 3000);
        });
    };
    // ngAfterViewInit() {
    //   this.dtOptions = {
    //     pagingType: 'full_numbers',
    //     pageLength: 10,
    //     paging: true,
    //     searching: true,
    //     info: false,
    //     ordering: false
    //   };
    // }
    UpdateComponent.prototype.ToViewDetailsUpdate = function (key, id) {
        // let temp = btoa(Id);
        this.router.navigate(['/NewTravelRequest', key, id]);
    };
    //  ToViewDetailsUpdate(key: any, x: any) {
    //   let Id = x.Id;
    //   this.informService.GetGUID(Id).then((res: any) => {
    //     this.GetGuid = res[0];
    //     // const id = this.GetGuid.GUID;
    //     this.GetGUIDs = this.GetGuid.GUID;
    //     if(this.GetGUIDs != null || this.GetGUIDs != undefined) {
    //       let id = this.GetGUIDs;
    //       this.router.navigate(['/NewTravelRequest', key, id]);
    //     }
    //   });
    // } 
    UpdateComponent.prototype.AdminViewtravel = function (Id) {
        var id = btoa(Id);
        this.router.navigate(['ViewTravelRequest', id]);
    };
    UpdateComponent.prototype.Filter = function (ev) {
        var _this = this;
        this.SearchId = '';
        this.TravelStatus = ev.target.value;
        if (this.TravelStatus == 'All') {
            this.filterArray = this.fulldetails;
        }
        else {
            this.filterArray = this.fulldetails.filter(function (x) { return x.TravelStatus == _this.TravelStatus; });
        }
    };
    UpdateComponent.prototype.Search = function (event) {
        var _this = this;
        var eve = event;
        if (eve != null || eve != undefined) {
            if (this.TravelStatus == 'All') {
                this.filterArray = this.fulldetails;
            }
            else {
                this.filterArray = this.fulldetails.filter(function (x) { return x.TravelStatus == _this.TravelStatus; });
            }
            // this.filterArray = this.flowFilter(this.filterArray, eve);
            this.filterArray = this.filterArray.filter(function (s) { return s.Id.toString().toLowerCase().indexOf(eve.toLowerCase()) >= 0 || s.EmployeeName.toString().toLowerCase().indexOf(eve.toLowerCase()) >= 0 || s.EmployeeID.toString().toLowerCase().indexOf(eve.toLowerCase()) >= 0 || s.Project.toString().toLowerCase().indexOf(eve.toLowerCase()) >= 0 || s.ReportingDate.toString().toLowerCase().indexOf(eve.toLowerCase()) >= 0 || s.TravelPurpose.toString().toLowerCase().indexOf(eve.toLowerCase()) >= 0 || s.TravelType.toString().toLowerCase().indexOf(eve.toLowerCase()) >= 0 || s.TravelStatus.toString().toLowerCase().indexOf(eve.toLowerCase()) >= 0; });
            // this.filterArray = _.filter(this.filterArray, item => {
            //   return _.includes(eve, item['Id']) || _.includes(eve, item['EmployeeName']) || _.includes(eve, item['EmployeeID']) || _.includes(eve, item['Project']) || _.includes(eve, item['ReportingDate']) || _.includes(eve, item['TravelPurpose']) || _.includes(eve, item['TravelType']) || _.includes(eve, item['TravelStatus']);
            //   // return _.includes(eve, item['Id']) && _.includes(eve, item['EmployeeName']) && _.includes(eve, item['EmployeeID']) && _.includes(eve, item['Project']) && _.includes(eve, item['ReportingDate']) && _.includes(eve, item['TravelPurpose']) && _.includes(eve, item['TravelType']) && _.includes(eve, item['TravelStatus']);
            // })
        }
        if (eve == '') {
            if (this.TravelStatus == 'All') {
                this.filterArray = this.fulldetails;
            }
            else {
                this.filterArray = this.fulldetails.filter(function (x) { return x.TravelStatus == _this.TravelStatus; });
            }
        }
    };
    UpdateComponent.prototype.flowFilter = function (array, substr) {
        return lodash__WEBPACK_IMPORTED_MODULE_5__["filter"](array, lodash__WEBPACK_IMPORTED_MODULE_5__["flow"](lodash__WEBPACK_IMPORTED_MODULE_5__["identity"], lodash__WEBPACK_IMPORTED_MODULE_5__["values"], lodash__WEBPACK_IMPORTED_MODULE_5__["join"], lodash__WEBPACK_IMPORTED_MODULE_5__["toLower"], lodash__WEBPACK_IMPORTED_MODULE_5__["partialRight"](lodash__WEBPACK_IMPORTED_MODULE_5__["includes"], substr)));
    };
    UpdateComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-update',
            template: __webpack_require__(/*! ./update.component.html */ "./src/app/update/update.component.html"),
            providers: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["DatePipe"]],
            styles: [__webpack_require__(/*! ./update.component.css */ "./src/app/update/update.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_2__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__["ToastrManager"],
            _angular_common__WEBPACK_IMPORTED_MODULE_6__["DatePipe"]])
    ], UpdateComponent);
    return UpdateComponent;
}());



/***/ }),

/***/ "./src/app/view-ticket-details/view-ticket-details.component.css":
/*!***********************************************************************!*\
  !*** ./src/app/view-ticket-details/view-ticket-details.component.css ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "sup {\r\n    color: red;\r\n    font-size: 100%;\r\n}\r\n\r\n.col-md-2.endtext {\r\n    text-align: end;\r\n    justify-content: end;\r\n}\r\n\r\ntr.Space {\r\n    color: blue;\r\n}\r\n\r\n.f-w {\r\n    background: brown;\r\n}\r\n\r\n.f-b {\r\n    background: green;\r\n}\r\n\r\n.f-c {\r\n    background: red;\r\n}\r\n\r\n.f-r {\r\n    background: greenyellow;\r\n}\r\n\r\n.hides {\r\n    color: white;\r\n}\r\n\r\nli:active {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: #007bff;\r\n}\r\n\r\nul.custom-list-group.ng-star-inserted.ng-untouched.ng-pristine.ng-valid {\r\n    list-style: none;\r\n    padding-left: 12px;\r\n}\r\n\r\n.displayNone {\r\ndisplay: none;\r\n}\r\n\r\n.fitWidth {\r\n    width: -webkit-fit-content !important;\r\n    width: -moz-fit-content !important;\r\n    width: fit-content !important;\r\n}\r\n\r\n.displayFlex {\r\n    display: flex;\r\n}\r\n\r\n.width-100 {\r\n    width: 100% !important;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlldy10aWNrZXQtZGV0YWlscy92aWV3LXRpY2tldC1kZXRhaWxzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxVQUFVO0lBQ1YsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGVBQWU7SUFDZixvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxxQkFBcUI7SUFDckIseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGtCQUFrQjtBQUN0Qjs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtJQUNJLHFDQUE2QjtJQUE3QixrQ0FBNkI7SUFBN0IsNkJBQTZCO0FBQ2pDOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLHNCQUFzQjtBQUMxQiIsImZpbGUiOiJzcmMvYXBwL3ZpZXctdGlja2V0LWRldGFpbHMvdmlldy10aWNrZXQtZGV0YWlscy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsic3VwIHtcclxuICAgIGNvbG9yOiByZWQ7XHJcbiAgICBmb250LXNpemU6IDEwMCU7XHJcbn1cclxuXHJcbi5jb2wtbWQtMi5lbmR0ZXh0IHtcclxuICAgIHRleHQtYWxpZ246IGVuZDtcclxuICAgIGp1c3RpZnktY29udGVudDogZW5kO1xyXG59XHJcblxyXG50ci5TcGFjZSB7XHJcbiAgICBjb2xvcjogYmx1ZTtcclxufVxyXG5cclxuLmYtdyB7XHJcbiAgICBiYWNrZ3JvdW5kOiBicm93bjtcclxufVxyXG5cclxuLmYtYiB7XHJcbiAgICBiYWNrZ3JvdW5kOiBncmVlbjtcclxufVxyXG5cclxuLmYtYyB7XHJcbiAgICBiYWNrZ3JvdW5kOiByZWQ7XHJcbn1cclxuXHJcbi5mLXIge1xyXG4gICAgYmFja2dyb3VuZDogZ3JlZW55ZWxsb3c7XHJcbn1cclxuXHJcbi5oaWRlcyB7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn1cclxuXHJcbmxpOmFjdGl2ZSB7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XHJcbn1cclxuXHJcbnVsLmN1c3RvbS1saXN0LWdyb3VwLm5nLXN0YXItaW5zZXJ0ZWQubmctdW50b3VjaGVkLm5nLXByaXN0aW5lLm5nLXZhbGlkIHtcclxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDEycHg7XHJcbn1cclxuXHJcbi5kaXNwbGF5Tm9uZSB7XHJcbmRpc3BsYXk6IG5vbmU7XHJcbn1cclxuXHJcbi5maXRXaWR0aCB7XHJcbiAgICB3aWR0aDogZml0LWNvbnRlbnQgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmRpc3BsYXlGbGV4IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbn1cclxuXHJcbi53aWR0aC0xMDAge1xyXG4gICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcclxufSJdfQ== */"

/***/ }),

/***/ "./src/app/view-ticket-details/view-ticket-details.component.html":
/*!************************************************************************!*\
  !*** ./src/app/view-ticket-details/view-ticket-details.component.html ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n\r\n  <h4 class=\"card-header\">Ticket details</h4>\r\n\r\n  <div class=\"card-body\">\r\n    <div class=\"row\" *ngIf=\"isEdit\">\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <label for=\"EmployeeID\">Travel Request Id</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"Id\" [(ngModel)]=\"userObj.ID\" placeholder=\"Travel Request Id\"\r\n            readonly />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <form name=\"form\" #f=\"ngForm\">\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"EmployeeID\">Employee Id</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"EmployeeID\" [(ngModel)]=\"userObj.EmployeeID\"\r\n              placeholder=\"Employee Id\" #EmployeeID=\"ngModel\" readonly required />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"EmployeeName\">Employee Name</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"EmployeeName\" [(ngModel)]=\"userObj.EmployeeName\"\r\n              placeholder=\"Employee Name\" #EmployeeName=\"ngModel\" readonly required />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Department\">Department</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Department\" [(ngModel)]=\"userObj.Department\"\r\n              placeholder=\"Department\" #Department=\"ngModel\" readonly required />\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Designation\">Designation</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Designation\" [(ngModel)]=\"userObj.Designation\"\r\n              placeholder=\"Designation\" #Designation=\"ngModel\" readonly required />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"BusinessUnit\">Business Unit</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"BusinessUnit\" [(ngModel)]=\"userObj.BusinessUnit\"\r\n              placeholder=\"Business Unit\" #BusinessUnit=\"ngModel\" readonly />\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"DeliveryUnit\">Delivery Unit</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"DeliveryUnit\" [(ngModel)]=\"userObj.DeliveryUnit\"\r\n              placeholder=\"Delivery Unit\" #DeliveryUnit=\"ngModel\" readonly />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Gender\">Gender</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"Gender\" [(ngModel)]=\"userObj.Gender\" placeholder=\"Age\"\r\n            #Gender=\"ngModel\" readonly required />\r\n\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"Age\">Age</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n              style=\"text-transform: capitalize\" name=\"Age\" [(ngModel)]=\"userObj.Age\" placeholder=\"Age\" #Age=\"ngModel\"\r\n              readonly required />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"BaseLocation\">Base Location</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n            style=\"text-transform: capitalize\" name=\"BaseLocation\" [(ngModel)]=\"userObj.BaseLocation\"\r\n            placeholder=\"Base Location\" readonly required />\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"DOB\">Date Of Birth</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <div class=\"form-group\">\r\n            <input class=\"form-control\" autocomplete=\"off\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n              bsDatepicker name=\"DOB\" [(ngModel)]=\"userObj.DOB\" [bsConfig]=\"bsConfig\" placeholder=\"Date Of Birth\"\r\n              disabled readonly required />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <accordion>\r\n        <accordion-group heading=\"Travel Details\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelType\">Travel For</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <select name=\"Travel_x0020_For\" [(ngModel)]=\"userObj.Travel_x0020_For\" class=\"form-control\"\r\n                #Travel_x0020_For=\"ngModel\" (change)=\"onChangeTravelFor($event)\" [disabled]=\"IsEditMode\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || Travel_x0020_For.touched) && Travel_x0020_For.invalid }\"\r\n                required>\r\n                <option value=\"Self\">Self</option>\r\n                <option value=\"Self along with Dependents\">Self along with Dependents</option>\r\n                <option value=\"Dependent\">Dependent</option>\r\n              </select>\r\n              <div *ngIf=\"(f.submitted || Travel_x0020_For.touched) && Travel_x0020_For.invalid\"\r\n                class=\"invalid-feedback\">\r\n                <div *ngIf=\"Travel_x0020_For.errors['required']\">Travel Type is required</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelType\">Travel Type</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <select name=\"TravelType\" [(ngModel)]=\"userObj.TravelType\" class=\"form-control\" #TravelType=\"ngModel\"\r\n                (change)=\"onChangeTravelType($event)\" [disabled]=\"IsEditMode\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TravelType.touched) && TravelType.invalid }\" required>\r\n                <option value=\"International\">International</option>\r\n                <option value=\"Domestic\">Domestic</option>\r\n              </select>\r\n              <div *ngIf=\"(f.submitted || TravelType.touched) && TravelType.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TravelType.errors['required']\">Travel Type is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"Project\">Project</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input name=\"Project\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.Project\"\r\n                placeholder=\"Project\" #Project=\"ngModel\" [disabled]=\"IsEditMode\"\r\n                (typeaheadOnSelect)=\"onLoadApproval($event)\" (focusout)=\"focusout($event,'Project')\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || Project.touched) && Project.invalid }\" required />\r\n              <div *ngIf=\"(f.submitted || Project.touched) && Project.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"Project.errors['required']\">Project is required</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"Project\">Project Id</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" class=\"form-control\" style=\"text-transform: capitalize\" name=\"projectoraclecode__c\"\r\n                #project_id=\"ngModel\" [(ngModel)]=\"userObj.projectoraclecode__c\" placeholder=\"Project Id\" readonly\r\n                required />\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ApprovalAuthority\">Client Name</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                style=\"text-transform: capitalize\" name=\"clientname__c\" [(ngModel)]=\"userObj.clientname__c\"\r\n                #clientname__c=\"ngModel\" placeholder=\"Client Name\" readonly required />\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ApproversSuperior\">Client Id</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" class=\"form-control\" style=\"text-transform: capitalize\" name=\"clientprismcode__c\"\r\n                #clientprismcode__c=\"ngModel\" [(ngModel)]=\"userObj.clientprismcode__c\" placeholder=\"Client Id\" readonly\r\n                required />\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ApprovalAuthority\">Approval Authority</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                style=\"text-transform: capitalize\" name=\"ApprovalAuthority\" [(ngModel)]=\"userObj.ApprovalAuthority\"\r\n                #ApprovalAuthority=\"ngModel\" placeholder=\"Approval Authority\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || ApprovalAuthority.touched) && ApprovalAuthority.invalid }\"\r\n                readonly required />\r\n              <div *ngIf=\"(f.submitted || ApprovalAuthority.touched) && ApprovalAuthority.invalid\"\r\n                class=\"invalid-feedback\">\r\n                <div *ngIf=\"ApprovalAuthority.errors['required']\">Approval Authority is required</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ApproversSuperior\">Approver's Superior</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" class=\"form-control\" style=\"text-transform: capitalize\" name=\"ApproversSuperior\"\r\n                #ApproversSuperior=\"ngModel\" [(ngModel)]=\"userObj.ApproversSuperior\" placeholder=\"Approvers Superior\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || ApproversSuperior.touched) && ApproversSuperior.invalid }\"\r\n                readonly required />\r\n              <div *ngIf=\"(f.submitted || ApproversSuperior.touched) && ApproversSuperior.invalid\"\r\n                class=\"invalid-feedback\">\r\n                <div *ngIf=\"ApproversSuperior.errors['required']\">Approver's Superior is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelCategory\">Travel Category</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input name=\"TravelCategory\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.TravelCategory\"\r\n                [typeahead]=\"DeliverySource\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                (focusout)=\"focusout($event,'TravelCategory')\" typeaheadOptionField=\"name\" #TravelCategory=\"ngModel\"\r\n                (typeaheadOnSelect)=\"onTravelCategory($event)\"\r\n                (typeaheadNoResults)=\"typeaheadNoResults($event,'TravelCategory')\" [disabled]=\"IsEditMode\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TravelCategory.touched) && TravelCategory.invalid }\"\r\n                placeholder=\"Travel Category\" class=\"form-control\" required>\r\n              <div *ngIf=\"(f.submitted || TravelCategory.touched) && TravelCategory.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TravelCategory.errors['required']\">Travel Category is required</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"Mobile\">Mobile Number</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" autofocus spellcheck=\"false\" pattern=\"\\+?([0-9]-?\\s?){10,17}$\" autocomplete=\"off\"\r\n                class=\"form-control\" style=\"text-transform: capitalize\" name=\"Mobile\" [(ngModel)]=\"userObj.Mobile\"\r\n                placeholder=\"Mobile Number\" #Mobile=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || Mobile.touched) && Mobile.invalid }\" [disabled]=\"IsEditMode\"\r\n                required />\r\n              <div *ngIf=\"(f.submitted || Mobile.touched) && Mobile.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"Mobile.errors['required']\">Mobile Number is required</div>\r\n                <div *ngIf=\"Mobile.errors['pattern']\">Enter a valid mobile number</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelPurpose\">Travel Purpose</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input name=\"TravelPurpose\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.TravelPurpose\"\r\n                [typeahead]=\"purposeOfProject\" [typeaheadOptionsLimit]=\"20\" [typeaheadMinLength]=\"0\"\r\n                typeaheadOptionField=\"name\" #TravelPurpose=\"ngModel\" [disabled]=\"IsEditMode\"\r\n                (focusout)=\"focusout($event,'TravelPurpose')\"\r\n                (typeaheadNoResults)=\"typeaheadNoResults($event,'TravelPurpose')\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TravelPurpose.touched) && TravelPurpose.invalid }\"\r\n                placeholder=\"Travel Purpose\" class=\"form-control\" required>\r\n              <div *ngIf=\"(f.submitted || TravelPurpose.touched) && TravelPurpose.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TravelPurpose.errors['required']\">Travel Purpose is required</div>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TravelMeal\">Travel Meal</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input class=\"form-control\" autocomplete=\"off\" name=\"TravelMeal\" [(ngModel)]=\"userObj.TravelMeal\"\r\n                [typeahead]=\"informService.Meal\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                (focusout)=\"focusout($event,'TravelMeal')\"\r\n                (typeaheadNoResults)=\"typeaheadNoResults($event,'TravelMeal')\" typeaheadOptionField=\"name\"\r\n                #TravelMeal=\"ngModel\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || TravelMeal.touched) && TravelMeal.invalid }\"\r\n                placeholder=\"Travel Meal\" class=\"form-control\" [disabled]=\"IsEditMode\" required />\r\n              <div *ngIf=\"(f.submitted || TravelMeal.touched) && TravelMeal.invalid\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"TravelMeal.errors['required']\">Travel Meal is required</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\" *ngIf=\"isEdit\">\r\n                <label for=\"AccommodationRequired\">Accommodation Required?</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\" *ngIf=\"isEdit\">\r\n\r\n\r\n              <input type=\"radio\" name=\"AccommodationRequired\" [(ngModel)]=\"userObj.AccommodationRequired\" value=\"true\"\r\n                [checked]=\"userObj.AccommodationRequired\" #AccommodationRequired=\"ngModel\" [attr.disabled]=\"IsEditMode\"\r\n                name=\"AccommodationRequired\" required />\r\n              Yes\r\n              <input type=\"radio\" name=\"AccommodationRequired\" [(ngModel)]=\"userObj.AccommodationRequired\"\r\n                name=\"AccommodationRequired\" value=\"false\" [checked]=\"!userObj.AccommodationRequired\"\r\n                #AccommodationRequired=\"ngModel\" [attr.disabled]=\"IsEditMode\" required />\r\n              No\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\" *ngIf=\"isEdit\">\r\n                <label for=\"ClientDebit\">Client Debit?</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\" *ngIf=\"isEdit\">\r\n\r\n\r\n              <input type=\"radio\" name=\"ClientDebit\" [(ngModel)]=\"userObj.ClientDebit\" value=\"true\"\r\n                [checked]=\"userObj.ClientDebit\" #ClientDebit=\"ngModel\" [attr.disabled]=\"IsEditMode\" name=\"ClientDebit\"\r\n                required />\r\n              Yes\r\n              <input type=\"radio\" name=\"ClientDebit\" [(ngModel)]=\"userObj.ClientDebit\" value=\"false\"\r\n                [checked]=\"!userObj.ClientDebit\" #ClientDebit=\"ngModel\" [attr.disabled]=\"IsEditMode\" name=\"ClientDebit\"\r\n                required />\r\n              No\r\n\r\n\r\n\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label>Cost Center / Cluster</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                style=\"text-transform: capitalize\" name=\"CostCenterOrCluster\" [(ngModel)]=\"userObj.CostCenterOrCluster\"\r\n                #CostCenterOrCluster=\"ngModel\" placeholder=\"Cost Center / Cluster\" required readonly \r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || CostCenterOrCluster.touched) && CostCenterOrCluster.invalid }\"/>\r\n                <div *ngIf=\"(f.submitted || CostCenterOrCluster.touched) && CostCenterOrCluster.invalid\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"CostCenterOrCluster.errors['required']\">Cost Center Or Cluster is required</div>\r\n                </div>\r\n            </div>\r\n\r\n            \r\n            <div class=\"col-md-3\"  *ngIf=\"userObject?.clientDebitSrcFiles?.length > 0\">\r\n              <div class=\"form-group\">\r\n                <label>Client Debit Files</label>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-3\" *ngIf=\"userObject?.clientDebitSrcFiles?.length > 0\">\r\n              <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n                <tbody>\r\n                  <tr *ngFor=\"let item of userObject.clientDebitSrcFiles; let i = index\">\r\n                      <td (click)=\"download(item.ServerRelativePath.DecodedUrl, item.FileName)\">\r\n                        <a\r\n                          href=\"https://mavericsystems.sharepoint.com/sites/travelmoduletesting/_layouts/Download.aspx?sourceurl={{item.ServerRelativePath.DecodedUrl}}\">\r\n                          {{item.FileName}}\r\n                        </a>\r\n                      </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            \r\n          </div>\r\n\r\n          \r\n          <div class=\"row mb-2\">\r\n            <div class=\"col-md-12\" *ngIf=\"DependentArrayView && DependentArrayView.length > 0\">\r\n              <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered width-100\" *ngIf=\"isDependent\">\r\n                <thead>\r\n                  <tr>\r\n                    <th></th>\r\n                    <th>Given Name</th>\r\n                    <th>Passport Expiry</th>\r\n                    <th>Relationship</th>\r\n                    <th [ngClass]=\"isShow ? '':'displayNone'\">Visa Status <sup>*</sup></th>\r\n                    <th [ngClass]=\"isShow ? '':'displayNone'\">Visa Valid Till </th>\r\n                    <th [ngClass]=\"isShow ? '':'displayNone'\">Visa No </th>\r\n                    <th [ngClass]=\"isShow ? '':'displayNone'\">Type of Visa <sup>*</sup></th>\r\n                    <th>Actions</th>\r\n\r\n                  </tr>\r\n                </thead>\r\n                <tbody *ngIf=\"userObj.Travel_x0020_For == 'Self along with Dependents'\">\r\n                  <tr>\r\n                    <td>\r\n                    </td>\r\n                    <td>{{userObj.GivenName}}</td>\r\n                    <td>{{userObj.PassportExpiryDate| date: 'dd-MMM-yyyy'}}</td>\r\n                    <td>Self</td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <input name=\"VisaStatus\" style=\"width: fit-content;\" class=\"form-control\" autocomplete=\"off\"\r\n                        [(ngModel)]=\"userObj.VisaStatus\" [typeahead]=\"informService.VisaStatus\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                        #VisaStatus=\"ngModel\" (focusout)=\"focusout($event,'VisaStatus')\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'VisaStatus')\"\r\n                        (typeaheadOnSelect)=\"visaStatus($event)\" [disabled]=\"!isShow || IsEditMode\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || VisaStatus.touched) && VisaStatus.invalid }\"\r\n                        placeholder=\"Visa Status\" class=\"form-control\"\r\n                        [required]=\"TravelType.value === 'International'\" />\r\n                      <div *ngIf=\"(f.submitted || VisaStatus.touched) && VisaStatus.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaStatus.errors['required']\">Visa Status is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <span class=\"displayFlex\">\r\n                        <input class=\"form-control fitWidth\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                          autocomplete=\"off\" bsDatepicker\r\n                          [ngClass]=\"{ 'is-invalid': (f.submitted || VisaValidTill.touched) && VisaValidTill.invalid }\"\r\n                          name=\"VisaValidTill\" [(ngModel)]=\"userObj.VisaValidTill\" [bsConfig]=\"bsConfig\"\r\n                          #VisaValidTill=\"ngModel\" placeholder=\"Visa Valid Till\"\r\n                          (ngModelChange)=\"onVisaValidTillChange(userObj)\" [disabled]=\"!isShow || updateEdit\"\r\n                          [required]=\"(TravelType.value === 'International' && (userObj.VisaStatus === 'Obtained'))\" />\r\n                        <span *ngIf=\"!isVisaSubmitted\"><sup>&nbsp;*</sup></span>\r\n                      </span>\r\n                      <div *ngIf=\"(f.submitted || VisaValidTill.touched) && VisaValidTill.invalid\"\r\n                        style=\"display: block;\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaValidTill.errors['required']\">Visa Valid Till is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <span class=\"displayFlex\">\r\n                        <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control fitWidth\"\r\n                          style=\"text-transform: capitalize\" name=\"VisaNo\" [(ngModel)]=\"userObj.VisaNo\"\r\n                          placeholder=\"Visa No\" #VisaNo=\"ngModel\" [disabled]=\"!isShow || updateEdit\"\r\n                          [ngClass]=\"{ 'is-invalid': (f.submitted || VisaNo.touched) && VisaNo.invalid }\"\r\n                          [required]=\"(TravelType.value === 'International' && (userObj.VisaStatus === 'Obtained' ))\" />\r\n                        <span *ngIf=\"!isVisaSubmitted\"><sup>&nbsp;*</sup></span>\r\n                      </span>\r\n                      <div *ngIf=\"(f.submitted || VisaNo.touched) && VisaNo.invalid\" style=\"display: block;\"\r\n                        class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaNo.errors['required']\">Visa No is required</div>\r\n                      </div>\r\n\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <input name=\"typevisa\" style=\"width: fit-content;\" class=\"form-control\" autocomplete=\"off\"\r\n                        [(ngModel)]=\"userObj.TypeofVisa\" [typeahead]=\"informService.TypeofVisa\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                        #TypeofVisa=\"ngModel\" placeholder=\"Type of Visa\" #TypeofVisa=\"ngModel\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'TypeofVisa')\" class=\"form-control\"\r\n                        (focusout)=\"focusout($event,'TypeofVisa')\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || TypeofVisa.touched) && TypeofVisa.invalid }\"\r\n                        [disabled]=\"!isShow || updateEdit\" [required]=\"TravelType.value === 'International'\"\r\n                        (typeaheadOnSelect)=\"OnOnewayCheck()\" />\r\n                      <div *ngIf=\"(f.submitted || TypeofVisa.touched) && TypeofVisa.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"TypeofVisa.errors['required']\">Visa Type is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                        (click)=\"showMoreInfo(MoreInfo, i, userObj)\">View</button>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n                <tbody>\r\n                  <tr *ngFor=\"let temp of DependentArrayView; let i = index\">\r\n                    <td>\r\n                      <div class=\"form-check\">\r\n                        <label>\r\n                          <input type=\"checkbox\" name=\"trades - {{i}}\" [(ngModel)]=\"temp.Selected\"\r\n                            (change)=\"checkedItems(temp, i)\" [checked]=\"temp.Selected == true\" [disabled]=\"IsEditMode\">\r\n                        </label>\r\n                      </div>\r\n                    </td>\r\n                    <td>{{temp.GivenName}}</td>\r\n                    <td>{{temp.PassportExpiryDate| date: 'dd-MMM-yyyy'}}</td>\r\n                    <td>{{temp.Relationship}}</td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <input name=\"VisaStatus - {{i}}\" style=\"width: fit-content;\" class=\"form-control\"\r\n                        autocomplete=\"off\" [(ngModel)]=\"temp.VisaStatus\"\r\n                        [typeahead]=\"informService.DependentsVisaStatus\" [typeaheadOptionsLimit]=\"7\"\r\n                        [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\" #VisaStatus=\"ngModel\"\r\n                        (focusout)=\"focusout($event,'VisaStatus'+i)\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'VisaStatus'+i)\"\r\n                        [disabled]=\"!isShow || IsEditMode || !temp.Selected\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || VisaStatus.touched) && VisaStatus.invalid }\"\r\n                        placeholder=\"Visa Status\" class=\"form-control\"\r\n                        [required]=\"TravelType.value === 'International'\" />\r\n                      <div *ngIf=\"(f.submitted || VisaStatus.touched) && VisaStatus.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaStatus.errors['required']\">Visa Status is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <span class=\"displayFlex\">\r\n                        <input class=\"form-control fitWidth\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                          autocomplete=\"off\" bsDatepicker\r\n                          [ngClass]=\"{ 'is-invalid': (f.submitted || VisaValidTill.touched) && VisaValidTill.invalid }\"\r\n                          name=\"VisaValidTill - {{i}}\" [(ngModel)]=\"temp.VisaValidTill\" [bsConfig]=\"bsConfig\"\r\n                          #VisaValidTill=\"ngModel\" placeholder=\"Visa Valid Till\"\r\n                          (ngModelChange)=\"onVisaValidTillChange(temp)\"\r\n                          [disabled]=\"!isShow || updateEdit || !temp.Selected\"\r\n                          [required]=\"(TravelType.value === 'International' && (temp.VisaStatus === 'Obtained'))\" />\r\n                        <span\r\n                          *ngIf=\"!(temp.VisaStatus && (temp.VisaStatus === 'Submitted' || temp.VisaStatus === 'On-arrival' || temp.VisaStatus === 'Return to home country'))\"><sup>&nbsp;*</sup></span>\r\n                      </span>\r\n                      <div *ngIf=\"(f.submitted || VisaValidTill.touched) && VisaValidTill.invalid\"\r\n                        style=\"display: block;\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaValidTill.errors['required']\">Visa Valid Till is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <span class=\"displayFlex\">\r\n                        <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control fitWidth\"\r\n                          style=\"text-transform: capitalize\" name=\"VisaNo - {{i}}\" [(ngModel)]=\"temp.VisaNo\"\r\n                          placeholder=\"Visa No\" #VisaNo=\"ngModel\" [disabled]=\"!isShow || updateEdit || !temp.Selected\"\r\n                          [ngClass]=\"{ 'is-invalid': (f.submitted || VisaNo.touched) && VisaNo.invalid }\"\r\n                          [required]=\"(TravelType.value === 'International' && (temp.VisaStatus === 'Obtained' ))\" />\r\n                        <span\r\n                          *ngIf=\"!(temp.VisaStatus && (temp.VisaStatus === 'Submitted' || temp.VisaStatus === 'On-arrival' || temp.VisaStatus === 'Return to home country'))\"><sup>&nbsp;*</sup></span>\r\n                      </span>\r\n                      <div *ngIf=\"(f.submitted || VisaNo.touched) && VisaNo.invalid\" style=\"display: block;\"\r\n                        class=\"invalid-feedback\">\r\n                        <div *ngIf=\"VisaNo.errors['required']\">Visa No is required</div>\r\n                      </div>\r\n\r\n                    </td>\r\n                    <td [ngClass]=\"isShow ? '':'displayNone'\">\r\n                      <input name=\"typevisa - {{i}}\" style=\"width: fit-content;\" class=\"form-control\" autocomplete=\"off\"\r\n                        [(ngModel)]=\"temp.TypeofVisa\" [typeahead]=\"informService.DependentTypeofVisa\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                        #TypeofVisa=\"ngModel\" placeholder=\"Type of Visa\" #TypeofVisa=\"ngModel\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'TypeofVisa'+i)\" class=\"form-control\"\r\n                        (focusout)=\"focusout($event,'TypeofVisa'+i)\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || TypeofVisa.touched) && TypeofVisa.invalid }\"\r\n                        [disabled]=\"!isShow || updateEdit || !temp.Selected || (userObj.Travel_x0020_For == 'Dependent' && i!=firstDependentIndex)\"\r\n                        [required]=\"TravelType.value === 'International'\" (typeaheadOnSelect)=\"OnOnewayCheck()\" />\r\n                      <div *ngIf=\"(f.submitted || TypeofVisa.touched) && TypeofVisa.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"TypeofVisa.errors['required']\">Visa Type is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <button id=\"btnsub\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                        (click)=\"showMoreInfo(MoreInfo, i, null)\">View</button>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n          <div *ngIf=\"userObj.Travel_x0020_For == 'Self' || userObj.Travel_x0020_For == 'Self along with Dependents'\">\r\n            <div *ngIf=\"isShowDomestic\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"IdentityProof\">Identity Proof</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <input name=\"IdentityProof\" autocomplete=\"off\" [(ngModel)]=\"userObj.IdentityProof\"\r\n                    [typeahead]=\"informService.Proof\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                    typeaheadOptionField=\"name\" placeholder=\"Identity Proof\" [disabled]=\"IsEditMode\"\r\n                    (focusout)=\"focusout($event,'IdentityProof')\" #IdentityProof=\"ngModel\"\r\n                    [ngClass]=\"{ 'is-invalid': (f.submitted || IdentityProof.touched) && IdentityProof.invalid }\"\r\n                    (typeaheadNoResults)=\"typeaheadNoResults($event,'IdentityProof')\" class=\"form-control\"\r\n                    [required]=\"TravelType.value === 'Domestic'\" (typeaheadOnSelect)=\"OnIdProof($event)\" />\r\n                  <div *ngIf=\"(f.submitted || IdentityProof.touched) && IdentityProof.invalid\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"IdentityProof.errors['required']\">Identity Proof is required</div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"IDProofNumber\">Id Proof Number</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autocomplete=\"off\" class=\"form-control\" style=\"text-transform: capitalize\"\r\n                      name=\"IDProofNumber\" [(ngModel)]=\"userObj.IDProofNumber\" placeholder=\"Id Proof Number\"\r\n                      #IDProofNumber=\"ngModel\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || IDProofNumber.touched) && IDProofNumber.invalid }\"\r\n                      [disabled]=\"IsEditMode\" [required]=\"TravelType.value === 'Domestic'\" />\r\n                    <div *ngIf=\"(f.submitted || IDProofNumber.touched) && IDProofNumber.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"IDProofNumber.errors['required']\">Identity Proof Number is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div *ngIf=isShow>\r\n\r\n            <div *ngIf=\"userObj.Travel_x0020_For == 'Self'\">\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"GivenName\">Given Name</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      style=\"text-transform: capitalize\" name=\"GivenName\" [(ngModel)]=\"userObj.GivenName\"\r\n                      placeholder=\"Given Name\" #GivenName=\"ngModel\" [disabled]=\"IsEditMode\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || GivenName.touched) && GivenName.invalid }\" readonly\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || GivenName.touched) && GivenName.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"GivenName.errors['required']\">Given Name is required</div>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"SurName\">Surname</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      style=\"text-transform: capitalize\" name=\"SurName\" [(ngModel)]=\"userObj.SurName\"\r\n                      placeholder=\"Surname\" #SurName=\"ngModel\" [disabled]=\"IsEditMode\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || SurName.touched) && SurName.invalid }\" readonly\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || SurName.touched) && SurName.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"SurName.errors['required']\">Surname is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"PassportNo\">Passport No</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      pattern=\"^[a-zA-Z0-9]+$\" style=\"text-transform: capitalize\" name=\"PassportNo\" maxlength=\"75\"\r\n                      [(ngModel)]=\"userObj.PassportNo\" placeholder=\"Passport No\" #PassportNo=\"ngModel\"\r\n                      [disabled]=\"IsEditMode\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || PassportNo.touched) && PassportNo.invalid }\" readonly\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || PassportNo.touched) && PassportNo.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"PassportNo.errors['required']\">Passport No is required</div>\r\n                      <div *ngIf=\"PassportNo.errors['pattern']\">Enter a valid passport number</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"PassportExpiryDate\">Passport Expiry Date</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input class=\"form-control\" autocomplete=\"off\" #datepickerYMD=\"bsDatepicker\" bsDatepicker\r\n                      name=\"PassportExpiryDate\" [(ngModel)]=\"userObj.PassportExpiryDate\" [bsConfig]=\"bsConfig\"\r\n                      #PassportExpiryDate=\"ngModel\" disabled (keydown)=\"number($event)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || PassportExpiryDate.touched) && PassportExpiryDate.invalid }\"\r\n                      placeholder=\"Passport Expiry Date\" readonly [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || PassportExpiryDate.touched) && PassportExpiryDate.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"PassportExpiryDate.errors['required']\">Passport Expiry is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"DateofBirth\">Date of Birth (in Passport)</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" autocomplete=\"off\"\r\n                      (keydown)=\"number($event)\" bsDatepicker name=\"DateofBirth\" [(ngModel)]=\"userObj.DateofBirth\"\r\n                      [bsConfig]=\"bsConfig\" #DateofBirth=\"ngModel\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || DateofBirth.touched) && DateofBirth.invalid }\"\r\n                      placeholder=\"Date of Birth (in Passport)\" readonly disabled\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || DateofBirth.touched) && DateofBirth.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"DateofBirth.errors['required']\">Date of Birth is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"VisaStatus\">Visa Status</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input name=\"VisaStatus\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.VisaStatus\"\r\n                      [typeahead]=\"informService.VisaStatus\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                      typeaheadOptionField=\"name\" #VisaStatus=\"ngModel\" (focusout)=\"focusout($event,'VisaStatus')\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'VisaStatus')\" [disabled]=\"IsEditMode\"\r\n                      (typeaheadOnSelect)=\"visaStatus($event)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || VisaStatus.touched) && VisaStatus.invalid }\"\r\n                      placeholder=\"Visa Status\" class=\"form-control\"\r\n                      [required]=\"TravelType.value === 'International'\" />\r\n                    <div *ngIf=\"(f.submitted || VisaStatus.touched) && VisaStatus.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"VisaStatus.errors['required']\">Visa Status is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"VisaValidTill\">Visa Valid Till</label>\r\n                    <sup>\r\n                      <span *ngIf=\"!isVisaSubmitted\">*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                      autocomplete=\"off\" bsDatepicker\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || VisaValidTill.touched) && VisaValidTill.invalid }\"\r\n                      name=\"VisaValidTill\" [(ngModel)]=\"userObj.VisaValidTill\" [bsConfig]=\"bsConfig\"\r\n                      #VisaValidTill=\"ngModel\" placeholder=\"Visa Valid Till\" [disabled]=\"updateEdit\"\r\n                      (ngModelChange)=\"onVisaValidTillChange(userObj)\"\r\n                      [required]=\"(TravelType.value === 'International' && (userObj.VisaStatus === 'Obtained'))\" />\r\n                    <div *ngIf=\"(f.submitted || VisaValidTill.touched) && VisaValidTill.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"VisaValidTill.errors['required']\">Visa Valid Till is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"TypeofVisa\">Type of Visa</label>\r\n                    <sup>\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input name=\"typevisa\" class=\"form-control\" autocomplete=\"off\" [(ngModel)]=\"userObj.TypeofVisa\"\r\n                      [typeahead]=\"informService.DependentTypeofVisa\" [typeaheadOptionsLimit]=\"7\"\r\n                      [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\" #TypeofVisa=\"ngModel\"\r\n                      placeholder=\"Type of Visa\" #TypeofVisa=\"ngModel\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'TypeofVisa')\" class=\"form-control\"\r\n                      (focusout)=\"focusout($event,'TypeofVisa')\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || TypeofVisa.touched) && TypeofVisa.invalid }\"\r\n                      [disabled]=\"updateEdit\" [required]=\"TravelType.value === 'International'\"\r\n                      (typeaheadOnSelect)=\"OnOnewayCheck()\" />\r\n                    <div *ngIf=\"(f.submitted || TypeofVisa.touched) && TypeofVisa.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"TypeofVisa.errors['required']\">Visa Type is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"VisaNo\">Visa No</label>\r\n                    <sup *ngIf=\"!isVisaSubmitted\">\r\n                      <span>*</span>\r\n                    </sup>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" autofocus spellcheck=\"false\" autocomplete=\"off\" class=\"form-control\"\r\n                      style=\"text-transform: capitalize\" name=\"VisaNo\" [(ngModel)]=\"userObj.VisaNo\"\r\n                      placeholder=\"Visa No\" #VisaNo=\"ngModel\" [disabled]=\"updateEdit\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || VisaNo.touched) && VisaNo.invalid }\"\r\n                      [required]=\"(TravelType.value === 'International' && (userObj.VisaStatus === 'Obtained' ))\" />\r\n                    <div *ngIf=\"(f.submitted || VisaNo.touched) && VisaNo.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"VisaNo.errors['required']\">Visa No is required</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <ng-container *ngIf=\"(userObj.TravelStatus === 'Visa Rejected' || userObj.TravelStatus === 'Void')\">\r\n                  <div class=\"col-md-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"VisaNo\">Rejected Reason</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-md-3\">\r\n                    <div class=\"form-group\">\r\n                      <input type=\"text\" readonly class=\"form-control\"\r\n                        style=\"text-transform: capitalize\" name=\"RejectedReason\" [(ngModel)]=\"userObj.CancellationComments\"\r\n                        placeholder=\"Rejected Reason\" #RejectedReason=\"ngModel\">\r\n                    </div>\r\n                  </div>\r\n                  </ng-container>\r\n\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-md-3\">\r\n                <div class=\"form-group\" *ngIf=\"isEdit\">\r\n                  <label for=\"AdvanceRequired\">Advance Required?</label>\r\n                  <sup>\r\n                    <span>*</span>\r\n                  </sup>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-3\" *ngIf=\"updateEdit && isEdit\">\r\n                <input type=\"radio\" [(ngModel)]=\"userObj.AdvanceRequired\" value=\"true\" name=\"AdvanceRequired\"\r\n                  [checked]=\"userObj.AdvanceRequired\" (change)=\"onAdvance('true', PANNoNotification)\"\r\n                  [attr.disabled]=\"IsEditMode\"\r\n                  [ngClass]=\"{ 'is-invalid': (f.submitted || AdvanceRequired.touched) && AdvanceRequired.invalid }\"\r\n                  required #AdvanceRequired=\"ngModel\" />\r\n                Yes\r\n                <input type=\"radio\" [(ngModel)]=\"userObj.AdvanceRequired\" value=\"false\" [attr.disabled]=\"IsEditMode\"\r\n                  [checked]=\"!userObj.AdvanceRequired\" (change)=\"onAdvance('false', PANNoNotification)\"\r\n                  name=\"AdvanceRequired\" #AdvanceRequired=\"ngModel\"\r\n                  [ngClass]=\"{ 'is-invalid': (f.submitted || AdvanceRequired.touched) && AdvanceRequired.invalid }\"\r\n                  required />\r\n                No\r\n              </div>\r\n            </div>\r\n            <div *ngIf=\"isAdvance\">\r\n              <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Currency</th>\r\n                    <th>Card</th>\r\n                    <th>Cash</th>\r\n                    <th>Amount</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let money of AdvanceDetails; let i = index\">\r\n                    <td class=\"form-group\">\r\n                      <input [(ngModel)]=\"money.Currency\" name=\"Currency - {{i}}\" [typeahead]=\"CurrancyType\"\r\n                        [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"currency_types\"\r\n                        placeholder=\"Currency\" class=\"form-control\" [disabled]=\"updateEdit\"\r\n                        (typeaheadOnSelect)=\"OnCurrencyCheck($event,money,i)\" (focusout)=\"focusout($event,'Currency',i)\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || Currency.touched) && Currency.invalid }\"\r\n                        #Currency=\"ngModel\" [required]=\"userObj.AdvanceRequired == 'true'\"\r\n                        (typeaheadNoResults)=\"typeaheadNoResults($event,'Currency',i)\" />\r\n                      <div *ngIf=\"(f.submitted || Currency.touched) && Currency.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"Currency.errors['required']\">Currency is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td class=\"form-group\">\r\n                      <input type=\"number\" autocomplete=\"off\" (keydown)=\"numberOnly($event)\" class=\"form-control\"\r\n                        [(ngModel)]=\"money.Card\" name=\"Card - {{i}}\" #Card=\"ngModel\" [disabled]=\"updateEdit\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || Card.touched) && Card.invalid }\"\r\n                        [required]=\"userObj.AdvanceRequired == 'true'\">\r\n                      <div *ngIf=\"(f.submitted || Card.touched) && Card.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"Card.errors['required']\">Card is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td class=\"form-group\">\r\n                      <input type=\"number\" autocomplete=\"off\" (keydown)=\"numberOnly($event)\" class=\"form-control\"\r\n                        [(ngModel)]=\"money.Cash\" name=\"Cash - {{i}}\" #Cash=\"ngModel\" [disabled]=\"updateEdit\"\r\n                        [ngClass]=\"{ 'is-invalid': (f.submitted || Cash.touched) && Cash.invalid }\"\r\n                        [required]=\"userObj.AdvanceRequired == 'true'\">\r\n                      <div *ngIf=\"(f.submitted || Cash.touched) && Cash.invalid\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"Cash.errors['required']\">Cash is required</div>\r\n                      </div>\r\n                    </td>\r\n                    <td class=\"form-group\">\r\n                      <input type=\"number\" autocomplete=\"off\" class=\"form-control\" value=\"{{money.Cash+money.Card}}\"\r\n                        name=\"Amount - {{i}}\" [disabled]=\"IsEditMode\" readonly\r\n                        [required]=\"userObj.AdvanceRequired == 'true'\" />\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </accordion-group>\r\n      </accordion>\r\n\r\n      <accordion>\r\n        <accordion-group heading=\"Trip Details\">\r\n          <div class=\"form-group row\" *ngIf=\"isEdit\">\r\n            <div>\r\n              <input type=\"radio\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory1\" value=\"OneWay\"\r\n                (change)=\"onRadioChange($event)\" [checked]=\"userObj.TripType === 'OneWay'\"\r\n                [attr.disabled]=\"IsEditMode\" />\r\n              One Way\r\n              <input type=\"radio\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory2\" value=\"RoundTrip\"\r\n                (change)=\"onRadioChange($event)\" [checked]=\"userObj.TripType === 'RoundTrip'\"\r\n                [attr.disabled]=\"IsEditMode\" />\r\n              Round Trip\r\n              <input type=\"radio\" name=\"TripType\" [(ngModel)]=\"userObj.TripType\" id=\"userCategory3\" value=\"MultiCity\"\r\n                (change)=\"onRadioChange($event)\" [checked]=\"userObj.TripType === 'MultiCity'\"\r\n                [attr.disabled]=\"IsEditMode\" />\r\n              Multicity\r\n\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"isTableShow\">\r\n            <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n              <thead>\r\n                <tr>\r\n                  <th>From City</th>\r\n                  <th>To City</th>\r\n                  <th>Date</th>\r\n                  <th>First Preference</th>\r\n                  <th>Second Preference</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let temp of tripDeatilsArray; let i = index\"\r\n                  [ngClass]=\"{ 'f-w': temp.Actions == 'Delete', 'f-c': temp.Actions == 'Cancel'}\">\r\n                  <td class=\"form-group\">\r\n                    <input [(ngModel)]=\"temp.Form\" autocomplete=\"temp.Form\" name=\"Form - {{i}}\"\r\n                      [typeahead]=\"locationArrays\" #Form=\"ngModel\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\"\r\n                      typeaheadOptionField=\"location\" placeholder=\"From City\" class=\"form-control\"\r\n                      [disabled]=\"IsEditMode\" (typeaheadNoResults)=\"typeaheadNoResults($event,'Form',i)\"\r\n                      (focusout)=\"focusout($event,'Form',i)\"\r\n                      (typeaheadOnSelect)=\"onFromCityChange($event,tripDeatilsArray, i)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || Form.touched) && Form.invalid }\"\r\n                      [disabled]=\"updateEdit\" #Form=\"ngModel\" required>\r\n                    <div *ngIf=\"(f.submitted || Form.touched) && Form.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"Form.errors['required']\">From City is required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input [(ngModel)]=\"temp.To\" autocomplete=\"temp.To\" name=\"To - {{i}}\" [typeahead]=\"locationArrays\"\r\n                      #To=\"ngModel\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"location\"\r\n                      placeholder=\"To City\" class=\"form-control\" [disabled]=\"IsEditMode\"\r\n                      (typeaheadNoResults)=\"typeaheadNoResults($event,'To',i)\" (focusout)=\"focusout($event,'To',i)\"\r\n                      (typeaheadOnSelect)=\"onToCityChange($event,tripDeatilsArray , i)\"\r\n                      [disabled]=\"temp.toDisable || updateEdit\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || To.touched) && To.invalid }\" required>\r\n                    <div *ngIf=\"(f.submitted || To.touched) && To.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"To.errors['required']\">To City is required</div>\r\n                    </div>\r\n\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\"\r\n                      autocomplete=\"off\" bsDatepicker #date=\"ngModel\" name=\"TravelDate - {{i}}\"\r\n                      [(ngModel)]=\"temp.TravelDate\" [bsConfig]=\"bsConfig\" placeholder=\"Travel Date\"\r\n                      [disabled]=\"updateEdit || temp.TicketStatus == 'Rescheduled' || temp.TicketStatus == 'Cancelled'\"\r\n                      #TravelDate=\"ngModel\" (ngModelChange)=\"onValueChange($event,tripDeatilsArray , i)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || TravelDate.touched) && TravelDate.invalid }\" required>\r\n                    <div *ngIf=\"(f.submitted || TravelDate.touched) && TravelDate.invalid\" class=\"invalid-feedback\">\r\n                      <div *ngIf=\"TravelDate.errors['required']\">Travel Date is required</div>\r\n                    </div>\r\n\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input [(ngModel)]=\"temp.FirstPreferance\" autocomplete=\"temp.FirstPreferance\"\r\n                      name=\"FirstPreferance - {{i}}\" [typeahead]=\"informService.TimeArray\" #FirstPreferance=\"ngModel\"\r\n                      [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                      class=\"form-control\" (typeaheadNoResults)=\"typeaheadNoResults($event,'FirstPreferance',i)\"\r\n                      placeholder=\"First Preference\" [disabled]=\"updateEdit\"\r\n                      (focusout)=\"focusout($event,'FirstPreferance',i)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || FirstPreferance.touched) && FirstPreferance.invalid }\"\r\n                      required (typeaheadOnSelect)=\"onFirstChange($event,tripDeatilsArray , i)\" />\r\n                    <div *ngIf=\"(f.submitted || FirstPreferance.touched) && FirstPreferance.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"FirstPreferance.errors['required']\">First Preference is required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    <input [(ngModel)]=\"temp.SecondPreferance\" autocomplete=\"temp.SecondPreferance\"\r\n                      name=\"SecondPreferance - {{i}}\" [typeahead]=\"informService.TimeArray\" #SecondPreferance=\"ngModel\"\r\n                      [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"name\"\r\n                      class=\"form-control\" (typeaheadNoResults)=\"typeaheadNoResults($event,'SecondPreferance',i)\"\r\n                      (typeaheadOnSelect)=\"onSecondChange($event,tripDeatilsArray , i)\" placeholder=\"Second Preference\"\r\n                      [disabled]=\"updateEdit || temp.fromDisable\" (focusout)=\"focusout($event,'SecondPreferance',i)\"\r\n                      [ngClass]=\"{ 'is-invalid': (f.submitted || SecondPreferance.touched) && SecondPreferance.invalid }\"\r\n                      required />\r\n                    <div *ngIf=\"(f.submitted || SecondPreferance.touched) && SecondPreferance.invalid\"\r\n                      class=\"invalid-feedback\">\r\n                      <div *ngIf=\"SecondPreferance.errors['required']\">Second Preference is required</div>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div class=\"row mt-3 mb-3\" *ngIf=\"isDeviation\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"DeviationReason\">Deviation Reason</label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <input autocomplete=\"off\" [disabled]=\"updateEdit\" [typeahead]=\"informService.DeviationReason\"\r\n                  [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" name=\"DeviationReason\"\r\n                  (focusout)=\"focusout($event,'DeviationReason')\" [(ngModel)]=\"userObj.DeviationReason\"\r\n                  typeaheadOptionField=\"name\" #DeviationReason=\"ngModel\" placeholder=\"Deviation Reason\"\r\n                  (typeaheadNoResults)=\"typeaheadNoResults($event,'DeviationReason')\" class=\"form-control\"\r\n                  [ngClass]=\"{ 'is-invalid': (f.submitted || DeviationReason.touched) && DeviationReason.invalid }\"\r\n                  [required]=\"isDeviation === true\" />\r\n                <div *ngIf=\"(f.submitted || DeviationReason.touched) && DeviationReason.invalid\"\r\n                  class=\"invalid-feedback\">\r\n                  <div *ngIf=\"DeviationReason.errors['required']\">Deviation Reason is required</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row mt-3 mb-3\">\r\n            <div class=\"col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ReportingDate\">Reporting Date\r\n                </label>\r\n                <sup>\r\n                  <span>*</span>\r\n                </sup>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <input class=\"form-control\" #datepickerYMD=\"bsDatepicker\" (keydown)=\"number($event)\" autocomplete=\"off\"\r\n                bsDatepicker name=\"ReportingDate\" [(ngModel)]=\"userObj.ReportingDate\" [bsConfig]=\"bsConfig\"\r\n                #ReportingDate=\"ngModel\" placeholder=\"Reporting Date\"\r\n                [ngClass]=\"{ 'is-invalid': (f.submitted || ReportingDate.touched) && ReportingDate.invalid }\" required\r\n                [disabled]=\"updateEdit\" (ngModelChange)=\"onValueTriggerReportingDate($event)\" required />\r\n            </div>\r\n          </div>\r\n        </accordion-group>\r\n      </accordion>\r\n\r\n      <accordion\r\n        *ngIf=\"(Appkey == 'Mytravel' || Appkey == 'UpdateTicket' ) && userObject.VisaValidityLog && userObject.VisaValidityLog.length > 0\">\r\n        <accordion-group heading=\"Visa Tracker\">\r\n          <div *ngIf=\"userObject.VisaValidityLog && userObject.VisaValidityLog.length > 0\">\r\n            <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Given Name</th>\r\n                  <th>Sur Name</th>\r\n                  <th>Modified On</th>\r\n                  <th>Visa Status</th>\r\n                  <th>Visa Valid Till</th>\r\n                  <th>Visa Number</th>\r\n                  <th>Type Of Visa</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let log of userObject.VisaValidityLog\">\r\n                  <td class=\"form-group\">\r\n                    {{log.GivenName}}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{log.SurName}}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{log.ModifiedOn | date: 'dd-MMM-yyyy HH:mm:ss' }}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{log.VisaStatus}}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{log.VisaValidTill | date: 'dd-MMM-yyyy' }}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{log.VisaNumber}}\r\n                  </td>\r\n                  <td class=\"form-group\">\r\n                    {{log.TypeOfVisa}}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </accordion-group>\r\n      </accordion>\r\n\r\n      <accordion *ngIf=\"isEdit && Appkey == 'UpdateTicket' && TicketFiles && TicketFiles.length > 0 \">\r\n        <accordion-group heading=\"Ticket Details\">\r\n          <div class=\"row mt-2\">\r\n            <div class=\"col-md-9\" *ngIf=\"TicketFiles && TicketFiles.length > 0\">\r\n              <table class=\"table table-bordered\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>File Name</th>\r\n                    <th>Created Date</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let temp of TicketFiles; let i = index\">\r\n                    <td (click)=\"download(temp.ServerRelativePath.DecodedUrl, temp.FileName)\">\r\n                      <a\r\n                        href=\"https://mavericsystems.sharepoint.com/sites/app_data_center/_layouts/Download.aspx?sourceurl={{temp.ServerRelativePath.DecodedUrl}}\">\r\n                        {{temp.FileName}}\r\n                      </a>\r\n                    </td>\r\n                    <td>\r\n                      {{temp.CreatedTime | date:'dd-MMM-yyyy HH:mm:ss'}}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </accordion-group>\r\n      </accordion>\r\n\r\n      <div class=\"row height text-center pt-3\">\r\n        <button id=\"btncan\" class=\"btn btn-danger px-3\" *ngIf=\"Appkey ==='UpdateTicket'\"\r\n          (click)=\"CancelBack()\">Cancel</button>\r\n      </div>\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #MoreInfo>\r\n  <div class=\"modal-header popup\" style=\"display: unset;\">\r\n    <button type=\"button\" class=\"close pull-right popup\" aria-label=\"Close\" tooltip=\"close\" (click)=\"bsModalRef.hide()\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n     <h5 class=\"modal-title text-center\" style=\"margin: 0 !important;\">More Info</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Given Name</label> </div>\r\n      <div class=\"col-md-4\"> : <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].GivenName : userObj.GivenName\"></span>\r\n      </div>\r\n      <div class=\"col-md-2\"><label>Sur Name</label> </div>\r\n      <div class=\"col-md-4\"> :\r\n        <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].SurName : userObj.SurName\"></span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Gender</label> </div>\r\n      <div class=\"col-md-4\"> :\r\n        <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].Gender : userObj.Gender\"></span>\r\n      </div>\r\n      <div class=\"col-md-2\"><label>Relationship</label> </div>\r\n      <div class=\"col-md-4\"> :\r\n        <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].Relationship : 'Self'\"></span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Date of Birth <span *ngIf=\"selectedDependantIndex !== -1\">(in\r\n            Passport)</span></label> </div>\r\n      <div class=\"col-md-4\" *ngIf=\"selectedDependantIndex == -1\"> : {{ userObj.DateofBirth | date: 'dd-MMM-yyyy'}}\r\n      </div>\r\n      <div class=\"col-md-4\" *ngIf=\"selectedDependantIndex !== -1\"> : {{\r\n        DependentArrayView[selectedDependantIndex].DOBPassport | date: 'dd-MMM-yyyy'}}\r\n      </div>\r\n      <div class=\"col-md-2\"><label>Passport No</label> </div>\r\n      <div class=\"col-md-4\"> :\r\n        <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].PassportNo : userObj.PassportNo\"></span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-2\"><label>Passport Expiry Date</label> </div>\r\n      <div class=\"col-md-4\" *ngIf=\"selectedDependantIndex == -1\"> : {{ userObj.PassportExpiryDate | date:\r\n        'dd-MMM-yyyy'}}\r\n      </div>\r\n      <div class=\"col-md-4\" *ngIf=\"selectedDependantIndex !== -1\"> : {{\r\n        DependentArrayView[selectedDependantIndex].PassportExpiryDate | date: 'dd-MMM-yyyy'}}\r\n      </div>\r\n\r\n      <ng-container *ngIf=\"userObj.TravelType === 'International' && ((selectedDependantIndex != -1 && DependentArrayView[selectedDependantIndex].VisaStatus === 'Rejected') || (selectedDependantIndex == -1 && userObj.VisaStatus === 'Rejected'))\">\r\n        <div class=\"col-md-2\"><label>Rejected Reason</label> </div>\r\n        <div class=\"col-md-4\"> :\r\n          <span\r\n          [innerText]=\"selectedDependantIndex != -1? DependentArrayView[selectedDependantIndex].RejectionReason : userObj.CancellationComments\"\r\n          >{{this.userObj.CancellationComments}}</span>\r\n        </div>\r\n        </ng-container>\r\n    </div>\r\n  </div>\r\n</ng-template>"

/***/ }),

/***/ "./src/app/view-ticket-details/view-ticket-details.component.ts":
/*!**********************************************************************!*\
  !*** ./src/app/view-ticket-details/view-ticket-details.component.ts ***!
  \**********************************************************************/
/*! exports provided: ViewTicketDetailsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewTicketDetailsComponent", function() { return ViewTicketDetailsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm5/ngx-bootstrap-modal.js");
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_6__);







var ViewTicketDetailsComponent = /** @class */ (function () {
    function ViewTicketDetailsComponent(informService, router, activatedRoute, toaster, modalService) {
        this.informService = informService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.toaster = toaster;
        this.modalService = modalService;
        this.config = {
            backdrop: true,
            class: "modal-xl",
            ignoreBackdropClick: true,
        };
        this.isEdit = false;
        this.userObj = {};
        this.submitted = false;
        this.isShow = false;
        this.isShowDomestic = false;
        this.tripDeatilsArray = [
            {
                Form: "",
                To: "",
                TravelDate: null,
                FirstPreferance: "",
                SecondPreferance: "",
                fromDisable: false,
                toDisable: false,
                TravelDateDisable: false,
            },
        ];
        this.AdvanceDetails = [
            {
                Currency: "",
                Card: 0,
                Cash: 0,
                Amount: 0,
                carddisable: false,
                cashdisable: false,
            },
        ];
        this.isDependent = false;
        this.DependentArray = [];
        this.minDate = new Date();
        this.today = new Date();
        this.isAdvance = false;
        this.isTableShow = false;
        this.isDeviation = false;
        this.bsConfig = {
            dateInputFormat: this.informService.DateFormate,
            adaptivePosition: true,
            showWeekNumbers: false,
        };
        this.dtOptions = {};
        this.locationArrays = [];
        this.userObject = {};
        this.DependentArrayView = [];
        this.DependentAdd = [];
        this.RId = 0;
        this.Appkey = "UpdateTicket";
        this.projectoaid = [];
        this.Hrinfo = [];
        this.BookingNames = [];
        this.common = [];
        this.TPSuperior = {};
        this.TPSuperSuperior = {};
        this.purposeOfProject = [];
        this.Depart = [];
        this.Delivery = {};
        this.DeliverySource = [];
        this.TicketFiles = [];
        this.IsEditMode = false;
        this.updateEdit = false;
        this.CurrancyType = [];
        this.Costdetails = [];
        this.el = {};
        this.PreviousDetails = [];
        this.filesData = [];
        this.isPasswordExpireInSixMnt = false;
        this.DependSixMnt = false;
        this.clientDebitFilesUploaded = [];
        this.userObj = this.informService.Current;
        this.minDate = new Date();
        this.RId = this.activatedRoute.snapshot.params["id"];
    }
    ViewTicketDetailsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.userObj.AccommodationRequired = "";
        this.userObj.Project = "";
        this.userObj.ApprovalAuthority = "";
        this.userObj.ApproversSuperior = "";
        this.userObj.TravelCategory = "";
        this.userObj.TravelPurpose = "";
        this.userObj.TravelMeal = "";
        this.userObj.TravelType = "";
        this.userObj.IdentityProof = "";
        this.userObj.IDProofNumber = "";
        this.userObj.VisaStatus = "";
        this.userObj.bsValue = null;
        this.userObj.TypeofVisa = "";
        this.userObj.VisaNo = "";
        this.userObj.TripType = "";
        this.userObj.DeviationReason = "";
        this.userObj.ReportingDate = null;
        this.userObj.Travel_x0020_For = "Self";
        this.userObj.ClientDebit = "false";
        this.userObj.AdvanceRequired = "false";
        this.informService.GetCurrentUser(function () {
            _this.informService.GetDepertName().then(function (res) {
                _this.Depart = res;
            });
            _this.informService.GetCurrency().then(function (res) {
                _this.CurrancyType = res;
            });
            _this.informService.GetHrInfo().then(function (res) {
                _this.Hrinfo = res;
            });
            _this.informService.GetBookingNames().then(function (res) {
                _this.BookingNames = res;
                var checkDate = new Date();
                _this.informService.GetProjectoid().then(function () {
                    _this.projectoaid = _this.informService.projectoaidlist;
                    _this.projectoaid.forEach(function (element) {
                        element.deploymentdate__c = new Date(element.deploymentdate__c);
                        element.enddate__c = new Date(element.enddate__c);
                    });
                    for (var i = 0; i < _this.BookingNames.length; i++) {
                        var ele = _this.BookingNames[i];
                        for (var j = 0; j < _this.projectoaid.length; j++) {
                            var res = _this.projectoaid[j];
                            if (ele.project_id == res.bookingprojectoaid__c &&
                                checkDate >= res.deploymentdate__c &&
                                checkDate <= res.enddate__c &&
                                _this.common.findIndex(function (e) { return e.project_id == ele.project_id; }) < 0) {
                                _this.common.push(ele);
                            }
                        }
                    }
                    _this.common.forEach(function (element) {
                        element.ProjectList =
                            element.projectoraclecode__c +
                                " " +
                                "-" +
                                " " +
                                element.project_name;
                    });
                });
            });
            _this.informService.GetLocation().then(function (res) {
                _this.locationArrays = res;
            });
            _this.GetDependentsList();
            _this.informService.GetTravelProfileDetails().then(function (res) {
                if (res && res.length > 0) {
                    (_this.userObj.GivenName = res[0].GivenName),
                        (_this.userObj.SurName = res[0].SurName),
                        (_this.userObj.PassportNo = res[0].PassportNo),
                        (_this.userObj.DateofBirth = new Date(res[0].DOBPassport)),
                        (_this.userObj.PassportExpiryDate = new Date(res[0].PassportExpiryDate)),
                        (_this.userObj.PassportExpDate = new Date(res[0].PassportExpDate)),
                        (_this.userObj.Mobile = res[0].Mobile);
                    _this.PassportExpDate = _this.userObj.PassportExpDate.setMonth(_this.userObj.PassportExpDate.getMonth() - 6);
                    _this.userObj.PANNumber = res[0].PANNumber;
                }
            });
        });
        this.userObj = this.informService.Current;
        this.dtOptions = {
            pagingType: "full_numbers",
            pageLength: 10,
            paging: false,
            searching: false,
            info: false,
            ordering: false,
        };
        if (this.RId != null && this.RId != undefined) {
            this.IsEditMode = true;
            if (this.Appkey == "UpdateTicket" ||
                this.Appkey == "Mytravel" ||
                this.Appkey == "approval") {
                this.updateEdit = true;
            }
            this.isEdit = true;
            this.informService.GetTravelRequestById(this.RId).then(function (res) {
                _this.informService.GetHrInfo().then(function (resps) {
                    _this.Hrinfo = resps;
                });
                _this.userObject = res;
                if (_this.userObject.TravelRequest.ClientDebitFileName &&
                    JSON.parse(_this.userObject.TravelRequest.ClientDebitFileName).length > 0) {
                    _this.clientDebitFilesUploaded = JSON.parse(_this.userObject.TravelRequest.ClientDebitFileName);
                }
                _this.informService
                    .DobSet(res.TravelRequest.EmployeeID)
                    .then(function (resp) {
                    _this.userObj.DOB = new Date(resp[0].dob);
                    _this.userObj.Age = _this.CalculateAge(resp[0].dob);
                });
                res.TravelRequest.DateofBirth = new Date(res.TravelRequest.DateofBirth);
                if (res.TravelRequest.ReportingDate == null) {
                    res.TravelRequest.ReportingDate = "";
                }
                else {
                    res.TravelRequest.ReportingDate = new Date(res.TravelRequest.ReportingDate);
                }
                if (res.TravelRequest.VisaStatus === "Submitted" || res.TravelRequest.VisaStatus === "On-arrival" || res.TravelRequest.VisaStatus === "Return to home country") {
                    _this.isVisaSubmitted = true;
                }
                if (res.TravelRequest.PassportExpiryDate == null) {
                    res.TravelRequest.PassportExpiryDate = "";
                }
                else {
                    res.TravelRequest.PassportExpiryDate = new Date(res.TravelRequest.PassportExpiryDate);
                }
                if (res.TravelRequest.PassportExpDate == null) {
                    res.TravelRequest.PassportExpDate = "";
                }
                else {
                    res.TravelRequest.PassportExpDate = new Date(res.TravelRequest.PassportExpDate);
                }
                if (res.TravelRequest.InvoiceDate == null ||
                    res.TravelRequest.InvoiceDate == "" ||
                    res.TravelRequest.InvoiceDate == "1970-01-01T00:00:00Z") {
                    res.TravelRequest.InvoiceDate = null;
                }
                else {
                    res.TravelRequest.InvoiceDate = new Date(res.TravelRequest.InvoiceDate);
                }
                _this.userObj = res.TravelRequest;
                if (_this.Appkey === "UpdateTicket" && _this.userObj.TravelMode == null) {
                    _this.userObj.isNotBooked = true;
                }
                if (_this.Appkey === "UpdateTicket") {
                    _this.informService.IsAdmin(_this.userObj.Title).then(function (result) {
                        _this.userObj.isAdmin = result;
                    });
                }
                _this.PassportExpDate = _this.userObj.PassportExpDate.setMonth(_this.userObj.PassportExpDate.getMonth() - 6);
                if (_this.userObj.IsDeviationRequest === true) {
                    _this.isDeviation = true;
                }
                else {
                    _this.isDeviation = false;
                }
                if (_this.userObj.Travel_x0020_For === "Dependent") {
                    _this.isDependent = true;
                }
                else if (_this.userObj.Travel_x0020_For === "Self along with Dependents") {
                    _this.isDependent = true;
                }
                else {
                    _this.isDependent = false;
                }
                if (_this.userObj.TravelType === "International") {
                    _this.isShowDomestic = false;
                    _this.isShow = true;
                }
                else {
                    _this.isShow = false;
                    _this.isShowDomestic = true;
                }
                if (_this.userObj.AdvanceRequired == true) {
                    _this.userObj.AdvanceRequired = "true";
                    _this.isAdvance = true;
                }
                else {
                    _this.userObj.AdvanceRequired = "false";
                }
                if (_this.userObj.AccommodationRequired == true) {
                    _this.userObj.AccommodationRequired = "true";
                }
                else {
                    _this.userObj.AccommodationRequired = "false";
                }
                if (_this.userObj.ClientDebit == true) {
                    _this.userObj.ClientDebit = "true";
                }
                else {
                    _this.userObj.ClientDebit = "false";
                }
                if (_this.userObject.AdvanceDetails.length > 0) {
                    _this.AdvanceDetails = _this.userObject.AdvanceDetails;
                    _this.AdvanceDetails.forEach(function (element) {
                        if (element.Card == "0" || element.Card == 0) {
                            element.carddisable = true;
                        }
                        if (element.Cash == "0" || element.Cash == 0) {
                            element.cashdisable = true;
                        }
                    });
                }
                else {
                    _this.AdvanceDetails = _this.AdvanceDetails;
                }
                _this.rgid = _this.userObj.ID;
                _this.tripDeatilsArray = _this.userObject.tripDeatilsArray;
                setTimeout(function () {
                    _this.tripDeatilsArray.forEach(function (element) {
                        element.Actions = "NoUpdate";
                        element.ArrivalDate = new Date(element.ArrivalDate === null ? element.ActualDate : element.ArrivalDate);
                        element.TravelDate = new Date(element.TravelDate);
                        element.ActualDate = new Date(element.ActualDate);
                        element.minDate = new Date(element.ActualDate);
                        element.minTravelDate = new Date(element.ActualDate);
                    });
                }, 2000);
                _this.DependentAdd = _this.userObject.DependentAdd;
                if (_this.userObj.TripType === "RoundTrip" ||
                    _this.userObj.TripType === "OneWay") {
                    _this.userObj.FromCity = _this.tripDeatilsArray[0].Form;
                    _this.userObj.ToCity = _this.tripDeatilsArray[0].To;
                }
                if (_this.userObj.TripType === "MultiCity") {
                    _this.userObj.FromCity = _this.tripDeatilsArray[0].Form;
                    _this.userObj.ToCity = _this.tripDeatilsArray[0].Form;
                }
                _this.AdvanceDetails.forEach(function (element) {
                    element.Card = element.Card ? Number.parseFloat(element.Card) : 0;
                    element.Cash = element.Cash ? Number.parseFloat(element.Cash) : 0;
                });
                _this.isTableShow = true;
                _this.informService
                    .GetDependentsById(_this.userObj.Title)
                    .then(function (resp) {
                    _this.DependentArrayView = resp;
                    if (_this.DependentArrayView && _this.DependentArrayView.length > 0) {
                        _this.DependentArrayView.forEach(function (item) {
                            item.Selected = false;
                            item.DOBPassport = new Date(item.DOBPassport);
                            item.PassportExpiryDate = new Date(item.PassportExpiryDate);
                        });
                        _this.DependentAdd.forEach(function (response) {
                            _this.DependentArrayView.forEach(function (p) {
                                _this.isDependent = true;
                                if (response.GivenName == p.GivenName &&
                                    response.SurName == p.SurName) {
                                    p.Selected = true;
                                    p.VisaValidTill = new Date(response.VisaValidTill);
                                    p.VisaStatus = response.VisaStatus;
                                    p.TypeofVisa = response.TypeofVisa;
                                    p.VisaNo = response.VisaNumber;
                                    p.RejectionReason = response.RejectionReason;
                                }
                            });
                        });
                        _this.firstDependentIndex = _this.DependentArrayView.findIndex(function (item) { return item.Selected; });
                    }
                });
                if (_this.userObj.TravelType === 'International') {
                    if (_this.userObj.Travel_x0020_For === "Self") {
                        _this.checkInterAssPass();
                    }
                    else if (_this.userObj.Travel_x0020_For === "Dependent") {
                        _this.checkInterDepPass();
                    }
                    else if (_this.userObj.Travel_x0020_For === "Self along with Dependents") {
                        _this.checkInterDepPass();
                        _this.checkInterAssPass();
                    }
                }
                _this.GetTickets();
                (_this.userObj.ReportingDate = new Date(_this.userObj.ReportingDate)),
                    _this.informService.getCostDetails(_this.rgid).then(function (response) {
                        _this.Costdetails = response;
                        var AmountPaid = 0.0;
                        _this.Costdetails.forEach(function (element) {
                            element.TotalCost ? Number.parseFloat(element.TotalCost) : 0;
                            AmountPaid =
                                Number.parseFloat(AmountPaid) +
                                    Number.parseFloat(element.TotalCost);
                        });
                        _this.userObj.Cost = AmountPaid;
                    });
                _this.informService.GetDepertName().then(function (res) {
                    _this.Depart = res;
                });
                _this.informService.GetBookingNames().then(function (res) {
                    _this.BookingNames = res;
                });
                _this.informService
                    .GetProject(_this.userObj.EmployeeID)
                    .then(function (res) {
                    _this.projectoaid = res;
                    _this.projectoaid.forEach(function (element) {
                        element.deploymentdate__c = new Date(element.deploymentdate__c);
                        element.enddate__c = new Date(element.enddate__c);
                    });
                    var checkDate = new Date();
                    for (var i = 0; i < _this.BookingNames.length; i++) {
                        var ele = _this.BookingNames[i];
                        for (var j = 0; j < _this.projectoaid.length; j++) {
                            var res = _this.projectoaid[j];
                            if (ele &&
                                ele.project_id == res.bookingprojectoaid__c &&
                                (ele.projectdepartmentname__c != null ||
                                    ele.projectdepartmentname__c != undefined) &&
                                checkDate >= res.deploymentdate__c &&
                                checkDate <= res.enddate__c) {
                                _this.common.push(ele);
                            }
                        }
                    }
                    _this.el = _this.common.find(function (e) { return e.ProjectList == _this.userObj.Project; });
                    if (_this.el != undefined && (_this.el.projectdepartmentname__c != undefined ||
                        _this.el.projectdepartmentname__c != null)) {
                        _this.Delivery = _this.Depart.find(function (eleme) {
                            return eleme.Department_name == _this.el.projectdepartmentname__c;
                        });
                    }
                    else {
                        _this.Delivery = _this.Depart.find(function (eleme) { return eleme.Department_name == _this.userObj.Department; });
                    }
                    if (_this.Delivery.department_type_name != null ||
                        _this.Delivery.department_type_name != undefined) {
                        if (_this.Delivery.department_type_name == "DELIVERY") {
                            _this.DeliverySource = _this.informService.TravelCategory.filter(function (eleme) { return eleme.department_type_name == "DELIVERY"; });
                            _this.userObj.IsProjectTravel = true;
                        }
                        else {
                            _this.DeliverySource = _this.informService.TravelCategory.filter(function (eleme) { return eleme.department_type_name != "DELIVERY"; });
                            _this.userObj.IsProjectTravel = false;
                        }
                    }
                    setTimeout(function () {
                        if (_this.Hrinfo && _this.Hrinfo.length > 0) {
                            if (_this.RId != null &&
                                _this.RId != undefined &&
                                _this.Appkey === "Reschedule") {
                                var isDMavailable = false;
                                var isTPavailable = false;
                                var FMSuperior_1;
                                var FMSuperSuperior = void 0;
                                var Account = void 0;
                                if (_this.el.accountmanagerprismcode__c != null ||
                                    _this.el.accountmanagerprismcode__c != undefined) {
                                    Account = _this.Hrinfo.find(function (el) { return _this.el.accountmanagerprismcode__c == el.Title; });
                                }
                                var FM_1 = _this.Hrinfo.find(function (el) { return _this.informService.Current.EmployeeID == el.Title; });
                                if (FM_1 != null || FM_1 != undefined) {
                                    FMSuperior_1 = _this.Hrinfo.find(function (el) { return FM_1.functional_reporting_to == el.Title; });
                                    FMSuperSuperior = _this.Hrinfo.find(function (el) { return FMSuperior_1.functional_reporting_to == el.Title; });
                                    _this.userObj.ApprovalAuthority = FM_1.maveric_email_id;
                                }
                                if (FMSuperior_1 != null || FMSuperior_1 != undefined) {
                                    _this.userObj.ApproversSuperior =
                                        FMSuperior_1.maveric_email_id;
                                }
                                if (_this.el.deliverymanagerprismcode__c != null ||
                                    _this.el.deliverymanagerprismcode__c != undefined) {
                                    _this.DM = _this.Hrinfo.find(function (el) { return _this.el.deliverymanagerprismcode__c == el.Title; });
                                    if (_this.DM != null || _this.DM != undefined) {
                                        _this.DMSuperior = _this.Hrinfo.find(function (el) { return _this.DM.functional_reporting_to == el.Title; });
                                    }
                                    isDMavailable = true;
                                }
                                if (_this.el.technicalpartnerprismcode__c != null ||
                                    _this.el.technicalpartnerprismcode__c != undefined) {
                                    _this.TP = _this.Hrinfo.find(function (el) { return _this.el.technicalpartnerprismcode__c == el.Title; });
                                    if (_this.TP != null || _this.TP != undefined) {
                                        _this.TPSuperior = _this.Hrinfo.find(function (el) { return _this.TP.functional_reporting_to == el.Title; });
                                    }
                                    isTPavailable = true;
                                }
                                if (isDMavailable && isTPavailable) {
                                    if (_this.DM.maveric_email_id ==
                                        _this.informService.Current.MailID) {
                                        _this.EditApprovalAuthority = _this.TP.maveric_email_id;
                                        _this.EditApproversSuperior = _this.TPSuperior.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                    else if (_this.TP.maveric_email_id ==
                                        _this.informService.Current.MailID) {
                                        if (_this.TPSuperior != null ||
                                            _this.TPSuperior != undefined) {
                                            _this.TPSuperSuperior = _this.Hrinfo.find(function (el) {
                                                return _this.TPSuperior.functional_reporting_to == el.Title;
                                            });
                                        }
                                        _this.EditApprovalAuthority = _this.TPSuperior.maveric_email_id;
                                        _this.EditApproversSuperior = _this.TPSuperSuperior.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                    else {
                                        _this.EditApprovalAuthority = _this.DM.maveric_email_id;
                                        _this.EditApproversSuperior = _this.TP.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                }
                                else if (!isDMavailable && isTPavailable) {
                                    if (_this.TP.maveric_email_id ==
                                        _this.informService.Current.MailID) {
                                        if (_this.TPSuperior != null ||
                                            _this.TPSuperior != undefined) {
                                            _this.TPSuperSuperior = _this.Hrinfo.find(function (el) {
                                                return _this.TPSuperior.functional_reporting_to == el.Title;
                                            });
                                        }
                                        _this.EditApprovalAuthority = _this.TPSuperior.maveric_email_id;
                                        _this.EditApproversSuperior = _this.TPSuperSuperior.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                    else {
                                        _this.EditApprovalAuthority = _this.TP.maveric_email_id;
                                        _this.EditApproversSuperior = _this.TPSuperior.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                }
                                else if (isDMavailable && !isTPavailable) {
                                    if (_this.DM.maveric_email_id ==
                                        _this.informService.Current.MailID) {
                                        _this.EditApprovalAuthority = _this.DMSuperior.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.DMSuperiorSuper = _this.Hrinfo.find(function (el) {
                                            return _this.DMSuperior.functional_reporting_to == el.Title;
                                        });
                                        _this.EditApproversSuperior = _this.DMSuperiorSuper.maveric_email_id;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                    else {
                                        _this.EditApprovalAuthority = _this.DM.maveric_email_id;
                                        _this.EditApproversSuperior = _this.DMSuperior.maveric_email_id;
                                        _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                        _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    }
                                }
                                else if (!isDMavailable && !isTPavailable) {
                                    _this.EditApprovalAuthority = FMSuperior_1.maveric_email_id;
                                    _this.EditApproversSuperior =
                                        FMSuperSuperior.maveric_email_id;
                                    _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                    _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                }
                                else {
                                    _this.EditApprovalAuthority = FMSuperior_1.maveric_email_id;
                                    _this.EditApproversSuperior =
                                        FMSuperSuperior.maveric_email_id;
                                    _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                    _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                }
                                if (_this.EditApprovalAuthority == _this.EditApproversSuperior ||
                                    _this.informService.Current.MailID ==
                                        _this.EditApprovalAuthority ||
                                    _this.informService.Current.MailID ==
                                        _this.EditApproversSuperior) {
                                    _this.EditApprovalAuthority = "";
                                    _this.EditApproversSuperior = "";
                                    _this.userObj.ApprovalAuthority = _this.EditApprovalAuthority;
                                    _this.userObj.ApproversSuperior = _this.EditApproversSuperior;
                                    _this.toaster.errorToastr("unable to fetch approval details please contact administrator");
                                }
                            }
                        }
                    }, 5000);
                });
            });
        }
    };
    ViewTicketDetailsComponent.prototype.showMoreInfo = function (template, index, isUserObj) {
        isUserObj ? this.selectedDependantIndex = -1 :
            this.selectedDependantIndex = index;
        this.bsModalRef = this.modalService.show(template, this.config);
    };
    ViewTicketDetailsComponent.prototype.GetDependentsList = function () {
        var _this = this;
        this.informService.GetDependents().then(function (res) {
            _this.DependentArrayView = res;
            if (_this.DependentArrayView && _this.DependentArrayView.length > 0) {
                _this.DependentArrayView.forEach(function (item) {
                    item.Selected = false;
                    item.DOBPassport = new Date(item.DOBPassport);
                    item.PassportExpiryDate = new Date(item.PassportExpiryDate);
                });
            }
        });
    };
    ViewTicketDetailsComponent.prototype.CalculateAge = function (d) {
        return new Date().getFullYear() - new Date(d).getFullYear();
    };
    ViewTicketDetailsComponent.prototype.checkInterAssPass = function () {
        var _this = this;
        for (var i = 0; i < this.tripDeatilsArray.length; i++) {
            if (this.tripDeatilsArray[i].TravelDate != null && this.tripDeatilsArray[i].TravelDate != "") {
                this.tripDeatilsArray[i].TravelDate = new Date(this.tripDeatilsArray[i].TravelDate);
                if (this.userObj.PassportExpiryDate < this.tripDeatilsArray[i].TravelDate) {
                    this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                    this.toaster.errorToastr("Travel Date should be on (or) before passport expiry date");
                    setTimeout(function () {
                        _this.tripDeatilsArray[i].TravelDate = null;
                        if (_this.userObj.Travel_x0020_For === "Self along with Dependents") {
                            _this.checkInterDepPass();
                        }
                    }, 10);
                    break;
                }
                else {
                    if (this.tripDeatilsArray[i].TravelDate >= this.PassportExpDate) {
                        this.tripDeatilsArray[i].isPasswordExpireInSixMnt = true;
                    }
                    else {
                        this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
                    }
                }
            }
            else {
                this.tripDeatilsArray[i].isPasswordExpireInSixMnt = false;
            }
            var data = this.tripDeatilsArray.filter(function (x) { return x.isPasswordExpireInSixMnt === true; });
            this.isPasswordExpireInSixMnt = data.length ? true : false;
        }
    };
    ViewTicketDetailsComponent.prototype.checkInterDepPass = function () {
        for (var j = 0; j < this.DependentAdd.length; j++) {
            var ele = this.DependentAdd[j];
            ele.PassportExpiryDate = new Date(ele.PassportExpiryDate);
            for (var k = 0; k < this.tripDeatilsArray.length; k++) {
                if (this.tripDeatilsArray[k].TravelDate != null && this.tripDeatilsArray[k].TravelDate != "" && this.tripDeatilsArray != undefined) {
                    this.tripDeatilsArray[k].TravelDate = new Date(this.tripDeatilsArray[k].TravelDate);
                    if (ele.PassportExpiryDate < this.tripDeatilsArray[k].TravelDate) {
                        this.tripDeatilsArray[k].DependSixMnt = false;
                        this.toaster.errorToastr(" Travel Date should be on (or) before dependent passport expiry date");
                        for (var d = k; k < this.tripDeatilsArray.length; k++) {
                            this.tripDeatilsArray[d].TravelDate = null;
                            this.tripDeatilsArray[d].DependSixMnt = false;
                        }
                    }
                    else {
                        if (this.tripDeatilsArray[k].TravelDate >= ele.DepndPassportExpDate) {
                            this.tripDeatilsArray[k].DependSixMnt = true;
                        }
                    }
                }
                else {
                    this.tripDeatilsArray[k].DependSixMnt = false;
                }
                var data = this.tripDeatilsArray.filter(function (x) { return x.DependSixMnt === true; });
                this.DependSixMnt = data.length ? true : false;
            }
        }
    };
    ViewTicketDetailsComponent.prototype.GetTickets = function () {
        var _this = this;
        this.informService.GetTravelTicket(this.rgid).then(function (res) {
            _this.TicketFiles = res;
            _this.TicketFiles.forEach(function (element) {
                var temp = {};
                temp.FileName = element.FileName;
                temp.CreatedTime = element.CreatedTime;
                temp.CanDisplay = false;
                temp.CanRemove = false;
                // this.canAttach.push(temp);
            });
            _this.filesData = JSON.parse(_this.userObject.TravelRequest.FileName);
            var _loop_1 = function (index) {
                var ele = _this.TicketFiles[index];
                if (_this.filesData && _this.filesData.length > 0) {
                    if (_this.filesData.findIndex(function (e) { return e.FileName === ele.FileName; }) > -1) {
                        ele.CanDisplay = true;
                        ele.CanRemove = false;
                    }
                    else {
                        ele.CanDisplay = true;
                        ele.CanRemove = true;
                    }
                }
                else {
                    ele.CanDisplay = true;
                    ele.CanRemove = true;
                }
            };
            for (var index = 0; index < _this.TicketFiles.length; index++) {
                _loop_1(index);
            }
        });
    };
    ViewTicketDetailsComponent.prototype.CancelBack = function () {
        this.router.navigate(["/viewticket"]);
    };
    ViewTicketDetailsComponent.prototype.download = function (file, name) {
        Object(file_saver__WEBPACK_IMPORTED_MODULE_6__["saveAs"])("https://mavericsystems.sharepoint.com/sites/app_data_center/_layouts/Download.aspx?sourceurl=" + file, name);
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])("file"),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
    ], ViewTicketDetailsComponent.prototype, "file", void 0);
    ViewTicketDetailsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-view-ticket-details',
            template: __webpack_require__(/*! ./view-ticket-details.component.html */ "./src/app/view-ticket-details/view-ticket-details.component.html"),
            styles: [__webpack_require__(/*! ./view-ticket-details.component.css */ "./src/app/view-ticket-details/view-ticket-details.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_2__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_5__["ToastrManager"],
            ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_4__["BsModalService"]])
    ], ViewTicketDetailsComponent);
    return ViewTicketDetailsComponent;
}());



/***/ }),

/***/ "./src/app/view-ticket/view-ticket.component.css":
/*!*******************************************************!*\
  !*** ./src/app/view-ticket/view-ticket.component.css ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXctdGlja2V0L3ZpZXctdGlja2V0LmNvbXBvbmVudC5jc3MifQ== */"

/***/ }),

/***/ "./src/app/view-ticket/view-ticket.component.html":
/*!********************************************************!*\
  !*** ./src/app/view-ticket/view-ticket.component.html ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n  <h4 class=\"card-header\">View Ticket</h4>\r\n  <div class=\"row\">\r\n    <div class=\"col-md-7 mt-3 mb-3\"></div>\r\n    <div class=\"col-md-2 mt-3 mb-3 ml-5\">\r\n      <select [(ngModel)]=\"filterKey\" name=\"filterKey\" class=\"form-control\" (change)=\"filterKeyChanged()\">\r\n        <option *ngFor=\"let item of filterDropdown\" [value]=\"item.value\">{{item.displayName}}</option>\r\n      </select>\r\n    </div>\r\n    <div class=\"col-md-2 mt-3 mb-3 ml-5\">\r\n      <input type=\"text\" autocomplete=\"off\" class=\"form-control\" name=\"searchKey\" [(ngModel)]=\"searchKey\"\r\n        placeholder=\"Search\" (ngModelChange)=\"searchKeyChanged()\" />\r\n    </div>\r\n  </div>\r\n  <div class=\"card-body\">\r\n    <div class=\"mt-5\" *ngIf=\"sourceData.length == 0\">\r\n      <h5 class=\"text-center mt-5\">No data available</h5>\r\n    </div>\r\n    <div class=\"\" *ngIf=\"sourceData.length > 0\">\r\n      <table id=\"table1\" datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th> Travel Request No </th>\r\n            <th> Associate Name </th>\r\n            <th> Project Name </th>\r\n            <th> Reporting Date </th>\r\n            <th> Travel Purpose </th>\r\n            <th> Travel Type </th>\r\n            <th> Travel Status </th>\r\n            <th class=\"text-center\"> Action </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let x of filteredData\">\r\n            <td>{{x.Id}}</td>\r\n            <td>{{x.EmployeeName}} ({{x.EmployeeID}})</td>\r\n            <td>{{x.Project}}</td>\r\n            <td>{{x.ReportingDate | date: 'dd-MMM-yyyy'}}</td>\r\n            <td>{{x.TravelPurpose}}</td>\r\n            <td>{{x.TravelType}}</td>\r\n            <td>{{x.TravelStatus}}</td>\r\n            <td class=\"text-center\">\r\n              <span class=\"pl-2\">\r\n                <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\"\r\n                  (click)=\"view(x.GUID)\">View</button>\r\n              </span>\r\n            </td>\r\n\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./src/app/view-ticket/view-ticket.component.ts":
/*!******************************************************!*\
  !*** ./src/app/view-ticket/view-ticket.component.ts ***!
  \******************************************************/
/*! exports provided: ViewTicketComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewTicketComponent", function() { return ViewTicketComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");





var ViewTicketComponent = /** @class */ (function () {
    function ViewTicketComponent(infoService, router, toaster) {
        this.infoService = infoService;
        this.router = router;
        this.toaster = toaster;
        this.dtOptions = {};
        this.sourceData = [];
        this.filteredData = [];
        this.filterKey = 'Travel Approved';
        this.searchKey = '';
        this.filterDropdown = [
            { value: "Travel Approved", displayName: "Travel Approved" },
            { value: "Booked", displayName: "Booked" },
            { value: "Reschedule Approved", displayName: "Reschedule Approved" },
            { value: "Rescheduled", displayName: "Rescheduled" },
            { value: "Cancellation Requested", displayName: "Cancellation Requested" },
            { value: "Cancelled", displayName: "Cancelled" },
            { value: "All", displayName: "All" }
        ];
    }
    ViewTicketComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dtOptions = {
            pagingType: 'full_numbers',
            pageLength: 10,
            paging: false,
            searching: false,
            info: false,
            ordering: false
        };
        this.infoService.GetCurrentUser(function () {
            _this.infoService.GetTravelProfileDetails().then(function (response) {
                if (!(response && response.length > 0)) {
                    _this.router.navigate(['/MyProfile']);
                    _this.toaster.successToastr('Please update your profile');
                }
            });
            _this.infoService.GetTravelRequestFull(true).then(function (result) {
                if (result && result.length > 0) {
                    _this.sourceData = result;
                    _this.sourceData.forEach(function (element) {
                        element.ReportingDate = new Date(element.ReportingDate);
                    });
                    _this.filteredData = _this.sourceData.filter(function (x) { return x.TravelStatus == _this.filterKey; });
                }
            });
        });
    };
    ViewTicketComponent.prototype.view = function (id) {
        this.router.navigate(['/viewticketdetails', id]);
    };
    ViewTicketComponent.prototype.filterKeyChanged = function () {
        this.searchKey = '';
        this.filteringData();
    };
    ViewTicketComponent.prototype.searchKeyChanged = function () {
        var _this = this;
        if (this.searchKey && this.searchKey.trim().length > 0) {
            this.filteringData();
            this.filteredData = this.filteredData.filter(function (s) {
                return (s.Id && (s.Id.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.EmployeeName && (s.EmployeeName.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.EmployeeID && (s.EmployeeID.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.Project && (s.Project.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.ReportingDate && (s.ReportingDate.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.TravelPurpose && (s.TravelPurpose.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.TravelType && (s.TravelType.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.TravelStatus && (s.TravelStatus.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0));
            });
        }
        else {
            this.filteringData();
        }
    };
    ViewTicketComponent.prototype.filteringData = function () {
        var _this = this;
        if (this.filterKey == 'All') {
            this.filteredData = this.sourceData;
        }
        else {
            this.filteredData = this.sourceData.filter(function (x) { return x.TravelStatus == _this.filterKey; });
        }
    };
    ViewTicketComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-view-ticket',
            template: __webpack_require__(/*! ./view-ticket.component.html */ "./src/app/view-ticket/view-ticket.component.html"),
            styles: [__webpack_require__(/*! ./view-ticket.component.css */ "./src/app/view-ticket/view-ticket.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_4__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_3__["ToastrManager"]])
    ], ViewTicketComponent);
    return ViewTicketComponent;
}());



/***/ }),

/***/ "./src/app/view-travel-request/view-travel-request.component.css":
/*!***********************************************************************!*\
  !*** ./src/app/view-travel-request/view-travel-request.component.css ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "tr.Space {\r\n    color: blue;\r\n    /* white-space: pre; */\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlldy10cmF2ZWwtcmVxdWVzdC92aWV3LXRyYXZlbC1yZXF1ZXN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0lBQ1gsc0JBQXNCO0FBQzFCIiwiZmlsZSI6InNyYy9hcHAvdmlldy10cmF2ZWwtcmVxdWVzdC92aWV3LXRyYXZlbC1yZXF1ZXN0LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0ci5TcGFjZSB7XHJcbiAgICBjb2xvcjogYmx1ZTtcclxuICAgIC8qIHdoaXRlLXNwYWNlOiBwcmU7ICovXHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/view-travel-request/view-travel-request.component.html":
/*!************************************************************************!*\
  !*** ./src/app/view-travel-request/view-travel-request.component.html ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"row mr-3 mb-3\" style=\"float: right;\">\r\n  <button type=\"btn\" class=\"btn btn-primary\" (click)=\"BackToNavigate()\">Back</button>\r\n</div>\r\n<div>\r\n  <h4 class=\"ml-3\">Version History</h4>\r\n</div>\r\n<div class=\"card-body\" *ngIf=\"FullDetails && FullDetails.length > 0\">\r\n  <table style=\"width: 95%; margin-left: 3%;\">\r\n    <tr  class=\"Space\" style=\"width: 100%;\">\r\n      <td style=\"width: 8%;margin-left: 2%;\">Modified By</td>\r\n      <td style=\"width: 10%;\">Modified On</td>\r\n    </tr>\r\n    <tr *ngFor=\"let i = index ; let version of FullDetails\" style=\"vertical-align: top; margin-bottom: 10px;margin-top: 10px; width:90%; margin-left: 2%;\">\r\n      <td >\r\n    <tr class=\"Space\">\r\n      {{version.Editor.LookupValue}}\r\n    </tr>\r\n    <table>\r\n      <tr *ngIf=\"CheckItemChange('TravelStatus', i)\">\r\n        <td>Travel Status</td>\r\n        <td>:{{version.TravelStatus}} </td>\r\n      </tr>\r\n      <tr *ngIf=\"CheckItemChange('Remarks', i)\">\r\n        <td>Remarks</td>\r\n        <td>:{{version.Remarks}}</td>\r\n      </tr>\r\n    </table>\r\n    </td>\r\n    <td style=\"vertical-align: top; margin-bottom: 10px;margin-top: 10px;width:30%; margin-left: 2%;\">\r\n      <tr>\r\n        {{version.Created | date:'dd-MMM-yyyy'}}\r\n      </tr>\r\n    </td>\r\n    </tr>\r\n  </table>\r\n</div>"

/***/ }),

/***/ "./src/app/view-travel-request/view-travel-request.component.ts":
/*!**********************************************************************!*\
  !*** ./src/app/view-travel-request/view-travel-request.component.ts ***!
  \**********************************************************************/
/*! exports provided: ViewTravelRequestComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewTravelRequestComponent", function() { return ViewTravelRequestComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");




var ViewTravelRequestComponent = /** @class */ (function () {
    function ViewTravelRequestComponent(informService, activatedRoute, router) {
        this.informService = informService;
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.dtOptions = {};
        this.FullDetails = [];
        this.Modified = [];
        if (this.activatedRoute.snapshot.params["id"]) {
            this.Id = +atob(this.activatedRoute.snapshot.params["id"]);
        }
    }
    ViewTravelRequestComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dtOptions = {
            pagingType: 'full_numbers',
            pageLength: 10,
            paging: true,
            searching: true,
            info: true,
            ordering: false
        };
        if (this.Id != null && this.Id > 0) {
            this.informService.GetAllVersions(this.Id).then(function (res) {
                _this.FullDetails = res;
                // for (let index = res.length - 1; index > 0; index--) {
                //   //const element = res[index];
                //   //if (this.FullDetails[index].Form) {
                //     if (res[index].Form == res[index - 1].Form) {
                //       res[index - 1].Form = "";
                //     }
                //  // }
                // }
            });
        }
    };
    ViewTravelRequestComponent.prototype.BackToNavigate = function () {
        this.router.navigate(['/UpdateTicket']);
    };
    ViewTravelRequestComponent.prototype.CheckItemChange = function (key, index) {
        if (index >= this.FullDetails.length - 1) {
            return true;
        }
        if (this.FullDetails[index][key] == this.FullDetails[index + 1][key]) {
            return false;
        }
        else {
            return true;
        }
    };
    ViewTravelRequestComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-view-travel-request',
            template: __webpack_require__(/*! ./view-travel-request.component.html */ "./src/app/view-travel-request/view-travel-request.component.html"),
            styles: [__webpack_require__(/*! ./view-travel-request.component.css */ "./src/app/view-travel-request/view-travel-request.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_2__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"]])
    ], ViewTravelRequestComponent);
    return ViewTravelRequestComponent;
}());



/***/ }),

/***/ "./src/app/visa-officer-location/visa-officer-location.component.css":
/*!***************************************************************************!*\
  !*** ./src/app/visa-officer-location/visa-officer-location.component.css ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Zpc2Etb2ZmaWNlci1sb2NhdGlvbi92aXNhLW9mZmljZXItbG9jYXRpb24uY29tcG9uZW50LmNzcyJ9 */"

/***/ }),

/***/ "./src/app/visa-officer-location/visa-officer-location.component.html":
/*!****************************************************************************!*\
  !*** ./src/app/visa-officer-location/visa-officer-location.component.html ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n  <h4 class=\"card-header\">Visa Officer Location Mapping</h4>\r\n  <div class=\"row\">\r\n    <div class=\"col-md-8 mt-3 mb-3\"></div>\r\n    <div class=\"col-md-1 mt-3 mb-3\">\r\n        <button class=\"btn btn-primary px-4\" type=\"button\" (click)=\"openMapPopUp(MapOfficerPopup)\">Add</button>\r\n    </div>\r\n    <div class=\"col-md-2 mt-3 mb-3 ml-5\">\r\n      <input type=\"text\" autocomplete=\"off\" class=\"form-control\" name=\"searchKey\" [(ngModel)]=\"searchKey\"\r\n        placeholder=\"Search\" (ngModelChange)=\"searchKeyChanged()\" />\r\n    </div>\r\n  </div>\r\n  <div class=\"card-body\">\r\n    <div class=\"mt-5\" *ngIf=\"sourceData.length == 0\">\r\n      <h5 class=\"text-center mt-5\">No data available</h5>\r\n    </div>\r\n    <div class=\"\" *ngIf=\"sourceData.length > 0\">\r\n      <table id=\"table1\" datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th> S.No. </th>\r\n            <th> Visa Officer Name </th>\r\n            <th> Visa Officer Id </th>\r\n            <th> Visa Officer Mail Id </th>\r\n            <th> Location </th>\r\n            <th> Country </th>\r\n            <th> Region </th>\r\n            <th class=\"text-center\"> Action </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let x of filteredData;let i=index\">\r\n            <td>{{i+1}}</td>\r\n            <td>{{x.officer_name}}</td>\r\n            <td>{{x.officer_employee_id}}</td>\r\n            <td>{{x.officer_mail_id}}</td>\r\n            <td>{{x.location}}</td>\r\n            <td>{{x.country}}</td>\r\n            <td>{{x.region}}</td>\r\n            <td class=\"text-center\">\r\n              <span class=\"pl-2\">\r\n                <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4\" (click)=\"edit(x,MapOfficerPopup)\">Edit</button>\r\n              </span>\r\n              <span class=\"pl-2\">\r\n                <button id=\"btnCancel\" type=\"button\" class=\"btn btn-danger px-4\" (click)=\"removeConfirmation(x, confirmationPopup)\">Remove</button>\r\n              </span>\r\n            </td>\r\n\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #MapOfficerPopup>\r\n  <div class=\"modal-header popup\">\r\n    <h5 class=\"modal-title text-center\">Map Visa Officer</h5>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <form #a=\"ngForm\">\r\n      <div class=\"col-md-12 form-group\">\r\n          <label for=\"location\">Location</label>\r\n          <sup>\r\n            <span>*</span>\r\n          </sup>\r\n      </div>\r\n      <div class=\"col-md-12\">\r\n        <div class=\"form-group\">\r\n          <input autocomple=\"off\" [(ngModel)]=\"mappingData.location\" autocomplete=\"off\"  name=\"location\" [typeahead]=\"locations\"\r\n          #location=\"ngModel\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"location\"\r\n          placeholder=\"Choose location\" class=\"form-control\" (typeaheadOnSelect)=\"onSelectLocation($event)\"\r\n          [ngClass]=\"{ 'is-invalid': (a.submitted || location.touched) && location.invalid }\" required>\r\n          <div *ngIf=\"(a.submitted || location.touched) && location.invalid\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"location.errors['required']\">Location is required</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-12 form-group\">\r\n          <label for=\"officer\">Visa Officer</label>\r\n          <sup>\r\n            <span>*</span>\r\n          </sup>\r\n      </div>\r\n      <div class=\"col-md-12\">\r\n        <div class=\"form-group\">\r\n          <input autocomple=\"off\" [(ngModel)]=\"mappingData.officer\" autocomplete=\"off\" name=\"officer\" [typeahead]=\"users\"\r\n          #officer=\"ngModel\" [typeaheadOptionsLimit]=\"7\" [typeaheadMinLength]=\"0\" typeaheadOptionField=\"full_name\"\r\n          placeholder=\"Choose officer\" class=\"form-control\" (typeaheadOnSelect)=\"onSelectOfficer($event)\"\r\n          [ngClass]=\"{ 'is-invalid': (a.submitted || officer.touched) && officer.invalid }\" required>\r\n          <div *ngIf=\"(a.submitted || officer.touched) && officer.invalid\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"officer.errors['required']\">Officer is required</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row text-center request\">\r\n        <button id=\"btnsub\" type=\"submit\" class=\"btn btn-primary px-3\" [disabled]=\"location.invalid || officer.invalid\"\r\n          (click)=\"submit(a)\" [innerText]=\"mappingData.ID?'Update':'Submit'\"></button>\r\n        <button id=\"btnClear\" type=\"submit\" class=\"btn btn-danger px-4\" (click)=\"cancel()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #confirmationPopup>\r\n  <div class=\"modal-body confirm\">\r\n    <h5 class=\"modal-title text-center\">Are you sure you want to remove?</h5>\r\n    <div class=\"row pt-3\">\r\n      <div class=\"col-md-5\"> </div>\r\n      <div class=\"col-md-1\">\r\n        <button type=\"submit\" class=\"btn btn-primary px-4\" (click)=\"remove()\">Yes</button>\r\n      </div>\r\n      <div class=\"col-md-1\">\r\n        <button type=\"button\" class=\"btn btn-danger px-4\" (click)=\"denyRemoval()\">No</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>"

/***/ }),

/***/ "./src/app/visa-officer-location/visa-officer-location.component.ts":
/*!**************************************************************************!*\
  !*** ./src/app/visa-officer-location/visa-officer-location.component.ts ***!
  \**************************************************************************/
/*! exports provided: VisaOfficerLocationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VisaOfficerLocationComponent", function() { return VisaOfficerLocationComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm5/ngx-bootstrap-modal.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");







var VisaOfficerLocationComponent = /** @class */ (function () {
    function VisaOfficerLocationComponent(infoService, router, toaster, modalService) {
        this.infoService = infoService;
        this.router = router;
        this.toaster = toaster;
        this.modalService = modalService;
        this.dtOptions = {};
        this.sourceData = [];
        this.filteredData = [];
        this.searchKey = '';
        this.config = {
            backdrop: true,
            class: "modal-xl",
            ignoreBackdropClick: true,
        };
        this.mappingData = {};
    }
    VisaOfficerLocationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dtOptions = {
            pagingType: 'full_numbers',
            pageLength: 10,
            paging: false,
            searching: false,
            info: false,
            ordering: false
        };
        this.infoService.GetCurrentUser(function () {
            _this.infoService.GetTravelProfileDetails().then(function (response) {
                if (!(response && response.length > 0)) {
                    _this.router.navigate(['/MyProfile']);
                    _this.toaster.successToastr('Please update your profile');
                }
            });
            _this.infoService.GetLocation().then(function (res) {
                _this.locations = res;
            });
            _this.infoService.GetHrInfo().then(function (data) {
                _this.users = data;
            });
            _this.getData();
        });
    };
    VisaOfficerLocationComponent.prototype.getData = function () {
        var _this = this;
        this.infoService.GetVisaOfficerLocation().then(function (result) {
            if (result && result.length > 0) {
                _this.sourceData = result;
                _this.sourceData.forEach(function (element) {
                    element.ReportingDate = new Date(element.ReportingDate);
                });
                _this.filteredData = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["cloneDeep"])(_this.sourceData);
            }
        });
    };
    VisaOfficerLocationComponent.prototype.view = function (id) {
        this.router.navigate(['/viewticketdetails', id]);
    };
    VisaOfficerLocationComponent.prototype.filterKeyChanged = function () {
        this.searchKey = '';
    };
    VisaOfficerLocationComponent.prototype.searchKeyChanged = function () {
        var _this = this;
        if (this.searchKey && this.searchKey.trim().length > 0) {
            this.filteredData = this.filteredData.filter(function (s) {
                return (s.officer_name && (s.officer_name.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.officer_employee_id && (s.officer_employee_id.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.officer_mail_id && (s.officer_mail_id.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.location && (s.location.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0));
            });
        }
        else {
            this.filteredData = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["cloneDeep"])(this.sourceData);
        }
    };
    VisaOfficerLocationComponent.prototype.openMapPopUp = function (MapOfficerPopup) {
        this.bsModalRef = this.modalService.show(MapOfficerPopup, this.config);
    };
    VisaOfficerLocationComponent.prototype.onSelectLocation = function (event) {
        this.mappingData.locationId = event.item.ID;
        this.mappingData.countryId = event.item.country_id;
        this.mappingData.country = event.item.country;
        this.mappingData.region = event.item.region;
        this.mappingData.regionId = event.item.region_id;
    };
    VisaOfficerLocationComponent.prototype.onSelectOfficer = function (event) {
        this.mappingData.officerId = event.item.Title;
        this.mappingData.officerMailId = event.item.maveric_email_id;
    };
    VisaOfficerLocationComponent.prototype.submit = function (form) {
        var _this = this;
        var isExist = this.sourceData.find(function (item) { return item.officer_mail_id == _this.mappingData.officerMailId && item.location_id == _this.mappingData.locationId; });
        if (isExist) {
            this.toaster.errorToastr("Already mapped");
            return;
        }
        if (form.valid) {
            if (this.mappingData.ID) {
                var payload = {
                    officer_employee_id: this.mappingData.officerId,
                    officer_mail_id: this.mappingData.officerMailId,
                    officer_name: this.mappingData.officer,
                    location_id: this.mappingData.locationId,
                    location: this.mappingData.location,
                    country_id: this.mappingData.countryId,
                    country: this.mappingData.country,
                    region: this.mappingData.region,
                    region_id: this.mappingData.regionId,
                    modified_on: new Date(),
                    modified_by: this.infoService.Current.EmployeeID,
                    ID: this.mappingData.ID
                };
                this.infoService
                    .UpdateVisaOfficerLocation(payload)
                    .then(function (res) {
                    _this.getData();
                    _this.cancel();
                    _this.toaster.successToastr('Updated successfully');
                });
            }
            else {
                var payload = {
                    officer_employee_id: this.mappingData.officerId,
                    officer_mail_id: this.mappingData.officerMailId,
                    officer_name: this.mappingData.officer,
                    location_id: this.mappingData.locationId,
                    location: this.mappingData.location,
                    country_id: this.mappingData.countryId,
                    country: this.mappingData.country,
                    region: this.mappingData.region,
                    region_id: this.mappingData.regionId,
                    is_active: true,
                    created_on: new Date(),
                    created_by: this.infoService.Current.EmployeeID,
                    modified_on: new Date(),
                    modified_by: this.infoService.Current.EmployeeID,
                };
                this.infoService
                    .InsertVisaOfficerLocation(payload)
                    .then(function (res) {
                    _this.getData();
                    _this.cancel();
                    _this.toaster.successToastr('Added successfully');
                });
            }
        }
    };
    ;
    VisaOfficerLocationComponent.prototype.cancel = function () {
        this.mappingData = {};
        this.bsModalRef.hide();
    };
    VisaOfficerLocationComponent.prototype.edit = function (item, MapOfficerPopup) {
        this.mappingData.ID = item.ID;
        this.mappingData.officerId = item.officer_employee_id,
            this.mappingData.officerMailId = item.officer_mail_id,
            this.mappingData.officer = item.officer_name,
            this.mappingData.locationId = item.location_id,
            this.mappingData.location = item.location,
            this.bsModalRef = this.modalService.show(MapOfficerPopup, this.config);
    };
    VisaOfficerLocationComponent.prototype.removeConfirmation = function (item, confirmTemplate) {
        this.bsModalRef = this.modalService.show(confirmTemplate, this.config);
        this.id = item.ID;
    };
    VisaOfficerLocationComponent.prototype.remove = function () {
        var _this = this;
        this.infoService.DeleteVisaOfficerLocation(this.id).then(function (res) {
            _this.getData();
            _this.denyRemoval();
            _this.toaster.successToastr('Removed successfully');
        });
    };
    VisaOfficerLocationComponent.prototype.denyRemoval = function () {
        this.bsModalRef.hide();
        this.id = null;
    };
    VisaOfficerLocationComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-visa-officer-location',
            template: __webpack_require__(/*! ./visa-officer-location.component.html */ "./src/app/visa-officer-location/visa-officer-location.component.html"),
            styles: [__webpack_require__(/*! ./visa-officer-location.component.css */ "./src/app/visa-officer-location/visa-officer-location.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_6__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__["ToastrManager"],
            ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_5__["BsModalService"]])
    ], VisaOfficerLocationComponent);
    return VisaOfficerLocationComponent;
}());



/***/ }),

/***/ "./src/app/visa-process/visa-process.component.css":
/*!*********************************************************!*\
  !*** ./src/app/visa-process/visa-process.component.css ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Zpc2EtcHJvY2Vzcy92aXNhLXByb2Nlc3MuY29tcG9uZW50LmNzcyJ9 */"

/***/ }),

/***/ "./src/app/visa-process/visa-process.component.html":
/*!**********************************************************!*\
  !*** ./src/app/visa-process/visa-process.component.html ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n  <h4 class=\"card-header\">Visa Process</h4>\r\n  <div class=\"row\">\r\n    <div class=\"col-md-7 mt-3 mb-3\"></div>\r\n    <div class=\"col-md-2 mt-3 mb-3 ml-5\">\r\n      <select [(ngModel)]=\"filterKey\" name=\"filterKey\" class=\"form-control\" (change)=\"filteringData()\">\r\n        <option *ngFor=\"let item of filterDropdown\" [value]=\"item.value\">{{item.displayName}}</option>\r\n      </select>\r\n    </div>\r\n    <div class=\"col-md-2 mt-3 mb-3 ml-5\">\r\n      <input type=\"text\" autocomplete=\"off\" class=\"form-control\" name=\"searchKey\" [(ngModel)]=\"searchKey\"\r\n        placeholder=\"Search\" (ngModelChange)=\"searchKeyChanged()\" />\r\n    </div>\r\n  </div>\r\n  <div class=\"card-body\">\r\n\r\n    <div class=\"mt-5\" *ngIf=\"datatable1 == true && GetmyTravel && GetmyTravel.length == 0\">\r\n      <h5 class=\"text-center mt-5\">No data available</h5>\r\n    </div>\r\n    <div class=\"mt-5\" *ngIf=\"datatable1 == false && GetmyTravel && GetmyTravel.length > 0\">\r\n      <form name=\"form\" #f=\"ngForm\">\r\n        <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th> Request No</th>\r\n              <th> Associate Name</th>\r\n              <th> Project Name</th>\r\n              <th> Visa Status </th>\r\n              <th> Visa Valid Till </th>\r\n              <th> Visa No </th>\r\n              <th> Type of Visa </th>\r\n              <th> Travel Status </th>\r\n              <th> Visa Processed By </th>\r\n              <th> Country </th>\r\n              <th> Region </th>\r\n              <th> Action </th>\r\n            \r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr *ngFor=\"let i = index ; let x of filteredData\">\r\n              <td>{{x.Id}}</td>\r\n              <td>{{x.EmployeeName}} ({{x.EmployeeID}})</td>\r\n              <td>{{x.Project}}</td>\r\n              <td>{{x.VisaStatus}}</td>\r\n              <td *ngIf=\"x.VisaValidTill\">{{x.VisaValidTill | date: 'dd-MMM-yyyy'}}</td>\r\n              <td *ngIf=\"!x.VisaValidTill\">Nil</td>\r\n              <td *ngIf=\"x.VisaNo\">{{x.VisaNo}}</td>\r\n              <td *ngIf=\"!x.VisaNo\">Nil</td>\r\n              <td>{{x.TypeofVisa}}</td>\r\n              <td>{{x.TravelStatus}}</td>\r\n              <td *ngIf=\"x.processedbyname\">{{x.processedbyname}}</td>\r\n              <td *ngIf=\"!x.processedbyname\">Nil</td>\r\n              <td *ngIf=\"x.Country\">{{x.Country}}</td>\r\n              <td *ngIf=\"!x.Country\">Nil</td>\r\n              <td *ngIf=\"x.Region\">{{x.Region}}</td>\r\n              <td *ngIf=\"!x.Region\">Nil</td>\r\n              <td class=\"text-center\">\r\n                <span class=\"pl-2\">\r\n                  <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4 mb-2\"\r\n                    (click)=\"edit('VisaProcessView',x.GUID)\">View</button>\r\n                </span>\r\n                <span class=\"pl-2\" *ngIf=\"x.TravelStatus === 'Visa Pending'\">\r\n                  <button id=\"btnCancel\" type=\"button\" class=\"btn btn-primary px-4 mb-2\"\r\n                    (click)=\"edit('VisaProcess',x.GUID)\">Update</button>\r\n                </span>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./src/app/visa-process/visa-process.component.ts":
/*!********************************************************!*\
  !*** ./src/app/visa-process/visa-process.component.ts ***!
  \********************************************************/
/*! exports provided: VisaProcessComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VisaProcessComponent", function() { return VisaProcessComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_5__);






var VisaProcessComponent = /** @class */ (function () {
    function VisaProcessComponent(infoService, router, toaster) {
        this.infoService = infoService;
        this.router = router;
        this.toaster = toaster;
        this.dtOptions = {};
        this.GetmyTravel = [];
        this.MyApproval = [];
        this.userObj = {};
        this.pageShow = false;
        this.configsm = {
            backdrop: true,
            class: 'modal-xl',
            ignoreBackdropClick: true
        };
        this.comments = '';
        this.GetmyTravelById = {};
        this.GetTravelProfileInitial = [];
        this.datatable = false;
        this.datatable1 = false;
        this.Route = [];
        this.today = new Date();
        this.filteredData = [];
        this.filterKey = 'Visa Pending';
        this.filterDropdown = [
            { value: "Travel Approved", displayName: "Travel Approved" },
            { value: "Booked", displayName: "Booked" },
            { value: "Reschedule Approved", displayName: "Reschedule Approved" },
            { value: "Rescheduled", displayName: "Rescheduled" },
            { value: "Reschedule Requested", displayName: "Rescheduled Requested" },
            { value: "Reschedule Required", displayName: "Reschedule Required" },
            { value: "Cancellation Requested", displayName: "Cancellation Requested" },
            { value: "Cancelled", displayName: "Cancelled" },
            { value: "Visa Pending", displayName: "Visa Pending" },
            { value: "Visa Rejected", displayName: "Visa Rejected" },
            { value: "Void", displayName: "Void" },
            { value: "All", displayName: "All" }
        ];
        this.searchKey = '';
        this.ProxyEmail = this.infoService.getLocalStorage('ProxyEmail');
        if (this.ProxyEmail != null || this.ProxyEmail != undefined) {
            this.ProxyName = this.ProxyEmail;
        }
    }
    VisaProcessComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.userObj = this.infoService.Current;
        this.infoService.GetCurrentUser(function () {
            _this.infoService.GetTravelProfileDetails().then(function (res) {
                _this.GetTravelProfileInitial = res;
                if (_this.GetTravelProfileInitial.length > 0) {
                }
                else {
                    _this.router.navigate(['/MyProfile']);
                    _this.toaster.successToastr('Please update your profile');
                }
            });
            if (_this.ProxyName != null || _this.ProxyName != undefined) {
                _this.infoService.GetVisaSubmittedByProxy(_this.ProxyName).then(function (resp) {
                    _this.GetmyTravel = resp;
                    if (_this.GetmyTravel.length > 0) {
                        _this.datatable1 = false;
                        _this.filteringData();
                    }
                    if (_this.GetmyTravel.length == 0) {
                        _this.datatable1 = true;
                    }
                });
            }
            else {
                _this.infoService.GetVisaSubmittedList().then(function (response) {
                    _this.GetmyTravel = response;
                    if (_this.GetmyTravel.length > 0) {
                        _this.datatable1 = false;
                        _this.filteringData();
                    }
                    if (_this.GetmyTravel.length == 0) {
                        _this.datatable1 = true;
                    }
                });
            }
        });
        this.dtOptions = {
            pagingType: 'full_numbers',
            pageLength: 10,
            paging: true,
            searching: false,
            // info: true,
            ordering: false
        };
    };
    VisaProcessComponent.prototype.visaStatus = function (eve, item) {
        if (eve.value === "Submitted" || eve.value === "On-arrival" || eve.value === "Return to home country") {
            if (eve.value === "On-arrival" || eve.value === "Return to home country") {
                item.TypeofVisa = eve.value === "On-arrival" ? "On Arrival Visa" : "Return to home country visa";
            }
            this.isVisaSubmitted = true;
            item.VisaValidTill = null;
            item.VisaNo = "";
        }
        else {
            this.isVisaSubmitted = false;
        }
    };
    VisaProcessComponent.prototype.edit = function (key, id) {
        this.router.navigate(['/NewTravelRequest', key, id]);
    };
    VisaProcessComponent.prototype.filteringData = function () {
        var _this = this;
        this.searchKey = "";
        if (this.filterKey == 'All') {
            this.filteredData = Object(lodash__WEBPACK_IMPORTED_MODULE_5__["cloneDeep"])(this.GetmyTravel);
        }
        else {
            this.filteredData = Object(lodash__WEBPACK_IMPORTED_MODULE_5__["cloneDeep"])(this.GetmyTravel.filter(function (x) { return x.TravelStatus == _this.filterKey; }));
        }
    };
    VisaProcessComponent.prototype.searchKeyChanged = function () {
        var _this = this;
        if (this.searchKey && this.searchKey.trim().length > 0) {
            this.filteredData = this.filteredData.filter(function (s) {
                return (s.Id && (s.Id.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.EmployeeName && (s.EmployeeName.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.EmployeeID && (s.EmployeeID.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.Project && (s.Project.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.VisaStatus && (s.VisaStatus.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.VisaValidTill && (s.VisaValidTill.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.VisaNo && (s.VisaNo.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.TypeofVisa && (s.TypeofVisa.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.Country && (s.Country.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.Region && (s.Region.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0)) ||
                    (s.TravelStatus && (s.TravelStatus.toString().toLowerCase().indexOf(_this.searchKey.toLowerCase()) >= 0));
            });
        }
        else {
            this.filteringData();
        }
    };
    VisaProcessComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-visa-process',
            template: __webpack_require__(/*! ./visa-process.component.html */ "./src/app/visa-process/visa-process.component.html"),
            styles: [__webpack_require__(/*! ./visa-process.component.css */ "./src/app/visa-process/visa-process.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_2__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__["ToastrManager"]])
    ], VisaProcessComponent);
    return VisaProcessComponent;
}());



/***/ }),

/***/ "./src/app/visa-validities/visa-validities.component.css":
/*!***************************************************************!*\
  !*** ./src/app/visa-validities/visa-validities.component.css ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Zpc2EtdmFsaWRpdGllcy92aXNhLXZhbGlkaXRpZXMuY29tcG9uZW50LmNzcyJ9 */"

/***/ }),

/***/ "./src/app/visa-validities/visa-validities.component.html":
/*!****************************************************************!*\
  !*** ./src/app/visa-validities/visa-validities.component.html ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n  <div class=\"card-body\">\r\n    <h4 class=\"card-header\" *ngIf=\"datatable1 == false && GetmyTravel && GetmyTravel.length > 0\">My Travels</h4>\r\n    <h4 class=\"card-header\" *ngIf=\"datatable1 == true && GetmyTravel && GetmyTravel.length == 0\">My Travels</h4>\r\n    <div class=\"mt-5\" *ngIf=\"datatable1 == true && GetmyTravel && GetmyTravel.length == 0\">\r\n      <h5 class=\"text-center mt-5\">No data available</h5>\r\n    </div>\r\n    <div class=\"mt-5\" *ngIf=\"datatable1 == false && GetmyTravel && GetmyTravel.length > 0\">\r\n      <table datatable [dtOptions]=\"dtOptions\" class=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th> Request No</th>\r\n            <th> Project Name</th>\r\n            <th> Visa Valid Till </th>\r\n            <th> Type of Visa</th>\r\n            <th> Visa No </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let i = index ; let x of GetmyTravel\">\r\n            <td>{{x.Id}}</td>\r\n            <!-- <td>{{x.projectoraclecode__c}} - {{x.Project}}</td> -->\r\n            <td>{{x.Project}}</td>\r\n            <td>{{x.VisaValidTill | date: 'dd-MMM-yyyy'}}</td>\r\n            <td>{{x.TypeofVisa}}</td>\r\n            <td>{{x.VisaNo}}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./src/app/visa-validities/visa-validities.component.ts":
/*!**************************************************************!*\
  !*** ./src/app/visa-validities/visa-validities.component.ts ***!
  \**************************************************************/
/*! exports provided: VisaValiditiesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VisaValiditiesComponent", function() { return VisaValiditiesComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_info_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/info.service */ "./src/app/shared/info.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ng6-toastr-notifications */ "./node_modules/ng6-toastr-notifications/fesm5/ng6-toastr-notifications.js");





var VisaValiditiesComponent = /** @class */ (function () {
    function VisaValiditiesComponent(informService, router, toaster) {
        this.informService = informService;
        this.router = router;
        this.toaster = toaster;
        this.dtOptions = {};
        this.GetmyTravel = [];
        this.datatable1 = false;
        this.ProxyEmail = this.informService.getLocalStorage('ProxyEmail');
    }
    VisaValiditiesComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.informService.GetCurrentUser(function () {
            _this.informService.GetTravelProfileDetails().then(function (res) {
                if (res.length < 1) {
                    _this.router.navigate(['/MyProfile']);
                    _this.toaster.successToastr('Please update your profile');
                }
            });
            if (_this.ProxyEmail != null || _this.ProxyEmail != undefined) {
                _this.informService.GetVisaValiditiesWithProxy(_this.ProxyEmail).then(function (resp) {
                    _this.GetmyTravel = resp;
                    if (_this.GetmyTravel.length > 0) {
                        _this.datatable1 = false;
                    }
                    if (_this.GetmyTravel.length == 0) {
                        _this.datatable1 = true;
                    }
                });
            }
            else {
                _this.informService.GetVisaValidities().then(function (response) {
                    _this.GetmyTravel = response;
                    if (_this.GetmyTravel.length > 0) {
                        _this.datatable1 = false;
                    }
                    if (_this.GetmyTravel.length == 0) {
                        _this.datatable1 = true;
                    }
                });
            }
        });
        this.dtOptions = {
            pagingType: 'full_numbers',
            pageLength: 10,
            paging: true,
            searching: true,
            info: true,
            ordering: false
        };
        // this.informService.GetMyTravelDetails().then((res: any) => {
        //   this.GetmyTravel = res;
        // });
        // this.informService.GetMyApprovalDetails().then((temp: any) => {
        //   this.MyApproval = temp;
        // });
    };
    VisaValiditiesComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-visa-validities',
            template: __webpack_require__(/*! ./visa-validities.component.html */ "./src/app/visa-validities/visa-validities.component.html"),
            styles: [__webpack_require__(/*! ./visa-validities.component.css */ "./src/app/visa-validities/visa-validities.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_shared_info_service__WEBPACK_IMPORTED_MODULE_2__["InfoService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            ng6_toastr_notifications__WEBPACK_IMPORTED_MODULE_4__["ToastrManager"]])
    ], VisaValiditiesComponent);
    return VisaValiditiesComponent;
}());



/***/ }),

/***/ "./src/environments/environment.ts":
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
var environment = {
    production: false
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm5/platform-browser-dynamic.js");
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environments/environment */ "./src/environments/environment.ts");




if (_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
}
Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__["platformBrowserDynamic"])().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_2__["AppModule"])
    .catch(function (err) { return console.error(err); });


/***/ }),

/***/ 0:
/*!***************************!*\
  !*** multi ./src/main.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/vignesh/Documents/sam_workspace/maveric/prod/maveric/src/main.ts */"./src/main.ts");


/***/ }),

/***/ 1:
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 2:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3:
/*!************************!*\
  !*** stream (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main.js.map